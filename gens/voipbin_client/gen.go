// Package voipbin_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package voipbin_client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AgentManagerAgentPermission.
const (
	AgentManagerPermissionAll               AgentManagerAgentPermission = 65535
	AgentManagerPermissionCustomerAdmin     AgentManagerAgentPermission = 32
	AgentManagerPermissionCustomerAgent     AgentManagerAgentPermission = 16
	AgentManagerPermissionCustomerAll       AgentManagerAgentPermission = 240
	AgentManagerPermissionCustomerManager   AgentManagerAgentPermission = 64
	AgentManagerPermissionNone              AgentManagerAgentPermission = 0
	AgentManagerPermissionProjectAll        AgentManagerAgentPermission = 15
	AgentManagerPermissionProjectSuperAdmin AgentManagerAgentPermission = 1
)

// Defines values for AgentManagerAgentRingMethod.
const (
	AgentManagerAgentRingMethodLinear  AgentManagerAgentRingMethod = "linear"
	AgentManagerAgentRingMethodRingAll AgentManagerAgentRingMethod = "ringall"
)

// Defines values for AgentManagerAgentStatus.
const (
	AgentManagerAgentStatusAvailable AgentManagerAgentStatus = "available"
	AgentManagerAgentStatusAway      AgentManagerAgentStatus = "away"
	AgentManagerAgentStatusBusy      AgentManagerAgentStatus = "busy"
	AgentManagerAgentStatusNone      AgentManagerAgentStatus = ""
	AgentManagerAgentStatusOffline   AgentManagerAgentStatus = "offline"
	AgentManagerAgentStatusRinging   AgentManagerAgentStatus = "ringing"
)

// Defines values for BillingManagerAccountPaymentMethod.
const (
	BillingManagerAccountPaymentMethodCreditCard BillingManagerAccountPaymentMethod = "credit card"
	BillingManagerAccountPaymentMethodNone       BillingManagerAccountPaymentMethod = ""
)

// Defines values for BillingManagerAccountPaymentType.
const (
	BillingManagerAccountPaymentTypeNone    BillingManagerAccountPaymentType = ""
	BillingManagerAccountPaymentTypePrepaid BillingManagerAccountPaymentType = "prepaid"
)

// Defines values for BillingManagerBillingStatus.
const (
	BillingManagerBillingStatusEnd         BillingManagerBillingStatus = "end"
	BillingManagerBillingStatusFinished    BillingManagerBillingStatus = "finished"
	BillingManagerBillingStatusPending     BillingManagerBillingStatus = "pending"
	BillingManagerBillingStatusProgressing BillingManagerBillingStatus = "progressing"
)

// Defines values for BillingManagerBillingreferenceType.
const (
	BillingManagerBillingreferenceTypeCall        BillingManagerBillingreferenceType = "call"
	BillingManagerBillingreferenceTypeNone        BillingManagerBillingreferenceType = ""
	BillingManagerBillingreferenceTypeNumber      BillingManagerBillingreferenceType = "number"
	BillingManagerBillingreferenceTypeNumberRenew BillingManagerBillingreferenceType = "number_renew"
	BillingManagerBillingreferenceTypeSMS         BillingManagerBillingreferenceType = "sms"
)

// Defines values for CallManagerCallDirection.
const (
	CallManagerCallDirectionIncoming CallManagerCallDirection = "incoming"
	CallManagerCallDirectionOutgoing CallManagerCallDirection = "outgoing"
)

// Defines values for CallManagerCallHangupBy.
const (
	CallManagerCallHangupByLocal  CallManagerCallHangupBy = "local"
	CallManagerCallHangupByNone   CallManagerCallHangupBy = ""
	CallManagerCallHangupByRemote CallManagerCallHangupBy = "remote"
)

// Defines values for CallManagerCallHangupReason.
const (
	CallManagerCallHangupReasonAMD      CallManagerCallHangupReason = "amd"
	CallManagerCallHangupReasonBusy     CallManagerCallHangupReason = "busy"
	CallManagerCallHangupReasonCancel   CallManagerCallHangupReason = "cancel"
	CallManagerCallHangupReasonDialout  CallManagerCallHangupReason = "dialout"
	CallManagerCallHangupReasonFailed   CallManagerCallHangupReason = "failed"
	CallManagerCallHangupReasonNoanswer CallManagerCallHangupReason = "noanswer"
	CallManagerCallHangupReasonNone     CallManagerCallHangupReason = ""
	CallManagerCallHangupReasonNormal   CallManagerCallHangupReason = "normal"
	CallManagerCallHangupReasonTimeout  CallManagerCallHangupReason = "timeout"
)

// Defines values for CallManagerCallMuteDirection.
const (
	CallManagerCallMuteDirectionBoth CallManagerCallMuteDirection = "both"
	CallManagerCallMuteDirectionIn   CallManagerCallMuteDirection = "in"
	CallManagerCallMuteDirectionNone CallManagerCallMuteDirection = ""
	CallManagerCallMuteDirectionOut  CallManagerCallMuteDirection = "out"
)

// Defines values for CallManagerCallStatus.
const (
	CallManagerCallStatusCanceling   CallManagerCallStatus = "canceling"
	CallManagerCallStatusDialing     CallManagerCallStatus = "dialing"
	CallManagerCallStatusHangup      CallManagerCallStatus = "hangup"
	CallManagerCallStatusProgressing CallManagerCallStatus = "progressing"
	CallManagerCallStatusRinging     CallManagerCallStatus = "ringing"
	CallManagerCallStatusTerminating CallManagerCallStatus = "terminating"
)

// Defines values for CallManagerCallType.
const (
	CallManagerCallTypeConference CallManagerCallType = "conference"
	CallManagerCallTypeFlow       CallManagerCallType = "flow"
	CallManagerCallTypeNone       CallManagerCallType = ""
	CallManagerCallTypeSIPService CallManagerCallType = "sip-service"
)

// Defines values for CallManagerGroupcallAnswerMethod.
const (
	CallManagerGroupcallAnswerMethodHangupOthers CallManagerGroupcallAnswerMethod = "hangup_others"
	CallManagerGroupcallAnswerMethodNone         CallManagerGroupcallAnswerMethod = ""
)

// Defines values for CallManagerGroupcallRingMethod.
const (
	CallManagerGroupcallRingMethodLinear  CallManagerGroupcallRingMethod = "linear"
	CallManagerGroupcallRingMethodNone    CallManagerGroupcallRingMethod = ""
	CallManagerGroupcallRingMethodRingAll CallManagerGroupcallRingMethod = "ring_all"
)

// Defines values for CallManagerGroupcallStatus.
const (
	CallManagerGroupcallStatusHangingup   CallManagerGroupcallStatus = "hangingup"
	CallManagerGroupcallStatusHangup      CallManagerGroupcallStatus = "hangup"
	CallManagerGroupcallStatusProgressing CallManagerGroupcallStatus = "progressing"
)

// Defines values for CallManagerRecordingFormat.
const (
	Wav CallManagerRecordingFormat = "wav"
)

// Defines values for CallManagerRecordingReferenceType.
const (
	CallManagerRecordingReferenceTypeCall       CallManagerRecordingReferenceType = "call"
	CallManagerRecordingReferenceTypeConfbridge CallManagerRecordingReferenceType = "confbridge"
)

// Defines values for CallManagerRecordingStatus.
const (
	CallManagerRecordingStatusEnded      CallManagerRecordingStatus = "ended"
	CallManagerRecordingStatusInitiating CallManagerRecordingStatus = "initiating"
	CallManagerRecordingStatusRecording  CallManagerRecordingStatus = "recording"
	CallManagerRecordingStatusStopping   CallManagerRecordingStatus = "stopping"
)

// Defines values for CampaignManagerCampaignEndHandle.
const (
	CampaignManagerCampaignEndHandleContinue CampaignManagerCampaignEndHandle = "continue"
	CampaignManagerCampaignEndHandleStop     CampaignManagerCampaignEndHandle = "stop"
)

// Defines values for CampaignManagerCampaignExecute.
const (
	CampaignManagerCampaignExecuteRun  CampaignManagerCampaignExecute = "run"
	CampaignManagerCampaignExecuteStop CampaignManagerCampaignExecute = "stop"
)

// Defines values for CampaignManagerCampaignStatus.
const (
	CampaignManagerCampaignStatusRun      CampaignManagerCampaignStatus = "run"
	CampaignManagerCampaignStatusStop     CampaignManagerCampaignStatus = "stop"
	CampaignManagerCampaignStatusStopping CampaignManagerCampaignStatus = "stopping"
)

// Defines values for CampaignManagerCampaignType.
const (
	CampaignManagerCampaignTypeCall CampaignManagerCampaignType = "call"
	CampaignManagerCampaignTypeFlow CampaignManagerCampaignType = "flow"
)

// Defines values for CampaignManagerCampaigncallReferenceType.
const (
	CampaignManagerCampaigncallReferenceTypeCall CampaignManagerCampaigncallReferenceType = "call"
	CampaignManagerCampaigncallReferenceTypeFlow CampaignManagerCampaigncallReferenceType = "flow"
	CampaignManagerCampaigncallReferenceTypeNone CampaignManagerCampaigncallReferenceType = "none"
)

// Defines values for CampaignManagerCampaigncallResult.
const (
	CampaignManagerCampaigncallResultFail    CampaignManagerCampaigncallResult = "fail"
	CampaignManagerCampaigncallResultNone    CampaignManagerCampaigncallResult = ""
	CampaignManagerCampaigncallResultSuccess CampaignManagerCampaigncallResult = "success"
)

// Defines values for CampaignManagerCampaigncallStatus.
const (
	CampaignManagerCampaigncallStatusDialing     CampaignManagerCampaigncallStatus = "dialing"
	CampaignManagerCampaigncallStatusDone        CampaignManagerCampaigncallStatus = "done"
	CampaignManagerCampaigncallStatusProgressing CampaignManagerCampaigncallStatus = "progressing"
)

// Defines values for ChatManagerChatType.
const (
	ChatManagerChatTypeGroup  ChatManagerChatType = "group"
	ChatManagerChatTypeNormal ChatManagerChatType = "normal"
)

// Defines values for ChatManagerChatroomType.
const (
	ChatManagerChatroomTypeGroup   ChatManagerChatroomType = "group"
	ChatManagerChatroomTypeNormal  ChatManagerChatroomType = "normal"
	ChatManagerChatroomTypeUnknown ChatManagerChatroomType = "unknown"
)

// Defines values for ChatManagerMediaType.
const (
	ChatManagerMediaTypeAddress ChatManagerMediaType = "address"
	ChatManagerMediaTypeAgent   ChatManagerMediaType = "agent"
	ChatManagerMediaTypeFile    ChatManagerMediaType = "file"
	ChatManagerMediaTypeLink    ChatManagerMediaType = "link"
)

// Defines values for ChatManagerMessagechatType.
const (
	ChatManagerMessagechatTypeNormal ChatManagerMessagechatType = "normal"
	ChatManagerMessagechatTypeSystem ChatManagerMessagechatType = "system"
)

// Defines values for ChatManagerMessagechatroomType.
const (
	ChatManagerMessagechatroomTypeNormal  ChatManagerMessagechatroomType = "normal"
	ChatManagerMessagechatroomTypeSystem  ChatManagerMessagechatroomType = "system"
	ChatManagerMessagechatroomTypeUnknown ChatManagerMessagechatroomType = ""
)

// Defines values for ChatbotManagerChatbotEngineType.
const (
	ChatbotManagerChatbotEngineTypeChatGPT ChatbotManagerChatbotEngineType = "chatGPT"
	ChatbotManagerChatbotEngineTypeClova   ChatbotManagerChatbotEngineType = "clova"
)

// Defines values for ChatbotManagerChatbotcallGender.
const (
	ChatbotManagerChatbotcallGenderFemale  ChatbotManagerChatbotcallGender = "female"
	ChatbotManagerChatbotcallGenderMale    ChatbotManagerChatbotcallGender = "male"
	ChatbotManagerChatbotcallGenderNeutral ChatbotManagerChatbotcallGender = "neutral"
)

// Defines values for ChatbotManagerChatbotcallStatus.
const (
	ChatbotManagerChatbotcallStatusEnd         ChatbotManagerChatbotcallStatus = "end"
	ChatbotManagerChatbotcallStatusInitiating  ChatbotManagerChatbotcallStatus = "initiating"
	ChatbotManagerChatbotcallStatusProgressing ChatbotManagerChatbotcallStatus = "progressing"
)

// Defines values for ChatbotManagerChatbotcallreferenceType.
const (
	ChatbotManagerChatbotcallreferenceTypeCall ChatbotManagerChatbotcallreferenceType = "call"
)

// Defines values for CommonAddressType.
const (
	CommonAddressTypeAgent      CommonAddressType = "agent"
	CommonAddressTypeConference CommonAddressType = "conference"
	CommonAddressTypeExtension  CommonAddressType = "extension"
	CommonAddressTypeLine       CommonAddressType = "line"
	CommonAddressTypeNone       CommonAddressType = ""
	CommonAddressTypeSIP        CommonAddressType = "sip"
	CommonAddressTypeTel        CommonAddressType = "tel"
)

// Defines values for ConferenceManagerConferenceStatus.
const (
	ConferenceManagerConferenceStatusProgressing ConferenceManagerConferenceStatus = "progressing"
	ConferenceManagerConferenceStatusStarting    ConferenceManagerConferenceStatus = "starting"
	ConferenceManagerConferenceStatusTerminated  ConferenceManagerConferenceStatus = "terminated"
	ConferenceManagerConferenceStatusTerminating ConferenceManagerConferenceStatus = "terminating"
)

// Defines values for ConferenceManagerConferenceType.
const (
	ConferenceManagerConferenceTypeConference ConferenceManagerConferenceType = "conference"
	ConferenceManagerConferenceTypeConnect    ConferenceManagerConferenceType = "connect"
	ConferenceManagerConferenceTypeNone       ConferenceManagerConferenceType = ""
	ConferenceManagerConferenceTypeQueue      ConferenceManagerConferenceType = "queue"
)

// Defines values for ConferenceManagerConferencecallReferenceType.
const (
	ConferenceManagerConferencecallReferenceTypeCall ConferenceManagerConferencecallReferenceType = "call"
)

// Defines values for ConferenceManagerConferencecallStatus.
const (
	ConferenceManagerConferencecallStatusJoined  ConferenceManagerConferencecallStatus = "joined"
	ConferenceManagerConferencecallStatusJoining ConferenceManagerConferencecallStatus = "joining"
	ConferenceManagerConferencecallStatusLeaved  ConferenceManagerConferencecallStatus = "leaved"
	ConferenceManagerConferencecallStatusLeaving ConferenceManagerConferencecallStatus = "leaving"
)

// Defines values for ConversationManagerAccountType.
const (
	ConversationManagerAccountTypeLine ConversationManagerAccountType = "line"
	ConversationManagerAccountTypeSMS  ConversationManagerAccountType = "sms"
)

// Defines values for ConversationManagerConversationReferenceType.
const (
	ConversationManagerConversationReferenceTypeLine    ConversationManagerConversationReferenceType = "line"
	ConversationManagerConversationReferenceTypeMessage ConversationManagerConversationReferenceType = "message"
	ConversationManagerConversationReferenceTypeNone    ConversationManagerConversationReferenceType = ""
)

// Defines values for ConversationManagerMediaType.
const (
	ConversationManagerMediaTypeAudio    ConversationManagerMediaType = "audio"
	ConversationManagerMediaTypeFile     ConversationManagerMediaType = "file"
	ConversationManagerMediaTypeFlex     ConversationManagerMediaType = "flex"
	ConversationManagerMediaTypeImage    ConversationManagerMediaType = "image"
	ConversationManagerMediaTypeImagemap ConversationManagerMediaType = "imagemap"
	ConversationManagerMediaTypeLocation ConversationManagerMediaType = "location"
	ConversationManagerMediaTypeSticker  ConversationManagerMediaType = "sticker"
	ConversationManagerMediaTypeTemplate ConversationManagerMediaType = "template"
	ConversationManagerMediaTypeVideo    ConversationManagerMediaType = "video"
)

// Defines values for ConversationManagerMessageDirection.
const (
	ConversationManagerMessageDirectionIncoming ConversationManagerMessageDirection = "incoming"
	ConversationManagerMessageDirectionOutgoing ConversationManagerMessageDirection = "outgoing"
)

// Defines values for ConversationManagerMessageReferenceType.
const (
	ConversationManagerMessageReferenceTypeCall     ConversationManagerMessageReferenceType = "call"
	ConversationManagerMessageReferenceTypeCampaign ConversationManagerMessageReferenceType = "campaign"
	ConversationManagerMessageReferenceTypeNone     ConversationManagerMessageReferenceType = "none"
)

// Defines values for ConversationManagerMessageStatus.
const (
	ConversationManagerMessageStatusFailed   ConversationManagerMessageStatus = "failed"
	ConversationManagerMessageStatusReceived ConversationManagerMessageStatus = "received"
	ConversationManagerMessageStatusSending  ConversationManagerMessageStatus = "sending"
	ConversationManagerMessageStatusSent     ConversationManagerMessageStatus = "sent"
)

// Defines values for CustomerManagerCustomerWebhookMethod.
const (
	CustomerManagerCustomerWebhookMethodDelete CustomerManagerCustomerWebhookMethod = "DELETE"
	CustomerManagerCustomerWebhookMethodGet    CustomerManagerCustomerWebhookMethod = "GET"
	CustomerManagerCustomerWebhookMethodNone   CustomerManagerCustomerWebhookMethod = ""
	CustomerManagerCustomerWebhookMethodPost   CustomerManagerCustomerWebhookMethod = "POST"
	CustomerManagerCustomerWebhookMethodPut    CustomerManagerCustomerWebhookMethod = "PUT"
)

// Defines values for FlowManagerActionType.
const (
	FlowManagerActionTypeAMD                 FlowManagerActionType = "amd"
	FlowManagerActionTypeAnswer              FlowManagerActionType = "answer"
	FlowManagerActionTypeBeep                FlowManagerActionType = "beep"
	FlowManagerActionTypeBranch              FlowManagerActionType = "branch"
	FlowManagerActionTypeCall                FlowManagerActionType = "call"
	FlowManagerActionTypeChatbotTalk         FlowManagerActionType = "chatbot_talk"
	FlowManagerActionTypeConditionCallDigits FlowManagerActionType = "condition_call_digits"
	FlowManagerActionTypeConditionCallStatus FlowManagerActionType = "condition_call_status"
	FlowManagerActionTypeConditionDatetime   FlowManagerActionType = "condition_datetime"
	FlowManagerActionTypeConditionVariable   FlowManagerActionType = "condition_variable"
	FlowManagerActionTypeConfbridgeJoin      FlowManagerActionType = "confbridge_join"
	FlowManagerActionTypeConferenceJoin      FlowManagerActionType = "conference_join"
	FlowManagerActionTypeConnect             FlowManagerActionType = "connect"
	FlowManagerActionTypeConversationSend    FlowManagerActionType = "conversation_send"
	FlowManagerActionTypeDigitsReceive       FlowManagerActionType = "digits_receive"
	FlowManagerActionTypeDigitsSend          FlowManagerActionType = "digits_send"
	FlowManagerActionTypeEcho                FlowManagerActionType = "echo"
	FlowManagerActionTypeExternalMediaStart  FlowManagerActionType = "external_media_start"
	FlowManagerActionTypeExternalMediaStop   FlowManagerActionType = "external_media_stop"
	FlowManagerActionTypeFetch               FlowManagerActionType = "fetch"
	FlowManagerActionTypeFetchFlow           FlowManagerActionType = "fetch_flow"
	FlowManagerActionTypeGoto                FlowManagerActionType = "goto"
	FlowManagerActionTypeHangup              FlowManagerActionType = "hangup"
	FlowManagerActionTypeMessageSend         FlowManagerActionType = "message_send"
	FlowManagerActionTypeMute                FlowManagerActionType = "mute"
	FlowManagerActionTypePlay                FlowManagerActionType = "play"
	FlowManagerActionTypeQueueJoin           FlowManagerActionType = "queue_join"
	FlowManagerActionTypeRecordingStart      FlowManagerActionType = "recording_start"
	FlowManagerActionTypeRecordingStop       FlowManagerActionType = "recording_stop"
	FlowManagerActionTypeSleep               FlowManagerActionType = "sleep"
	FlowManagerActionTypeStop                FlowManagerActionType = "stop"
	FlowManagerActionTypeStreamEcho          FlowManagerActionType = "stream_echo"
	FlowManagerActionTypeTalk                FlowManagerActionType = "talk"
	FlowManagerActionTypeTranscribeRecording FlowManagerActionType = "transcribe_recording"
	FlowManagerActionTypeTranscribeStart     FlowManagerActionType = "transcribe_start"
	FlowManagerActionTypeTranscribeStop      FlowManagerActionType = "transcribe_stop"
	FlowManagerActionTypeVariableSet         FlowManagerActionType = "variable_set"
	FlowManagerActionTypeWebhookSend         FlowManagerActionType = "webhook_send"
)

// Defines values for FlowManagerActiveflowStatus.
const (
	FlowManagerActiveflowStatusEnded   FlowManagerActiveflowStatus = "ended"
	FlowManagerActiveflowStatusNone    FlowManagerActiveflowStatus = ""
	FlowManagerActiveflowStatusRunning FlowManagerActiveflowStatus = "running"
)

// Defines values for FlowManagerFlowType.
const (
	FlowManagerFlowTypeCampaign   FlowManagerFlowType = "campaign"
	FlowManagerFlowTypeConference FlowManagerFlowType = "conference"
	FlowManagerFlowTypeFlow       FlowManagerFlowType = "flow"
	FlowManagerFlowTypeQueue      FlowManagerFlowType = "queue"
	FlowManagerFlowTypeTransfer   FlowManagerFlowType = "transfer"
)

// Defines values for FlowManagerReferenceType.
const (
	FlowManagerReferenceTypeCall    FlowManagerReferenceType = "call"
	FlowManagerReferenceTypeMessage FlowManagerReferenceType = "message"
	FlowManagerReferenceTypeNone    FlowManagerReferenceType = ""
)

// Defines values for MessageManagerMessageDirection.
const (
	MessageManagerMessageDirectionInbound  MessageManagerMessageDirection = "inbound"
	MessageManagerMessageDirectionOutbound MessageManagerMessageDirection = "outbound"
)

// Defines values for MessageManagerMessageProviderName.
const (
	MessageManagerMessageProviderNameMessagebird MessageManagerMessageProviderName = "messagebird"
	MessageManagerMessageProviderNameTelnyx      MessageManagerMessageProviderName = "telnyx"
	MessageManagerMessageProviderNameTwilio      MessageManagerMessageProviderName = "twilio"
)

// Defines values for MessageManagerMessageType.
const (
	MessageManagerMessageTypeSMS MessageManagerMessageType = "sms"
)

// Defines values for MessageManagerTargetStatus.
const (
	MessageManagerTargetStatusDLRTimeout MessageManagerTargetStatus = "dlr_timeout"
	MessageManagerTargetStatusDelivered  MessageManagerTargetStatus = "delivered"
	MessageManagerTargetStatusFailed     MessageManagerTargetStatus = "failed"
	MessageManagerTargetStatusGWTimeout  MessageManagerTargetStatus = "gw_timeout"
	MessageManagerTargetStatusQueued     MessageManagerTargetStatus = "queued"
	MessageManagerTargetStatusReceived   MessageManagerTargetStatus = "received"
	MessageManagerTargetStatusSent       MessageManagerTargetStatus = "sent"
)

// Defines values for NumberManagerAvailableNumber.
const (
	NumberManagerAvailableNumberFeatureEmergency NumberManagerAvailableNumber = "emergency"
	NumberManagerAvailableNumberFeatureFax       NumberManagerAvailableNumber = "fax"
	NumberManagerAvailableNumberFeatureMMS       NumberManagerAvailableNumber = "mms"
	NumberManagerAvailableNumberFeatureSMS       NumberManagerAvailableNumber = "sms"
	NumberManagerAvailableNumberFeatureVoice     NumberManagerAvailableNumber = "voice"
)

// Defines values for NumberManagerNumberProviderName.
const (
	NumberManagerProviderNameMessagebird NumberManagerNumberProviderName = "messagebird"
	NumberManagerProviderNameTelnyx      NumberManagerNumberProviderName = "telnyx"
	NumberManagerProviderNameTwilio      NumberManagerNumberProviderName = "twilio"
)

// Defines values for NumberManagerNumberStatus.
const (
	NumberManagerStatusActive  NumberManagerNumberStatus = "active"
	NumberManagerStatusDeleted NumberManagerNumberStatus = "deleted"
)

// Defines values for OutdialManagerOutdialtargetStatus.
const (
	OutdialManagerOutdialtargetStatusDone        OutdialManagerOutdialtargetStatus = "done"
	OutdialManagerOutdialtargetStatusIdle        OutdialManagerOutdialtargetStatus = "idle"
	OutdialManagerOutdialtargetStatusProgressing OutdialManagerOutdialtargetStatus = "progressing"
)

// Defines values for QueueManagerQueueRoutingMethod.
const (
	QueueManagerQueueRoutingMethodNone   QueueManagerQueueRoutingMethod = ""
	QueueManagerQueueRoutingMethodRandom QueueManagerQueueRoutingMethod = "random"
)

// Defines values for QueueManagerQueuecallReferenceType.
const (
	QueueManagerQueuecallReferenceTypeCall QueueManagerQueuecallReferenceType = "call"
)

// Defines values for QueueManagerQueuecallStatus.
const (
	QueueManagerQueuecallStatusAbandoned  QueueManagerQueuecallStatus = "abandoned"
	QueueManagerQueuecallStatusConnecting QueueManagerQueuecallStatus = "connecting"
	QueueManagerQueuecallStatusDone       QueueManagerQueuecallStatus = "done"
	QueueManagerQueuecallStatusInitiating QueueManagerQueuecallStatus = "initiating"
	QueueManagerQueuecallStatusKicking    QueueManagerQueuecallStatus = "kicking"
	QueueManagerQueuecallStatusService    QueueManagerQueuecallStatus = "service"
	QueueManagerQueuecallStatusWaiting    QueueManagerQueuecallStatus = "waiting"
)

// Defines values for RegistrarManagerAuthType.
const (
	RegistrarManagerAuthTypeBasic RegistrarManagerAuthType = "basic"
	RegistrarManagerAuthTypeIP    RegistrarManagerAuthType = "ip"
)

// Defines values for RouteManagerProviderType.
const (
	RouteManagerProviderTypeSIP RouteManagerProviderType = "sip"
)

// Defines values for StorageManagerFileReferenceType.
const (
	StorageManagerFileReferenceTypeNone      StorageManagerFileReferenceType = ""
	StorageManagerFileReferenceTypeNormal    StorageManagerFileReferenceType = "normal"
	StorageManagerFileReferenceTypeRecording StorageManagerFileReferenceType = "recording"
)

// Defines values for TranscribeManagerTranscribeDirection.
const (
	TranscribeManagerTranscribeDirectionBoth TranscribeManagerTranscribeDirection = "both"
	TranscribeManagerTranscribeDirectionIn   TranscribeManagerTranscribeDirection = "in"
	TranscribeManagerTranscribeDirectionOut  TranscribeManagerTranscribeDirection = "out"
)

// Defines values for TranscribeManagerTranscribeReferenceType.
const (
	TranscribeManagerTranscribeReferenceTypeCall       TranscribeManagerTranscribeReferenceType = "call"
	TranscribeManagerTranscribeReferenceTypeConfbridge TranscribeManagerTranscribeReferenceType = "confbridge"
	TranscribeManagerTranscribeReferenceTypeRecording  TranscribeManagerTranscribeReferenceType = "recording"
	TranscribeManagerTranscribeReferenceTypeUnknown    TranscribeManagerTranscribeReferenceType = "unknown"
)

// Defines values for TranscribeManagerTranscribeStatus.
const (
	TranscribeManagerTranscribeStatusDone        TranscribeManagerTranscribeStatus = "done"
	TranscribeManagerTranscribeStatusProgressing TranscribeManagerTranscribeStatus = "progressing"
)

// Defines values for TranscribeManagerTranscriptDirection.
const (
	TranscribeManagerTranscriptDirectionBoth TranscribeManagerTranscriptDirection = "both"
	TranscribeManagerTranscriptDirectionIn   TranscribeManagerTranscriptDirection = "in"
	TranscribeManagerTranscriptDirectionOut  TranscribeManagerTranscriptDirection = "out"
)

// Defines values for TransferManagerTransferType.
const (
	TransferManagerTransferTypeAttended TransferManagerTransferType = "attended"
	TransferManagerTransferTypeBlind    TransferManagerTransferType = "blind"
)

// AgentManagerAgent Represents an agent resource.
type AgentManagerAgent struct {
	// Addresses Agent's endpoint addresses.
	Addresses *[]CommonAddress `json:"addresses,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Agent's detail.
	Detail *string `json:"detail,omitempty"`
	Id     *string `json:"id,omitempty"`

	// Name Agent's name.
	Name *string `json:"name,omitempty"`

	// Permission Permission type
	Permission *AgentManagerAgentPermission `json:"permission,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *AgentManagerAgentRingMethod `json:"ring_method,omitempty"`

	// Status Agent's status
	Status *AgentManagerAgentStatus `json:"status,omitempty"`

	// TagIds Agent's tag IDs.
	TagIds *[]string `json:"tag_ids,omitempty"`

	// TmCreate Created timestamp.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Deleted timestamp.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Updated timestamp.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Username Agent's username.
	Username *string `json:"username,omitempty"`
}

// AgentManagerAgentPermission Permission type
type AgentManagerAgentPermission uint64

// AgentManagerAgentRingMethod Represents an agent resource.
type AgentManagerAgentRingMethod string

// AgentManagerAgentStatus Agent's status
type AgentManagerAgentStatus string

// BillingManagerAccount defines model for BillingManagerAccount.
type BillingManagerAccount struct {
	// Balance The balance of the account in USD.
	Balance *float32 `json:"balance,omitempty"`

	// CustomerId The unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Additional details about the account.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier of the account.
	Id *string `json:"id,omitempty"`

	// Name The name of the account.
	Name *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`

	// TmCreate The timestamp when the account was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The timestamp when the account was deleted, if applicable.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate The timestamp when the account was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// BillingManagerAccountPaymentMethod The method of payment used for the account.
type BillingManagerAccountPaymentMethod string

// BillingManagerAccountPaymentType The type of payment associated with the account.
type BillingManagerAccountPaymentType string

// BillingManagerBilling defines model for BillingManagerBilling.
type BillingManagerBilling struct {
	// AccountId The billing account ID.
	AccountId *string `json:"account_id,omitempty"`

	// BillingUnitCount The total count of billing units.
	BillingUnitCount *float32 `json:"billing_unit_count,omitempty"`

	// CostPerUnit The cost per billing unit.
	CostPerUnit *float32 `json:"cost_per_unit,omitempty"`

	// CostTotal The total cost of this billing.
	CostTotal *float32 `json:"cost_total,omitempty"`

	// CustomerId The customer's unique identifier.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id The unique identifier of the billing.
	Id *string `json:"id,omitempty"`

	// ReferenceId The ID of the reference related to this billing.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType The type of reference associated with this billing.
	ReferenceType *BillingManagerBillingreferenceType `json:"reference_type,omitempty"`

	// Status Status of the billing.
	Status *BillingManagerBillingStatus `json:"status,omitempty"`

	// TmBillingEnd The end timestamp of the billing period.
	TmBillingEnd *string `json:"tm_billing_end,omitempty"`

	// TmBillingStart The start timestamp of the billing period.
	TmBillingStart *string `json:"tm_billing_start,omitempty"`

	// TmCreate The creation timestamp.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The deletion timestamp, if applicable.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate The last update timestamp.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// BillingManagerBillingStatus Status of the billing.
type BillingManagerBillingStatus string

// BillingManagerBillingreferenceType The type of reference associated with this billing.
type BillingManagerBillingreferenceType string

// CallManagerCall defines model for CallManagerCall.
type CallManagerCall struct {
	Action *FlowManagerAction `json:"action,omitempty"`

	// ActiveflowId Activeflow ID
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// ChainedCallIds Chained call IDs
	ChainedCallIds *[]string `json:"chained_call_ids,omitempty"`

	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// Direction Call direction
	Direction *CallManagerCallDirection `json:"direction,omitempty"`

	// FlowId Flow ID
	FlowId *string `json:"flow_id,omitempty"`

	// GroupcallId Group call ID, indicates if this call is part of a group call
	GroupcallId *string `json:"groupcall_id,omitempty"`

	// HangupBy Indicates who hung up the call
	HangupBy *CallManagerCallHangupBy `json:"hangup_by,omitempty"`

	// HangupReason Reason for call hangup
	HangupReason *CallManagerCallHangupReason `json:"hangup_reason,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// MasterCallId Master call ID
	MasterCallId *string `json:"master_call_id,omitempty"`

	// MuteDirection Possible mute directions for the call
	MuteDirection *CallManagerCallMuteDirection `json:"mute_direction,omitempty"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// RecordingId Current recording ID
	RecordingId *string `json:"recording_id,omitempty"`

	// RecordingIds Recording IDs
	RecordingIds *[]string `json:"recording_ids,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Call status
	Status *CallManagerCallStatus `json:"status,omitempty"`

	// TmCreate Creation timestamp
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Deletion timestamp
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmHangup Timestamp for call hangup
	TmHangup *string `json:"tm_hangup,omitempty"`

	// TmProgressing Timestamp for call progressing
	TmProgressing *string `json:"tm_progressing,omitempty"`

	// TmRinging Timestamp for call ringing
	TmRinging *string `json:"tm_ringing,omitempty"`

	// TmUpdate Update timestamp
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Call type
	Type *CallManagerCallType `json:"type,omitempty"`
}

// CallManagerCallDirection Call direction
type CallManagerCallDirection string

// CallManagerCallHangupBy Indicates who hung up the call
type CallManagerCallHangupBy string

// CallManagerCallHangupReason Reason for call hangup
type CallManagerCallHangupReason string

// CallManagerCallMuteDirection Possible mute directions for the call
type CallManagerCallMuteDirection string

// CallManagerCallStatus Call status
type CallManagerCallStatus string

// CallManagerCallType Call type
type CallManagerCallType string

// CallManagerGroupcall Call or group call information
type CallManagerGroupcall struct {
	// AnswerCallId ID of the answered call
	AnswerCallId *string `json:"answer_call_id,omitempty"`

	// AnswerGroupcallId ID of the answered group call
	AnswerGroupcallId *string `json:"answer_groupcall_id,omitempty"`

	// AnswerMethod Method to handle answered calls
	AnswerMethod *CallManagerGroupcallAnswerMethod `json:"answer_method,omitempty"`

	// CallCount Number of remaining calls in the current dial
	CallCount *int `json:"call_count,omitempty"`

	// CallIds List of associated call IDs
	CallIds *[]string `json:"call_ids,omitempty"`

	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Destinations List of destination addresses
	Destinations *[]CommonAddress `json:"destinations,omitempty"`

	// DialIndex Current dial index, valid only when the ring method is "ring_all"
	DialIndex *int `json:"dial_index"`

	// FlowId ID of the associated flow
	FlowId *string `json:"flow_id,omitempty"`

	// GroupcallCount Number of remaining group calls in the current dial
	GroupcallCount *int `json:"groupcall_count,omitempty"`

	// GroupcallIds List of associated group call IDs
	GroupcallIds *[]string `json:"groupcall_ids,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// MasterCallId ID of the master call, if applicable
	MasterCallId *string `json:"master_call_id"`

	// MasterGroupcallId ID of the master group call, if applicable
	MasterGroupcallId *string `json:"master_groupcall_id"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// RingMethod Method used for dialing
	RingMethod *CallManagerGroupcallRingMethod `json:"ring_method,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Current status of the call or group call
	Status *CallManagerGroupcallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the call was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the call was deleted
	TmDelete *string `json:"tm_delete"`

	// TmUpdate Timestamp when the call was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
}

// CallManagerGroupcallAnswerMethod Method to handle answered calls
type CallManagerGroupcallAnswerMethod string

// CallManagerGroupcallRingMethod Method used for dialing
type CallManagerGroupcallRingMethod string

// CallManagerGroupcallStatus Current status of the call or group call
type CallManagerGroupcallStatus string

// CallManagerRecording defines model for CallManagerRecording.
type CallManagerRecording struct {
	// CustomerId Resource's customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// Format The format of the recording.
	Format *CallManagerRecordingFormat `json:"format,omitempty"`

	// Id Resource identifier
	Id *string `json:"id,omitempty"`

	// OwnerId Resource's owner ID
	OwnerId *string `json:"owner_id,omitempty"`

	// OwnerType Resource's owner type
	OwnerType *string `json:"owner_type,omitempty"`

	// ReferenceId The UUID of the reference.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference for the recording.
	ReferenceType *CallManagerRecordingReferenceType `json:"reference_type,omitempty"`

	// Status The status of the recording.
	Status *CallManagerRecordingStatus `json:"status,omitempty"`

	// TmCreate The creation timestamp of the recording.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The timestamp when the recording was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmEnd The end timestamp of the recording.
	TmEnd *string `json:"tm_end,omitempty"`

	// TmStart The start timestamp of the recording.
	TmStart *string `json:"tm_start,omitempty"`

	// TmUpdate The last update timestamp of the recording.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// CallManagerRecordingFormat The format of the recording.
type CallManagerRecordingFormat string

// CallManagerRecordingReferenceType Type of reference for the recording.
type CallManagerRecordingReferenceType string

// CallManagerRecordingStatus The status of the recording.
type CallManagerRecordingStatus string

// CampaignManagerCampaign defines model for CampaignManagerCampaign.
type CampaignManagerCampaign struct {
	Actions    *[]FlowManagerAction `json:"actions,omitempty"`
	CustomerId *string              `json:"customer_id,omitempty"`
	Detail     *string              `json:"detail,omitempty"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle      *CampaignManagerCampaignEndHandle `json:"end_handle,omitempty"`
	Id             *string                           `json:"id,omitempty"`
	Name           *string                           `json:"name,omitempty"`
	NextCampaignId *string                           `json:"next_campaign_id,omitempty"`
	OutdialId      *string                           `json:"outdial_id,omitempty"`
	OutplanId      *string                           `json:"outplan_id,omitempty"`
	QueueId        *string                           `json:"queue_id,omitempty"`
	ServiceLevel   *int                              `json:"service_level,omitempty"`

	// Status Status of the campaign.
	Status   *CampaignManagerCampaignStatus `json:"status,omitempty"`
	TmCreate *string                        `json:"tm_create,omitempty"`
	TmDelete *string                        `json:"tm_delete,omitempty"`
	TmUpdate *string                        `json:"tm_update,omitempty"`

	// Type Type of campaign.
	Type *CampaignManagerCampaignType `json:"type,omitempty"`
}

// CampaignManagerCampaignEndHandle Behavior of the campaign after outdial has no more targets.
type CampaignManagerCampaignEndHandle string

// CampaignManagerCampaignExecute Execution action for the campaign.
type CampaignManagerCampaignExecute string

// CampaignManagerCampaignStatus Status of the campaign.
type CampaignManagerCampaignStatus string

// CampaignManagerCampaignType Type of campaign.
type CampaignManagerCampaignType string

// CampaignManagerCampaigncall defines model for CampaignManagerCampaigncall.
type CampaignManagerCampaigncall struct {
	// ActiveflowId Identifier of the activeflow.
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// CampaignId Identifier of the campaign.
	CampaignId *string `json:"campaign_id,omitempty"`

	// CustomerId Identifier of the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// DestinationIndex Index of the destination.
	DestinationIndex *int `json:"destination_index,omitempty"`

	// FlowId Identifier of the flow.
	FlowId *string `json:"flow_id,omitempty"`

	// Id Unique identifier of the campaign call.
	Id *string `json:"id,omitempty"`

	// OutdialId Identifier of the outbound dial.
	OutdialId *string `json:"outdial_id,omitempty"`

	// OutdialTargetId Identifier of the outbound dial target.
	OutdialTargetId *string `json:"outdial_target_id,omitempty"`

	// OutplanId Identifier of the outbound plan.
	OutplanId *string `json:"outplan_id,omitempty"`

	// QueueId Identifier of the queue.
	QueueId *string `json:"queue_id,omitempty"`

	// ReferenceId Identifier of the reference.
	ReferenceId   *string                                   `json:"reference_id,omitempty"`
	ReferenceType *CampaignManagerCampaigncallReferenceType `json:"reference_type,omitempty"`
	Result        *CampaignManagerCampaigncallResult        `json:"result,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress                     `json:"source,omitempty"`
	Status *CampaignManagerCampaigncallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the campaign call was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the campaign call was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the campaign call was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TryCount Number of dialing attempts.
	TryCount *int `json:"try_count,omitempty"`
}

// CampaignManagerCampaigncallReferenceType defines model for CampaignManagerCampaigncallReferenceType.
type CampaignManagerCampaigncallReferenceType string

// CampaignManagerCampaigncallResult defines model for CampaignManagerCampaigncallResult.
type CampaignManagerCampaigncallResult string

// CampaignManagerCampaigncallStatus defines model for CampaignManagerCampaigncallStatus.
type CampaignManagerCampaigncallStatus string

// CampaignManagerOutplan defines model for CampaignManagerOutplan.
type CampaignManagerOutplan struct {
	// CustomerId Identifier of the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the outplan.
	Detail *string `json:"detail,omitempty"`

	// DialTimeout Dial timeout in milliseconds.
	DialTimeout *int `json:"dial_timeout,omitempty"`

	// Id Unique identifier of the outplan.
	Id *string `json:"id,omitempty"`

	// MaxTryCount0 Maximum number of tries for level 0.
	MaxTryCount0 *int `json:"max_try_count_0,omitempty"`

	// MaxTryCount1 Maximum number of tries for level 1.
	MaxTryCount1 *int `json:"max_try_count_1,omitempty"`

	// MaxTryCount2 Maximum number of tries for level 2.
	MaxTryCount2 *int `json:"max_try_count_2,omitempty"`

	// MaxTryCount3 Maximum number of tries for level 3.
	MaxTryCount3 *int `json:"max_try_count_3,omitempty"`

	// MaxTryCount4 Maximum number of tries for level 4.
	MaxTryCount4 *int `json:"max_try_count_4,omitempty"`

	// Name Name of the outplan.
	Name *string `json:"name,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// TmCreate Timestamp when the outplan was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the outplan was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the outplan was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TryInterval Interval between dialing attempts in milliseconds.
	TryInterval *int `json:"try_interval,omitempty"`
}

// ChatManagerChat defines model for ChatManagerChat.
type ChatManagerChat struct {
	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chat.
	Detail *string `json:"detail,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Name Name of the chat.
	Name *string `json:"name,omitempty"`

	// ParticipantIds List of participant IDs (agent IDs).
	ParticipantIds *[]string `json:"participant_ids,omitempty"`

	// RoomOwnerId Owned agent's ID.
	RoomOwnerId *string `json:"room_owner_id,omitempty"`

	// TmCreate Timestamp when the chat was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chat was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chat was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the chat.
	Type *ChatManagerChatType `json:"type,omitempty"`
}

// ChatManagerChatType Type of the chat.
type ChatManagerChatType string

// ChatManagerChatroom defines model for ChatManagerChatroom.
type ChatManagerChatroom struct {
	// ChatId Associated chat ID.
	ChatId *string `json:"chat_id,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chat room.
	Detail *string `json:"detail,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Name Name of the chat room.
	Name *string `json:"name,omitempty"`

	// OwnerId Resource's owner ID.
	OwnerId   *string `json:"owner_id,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`

	// ParticipantIds List of participant agent IDs.
	ParticipantIds *[]string `json:"participant_ids,omitempty"`

	// RoomOwnerId Chat room's owner agent ID.
	RoomOwnerId *string `json:"room_owner_id,omitempty"`

	// TmCreate Timestamp when the chat room was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chat room was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chat room was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the chat room.
	Type *ChatManagerChatroomType `json:"type,omitempty"`
}

// ChatManagerChatroomType Type of the chat room.
type ChatManagerChatroomType string

// ChatManagerMedia defines model for ChatManagerMedia.
type ChatManagerMedia struct {
	// Address Contains source or destination detail info.
	Address *CommonAddress `json:"address,omitempty"`

	// Agent Represents an agent resource.
	Agent *AgentManagerAgent `json:"agent,omitempty"`

	// FileId Valid only if the type is `file`.
	FileId *string `json:"file_id,omitempty"`

	// LinkUrl Valid only if the type is `link`.
	LinkUrl *string `json:"link_url,omitempty"`

	// Type Type of the media content.
	Type *ChatManagerMediaType `json:"type,omitempty"`
}

// ChatManagerMediaType Type of the media content.
type ChatManagerMediaType string

// ChatManagerMessagechat defines model for ChatManagerMessagechat.
type ChatManagerMessagechat struct {
	// ChatId Associated chat ID.
	ChatId *string `json:"chat_id,omitempty"`

	// Id Unique identifier (inherited from commonidentity.Identity).
	Id *string `json:"id,omitempty"`

	// Medias List of associated media objects.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Text Text content of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message chat was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message chat was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message chat was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the message chat.
	Type *ChatManagerMessagechatType `json:"type,omitempty"`
}

// ChatManagerMessagechatType Type of the message chat.
type ChatManagerMessagechatType string

// ChatManagerMessagechatroom defines model for ChatManagerMessagechatroom.
type ChatManagerMessagechatroom struct {
	// ChatroomId Associated chat room ID.
	ChatroomId *string `json:"chatroom_id,omitempty"`

	// CustomerId Resource's customer ID.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id Resource identifier.
	Id *string `json:"id,omitempty"`

	// Medias List of associated media objects.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// MessagechatId Associated message chat ID.
	MessagechatId *string `json:"messagechat_id,omitempty"`

	// OwnerId Resource's owner ID.
	OwnerId   *string `json:"owner_id,omitempty"`
	OwnerType *string `json:"owner_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Text Text content of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message chat room was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message chat room was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message chat room was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the message in the chat room.
	Type *ChatManagerMessagechatroomType `json:"type,omitempty"`
}

// ChatManagerMessagechatroomType Type of the message in the chat room.
type ChatManagerMessagechatroomType string

// ChatbotManagerChatbot defines model for ChatbotManagerChatbot.
type ChatbotManagerChatbot struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the chatbot.
	Detail *string `json:"detail,omitempty"`

	// EngineType Type of engine used by the chatbot.
	EngineType *ChatbotManagerChatbotEngineType `json:"engine_type,omitempty"`

	// Id Unique identifier of the chatbot.
	Id *string `json:"id,omitempty"`

	// InitPrompt Initial prompt to configure the chatbot's behavior.
	InitPrompt *string `json:"init_prompt,omitempty"`

	// Name Name of the chatbot.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the chatbot was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chatbot was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the chatbot was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ChatbotManagerChatbotEngineType Type of engine used by the chatbot.
type ChatbotManagerChatbotEngineType string

// ChatbotManagerChatbotcall defines model for ChatbotManagerChatbotcall.
type ChatbotManagerChatbotcall struct {
	// ActiveflowId Unique identifier for the activeflow.
	ActiveflowId *string `json:"activeflow_id,omitempty"`

	// ChatbotId Unique identifier of the associated chatbot.
	ChatbotId *string `json:"chatbot_id,omitempty"`

	// ConfbridgeId Unique identifier for the conference bridge.
	ConfbridgeId *string `json:"confbridge_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Gender Gender associated with the chatbot call.
	Gender *ChatbotManagerChatbotcallGender `json:"gender,omitempty"`

	// Id Unique identifier for the chatbot call.
	Id *string `json:"id,omitempty"`

	// Language Language used during the chatbot call.
	Language *string `json:"language,omitempty"`

	// ReferenceId Unique identifier for the reference.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference associated with the chatbot call.
	ReferenceType *ChatbotManagerChatbotcallreferenceType `json:"reference_type,omitempty"`

	// Status Status of the chatbot call.
	Status *ChatbotManagerChatbotcallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the chatbot call was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the chatbot call was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmEnd Timestamp when the chatbot call ended.
	TmEnd *string `json:"tm_end,omitempty"`

	// TmUpdate Timestamp when the chatbot call was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TranscribeId Unique identifier for the transcription service.
	TranscribeId *string `json:"transcribe_id,omitempty"`
}

// ChatbotManagerChatbotcallGender Gender associated with the chatbot call.
type ChatbotManagerChatbotcallGender string

// ChatbotManagerChatbotcallMessage defines model for ChatbotManagerChatbotcallMessage.
type ChatbotManagerChatbotcallMessage struct {
	// Content Content of the message.
	Content *string `json:"content,omitempty"`

	// Role Role of the entity in the conversation.
	Role *string `json:"role,omitempty"`
}

// ChatbotManagerChatbotcallStatus Status of the chatbot call.
type ChatbotManagerChatbotcallStatus string

// ChatbotManagerChatbotcallreferenceType Type of reference associated with the chatbot call.
type ChatbotManagerChatbotcallreferenceType string

// CommonAddress Contains source or destination detail info.
type CommonAddress struct {
	// Detail Detail description.
	Detail *string `json:"detail,omitempty"`

	// Name Name.
	Name *string `json:"name,omitempty"`

	// Target Address endpoint.
	Target *string `json:"target,omitempty"`

	// TargetName Address's name.
	TargetName *string `json:"target_name,omitempty"`

	// Type Type of address.
	Type *CommonAddressType `json:"type,omitempty"`
}

// CommonAddressType Type of address.
type CommonAddressType string

// CommonPagination defines model for CommonPagination.
type CommonPagination struct {
	// NextPageToken The token for next pagination.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ConferenceManagerConference defines model for ConferenceManagerConference.
type ConferenceManagerConference struct {
	// ConferencecallIds List of associated conference call IDs.
	ConferencecallIds *[]string `json:"conferencecall_ids,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Data Custom data associated with the conference.
	Data *map[string]interface{} `json:"data,omitempty"`

	// Detail Detailed information about the conference.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the conference.
	Id *string `json:"id,omitempty"`

	// Name Name of the conference.
	Name *string `json:"name,omitempty"`

	// PostActions Post-actions to execute after the conference ends.
	PostActions *[]FlowManagerAction `json:"post_actions,omitempty"`

	// PreActions Pre-actions to execute before the conference starts.
	PreActions *[]FlowManagerAction `json:"pre_actions,omitempty"`

	// RecordingId ID of the main recording associated with the conference.
	RecordingId *string `json:"recording_id,omitempty"`

	// RecordingIds List of associated recording IDs.
	RecordingIds *[]string `json:"recording_ids,omitempty"`

	// Status Status of the conference.
	Status *ConferenceManagerConferenceStatus `json:"status,omitempty"`

	// Timeout Timeout for the conference in seconds.
	Timeout *int32 `json:"timeout,omitempty"`

	// TmCreate Timestamp when the conference was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conference was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmEnd Timestamp when the conference ended.
	TmEnd *string `json:"tm_end,omitempty"`

	// TmUpdate Timestamp when the conference was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TranscribeId ID of the main transcription associated with the conference.
	TranscribeId *string `json:"transcribe_id,omitempty"`

	// TranscribeIds List of associated transcription IDs.
	TranscribeIds *[]string `json:"transcribe_ids,omitempty"`

	// Type Types of conferences.
	Type *ConferenceManagerConferenceType `json:"type,omitempty"`
}

// ConferenceManagerConferenceStatus Status of the conference.
type ConferenceManagerConferenceStatus string

// ConferenceManagerConferenceType Types of conferences.
type ConferenceManagerConferenceType string

// ConferenceManagerConferencecall defines model for ConferenceManagerConferencecall.
type ConferenceManagerConferencecall struct {
	// ConferenceId Unique identifier of the associated conference.
	ConferenceId *string `json:"conference_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id Unique identifier for the conference call.
	Id *string `json:"id,omitempty"`

	// ReferenceId Unique identifier of the reference (e.g., call ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of the reference associated with the conference call.
	ReferenceType *ConferenceManagerConferencecallReferenceType `json:"reference_type,omitempty"`

	// Status Status of the conference call.
	Status *ConferenceManagerConferencecallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the conference call was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conference call was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the conference call was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConferenceManagerConferencecallReferenceType Type of the reference associated with the conference call.
type ConferenceManagerConferencecallReferenceType string

// ConferenceManagerConferencecallStatus Status of the conference call.
type ConferenceManagerConferencecallStatus string

// ConversationManagerAccount defines model for ConversationManagerAccount.
type ConversationManagerAccount struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the account.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the account.
	Id *string `json:"id,omitempty"`

	// Name Name of the account.
	Name *string `json:"name,omitempty"`

	// Secret Secret associated with the account.
	Secret *string `json:"secret,omitempty"`

	// TmCreate Timestamp when the account was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the account was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the account was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Token Token, usually an API token, associated with the account.
	Token *string `json:"token,omitempty"`

	// Type Type of the account.
	Type *ConversationManagerAccountType `json:"type,omitempty"`
}

// ConversationManagerAccountType Type of the account.
type ConversationManagerAccountType string

// ConversationManagerConversation defines model for ConversationManagerConversation.
type ConversationManagerConversation struct {
	// AccountId Unique identifier of the associated account.
	AccountId *string `json:"account_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed information about the conversation.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the conversation.
	Id *string `json:"id,omitempty"`

	// Name Name of the conversation.
	Name *string `json:"name,omitempty"`

	// Participants List of participants in the conversation.
	Participants *[]CommonAddress `json:"participants,omitempty"`

	// ReferenceId Unique identifier for the reference (e.g., message ID, line ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of the reference for the conversation.
	ReferenceType *ConversationManagerConversationReferenceType `json:"reference_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// TmCreate Timestamp when the conversation was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the conversation was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the conversation was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConversationManagerConversationReferenceType Type of the reference for the conversation.
type ConversationManagerConversationReferenceType string

// ConversationManagerMedia defines model for ConversationManagerMedia.
type ConversationManagerMedia struct {
	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Filename Filename of the media.
	Filename *string `json:"filename,omitempty"`

	// Id Unique identifier for the media.
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when the media was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the media was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the media was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the media.
	Type *ConversationManagerMediaType `json:"type,omitempty"`
}

// ConversationManagerMediaType Type of the media.
type ConversationManagerMediaType string

// ConversationManagerMessage defines model for ConversationManagerMessage.
type ConversationManagerMessage struct {
	// ConversationId Unique identifier of the conversation.
	ConversationId *string `json:"conversation_id,omitempty"`

	// CustomerId Unique identifier of the associated customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Direction Direction of the message (incoming or outgoing).
	Direction *ConversationManagerMessageDirection `json:"direction,omitempty"`

	// Id Unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// Medias List of media associated with the message.
	Medias *[]ConversationManagerMedia `json:"medias,omitempty"`

	// ReferenceId The reference ID for the message (e.g., related call ID).
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Type of reference associated with the message (e.g., call, campaign).
	ReferenceType *ConversationManagerMessageReferenceType `json:"reference_type,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Status Status of the message.
	Status *ConversationManagerMessageStatus `json:"status,omitempty"`

	// Text The message content.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// ConversationManagerMessageDirection Direction of the message (incoming or outgoing).
type ConversationManagerMessageDirection string

// ConversationManagerMessageReferenceType Type of reference associated with the message (e.g., call, campaign).
type ConversationManagerMessageReferenceType string

// ConversationManagerMessageStatus Status of the message.
type ConversationManagerMessageStatus string

// CustomerManagerAccesskey defines model for CustomerManagerAccesskey.
type CustomerManagerAccesskey struct {
	CustomerId *string `json:"customer_id,omitempty"`
	Detail     *string `json:"detail,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	TmCreate   *string `json:"tm_create,omitempty"`
	TmDelete   *string `json:"tm_delete,omitempty"`
	TmExpire   *string `json:"tm_expire,omitempty"`
	TmUpdate   *string `json:"tm_update,omitempty"`
	Token      *string `json:"token,omitempty"`
}

// CustomerManagerCustomer defines model for CustomerManagerCustomer.
type CustomerManagerCustomer struct {
	// Address Address of the customer.
	Address *string `json:"address,omitempty"`

	// BillingAccountId The ID of the customer's default billing account.
	BillingAccountId *string `json:"billing_account_id,omitempty"`

	// Detail Details about the customer.
	Detail *string `json:"detail,omitempty"`

	// Email Email address of the customer.
	Email *string `json:"email,omitempty"`

	// Id Unique identifier for the customer.
	Id *string `json:"id,omitempty"`

	// Name Name of the customer.
	Name *string `json:"name,omitempty"`

	// PhoneNumber Phone number of the customer.
	PhoneNumber *string `json:"phone_number,omitempty"`

	// TmCreate Timestamp when the customer was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the customer was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the customer was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod *CustomerManagerCustomerWebhookMethod `json:"webhook_method,omitempty"`

	// WebhookUri URI for the customer's webhook.
	WebhookUri *string `json:"webhook_uri,omitempty"`
}

// CustomerManagerCustomerWebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
type CustomerManagerCustomerWebhookMethod string

// FlowManagerAction defines model for FlowManagerAction.
type FlowManagerAction struct {
	// Id The unique identifier
	Id string `json:"id"`

	// NextId The identifier of the next item
	NextId *string `json:"next_id,omitempty"`

	// Option Additional options
	Option *map[string]interface{} `json:"option,omitempty"`

	// TmExecute Timestamp or time to execute
	TmExecute *string `json:"tm_execute,omitempty"`

	// Type Type of the action.
	Type FlowManagerActionType `json:"type"`
}

// FlowManagerActionType Type of the action.
type FlowManagerActionType string

// FlowManagerActiveflow defines model for FlowManagerActiveflow.
type FlowManagerActiveflow struct {
	CurrentAction *FlowManagerAction `json:"current_action,omitempty"`

	// CustomerId ID of the customer associated with the flow.
	CustomerId *string `json:"customer_id,omitempty"`

	// ExecutedActions List of actions that have been executed.
	ExecutedActions *[]FlowManagerAction `json:"executed_actions,omitempty"`

	// FlowId ID of the flow definition.
	FlowId *string `json:"flow_id,omitempty"`

	// ForwardActionId ID of the next action to be executed.
	ForwardActionId *string `json:"forward_action_id,omitempty"`

	// Id Unique identifier for the activeflow.
	Id *string `json:"id,omitempty"`

	// ReferenceId ID of the reference object.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType Reference type of activeflow.
	ReferenceType *FlowManagerReferenceType `json:"reference_type,omitempty"`

	// Status Status of the activeflow.
	Status *FlowManagerActiveflowStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the flow was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the flow was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the flow was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// FlowManagerActiveflowStatus Status of the activeflow.
type FlowManagerActiveflowStatus string

// FlowManagerFlow defines model for FlowManagerFlow.
type FlowManagerFlow struct {
	// Actions List of actions associated with the flow.
	Actions *[]FlowManagerAction `json:"actions,omitempty"`

	// CustomerId Unique identifier for the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Detailed description of the flow.
	Detail *string `json:"detail,omitempty"`

	// Id Unique identifier for the flow.
	Id *string `json:"id,omitempty"`

	// Name Name of the flow.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the flow was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the flow was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the flow was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the flow.
	Type *FlowManagerFlowType `json:"type,omitempty"`
}

// FlowManagerFlowType Type of the flow.
type FlowManagerFlowType string

// FlowManagerReferenceType Reference type of activeflow.
type FlowManagerReferenceType string

// MessageManagerMessage defines model for MessageManagerMessage.
type MessageManagerMessage struct {
	// CustomerId Unique identifier for the customer.
	CustomerId *string `json:"customer_id,omitempty"`

	// Direction Direction of the message.
	Direction *MessageManagerMessageDirection `json:"direction,omitempty"`

	// Id Unique identifier for the message.
	Id *string `json:"id,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`

	// Targets List of target addresses to which the message is sent.
	Targets *[]MessageManagerTarget `json:"targets,omitempty"`

	// Text The text delivered in the body of the message.
	Text *string `json:"text,omitempty"`

	// TmCreate Timestamp when the message was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the message was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Type of the message.
	Type *MessageManagerMessageType `json:"type,omitempty"`
}

// MessageManagerMessageDirection Direction of the message.
type MessageManagerMessageDirection string

// MessageManagerMessageProviderName Name of the message provider.
type MessageManagerMessageProviderName string

// MessageManagerMessageType Type of the message.
type MessageManagerMessageType string

// MessageManagerTarget defines model for MessageManagerTarget.
type MessageManagerTarget struct {
	// Destination Contains source or destination detail info.
	Destination *CommonAddress `json:"destination,omitempty"`

	// Parts The number of message parts (if the message is split).
	Parts *int `json:"parts,omitempty"`

	// Status The status of the message for the target.
	Status *MessageManagerTargetStatus `json:"status,omitempty"`

	// TmUpdate Timestamp when the target message was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// MessageManagerTargetStatus The status of the message for the target.
type MessageManagerTargetStatus string

// NumberManagerAvailableNumber A feature supported by the phone number.
type NumberManagerAvailableNumber string

// NumberManagerAvailableNumberFeature defines model for NumberManagerAvailableNumberFeature.
type NumberManagerAvailableNumberFeature struct {
	// Country The country where the number is available.
	Country *string `json:"country,omitempty"`

	// Features The list of features supported by the number.
	Features *[]NumberManagerAvailableNumberFeature `json:"features,omitempty"`

	// Number The available phone number.
	Number *string `json:"number,omitempty"`

	// PostalCode The postal code associated with the number.
	PostalCode *string `json:"postal_code,omitempty"`

	// Region The region within the country.
	Region *string `json:"region,omitempty"`
}

// NumberManagerNumber defines model for NumberManagerNumber.
type NumberManagerNumber struct {
	// CallFlowId The ID of the associated call flow.
	CallFlowId *string `json:"call_flow_id,omitempty"`

	// CustomerId The customer ID associated with the number.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail Additional details about the number.
	Detail *string `json:"detail,omitempty"`

	// EmergencyEnabled Whether emergency services are enabled for the number.
	EmergencyEnabled *bool `json:"emergency_enabled,omitempty"`

	// Id The unique identifier for the number.
	Id *string `json:"id,omitempty"`

	// MessageFlowId The ID of the associated message flow.
	MessageFlowId *string `json:"message_flow_id,omitempty"`

	// Name The name of the number.
	Name *string `json:"name,omitempty"`

	// Number The phone number.
	Number *string `json:"number,omitempty"`

	// Status The status of the number.
	Status *NumberManagerNumberStatus `json:"status,omitempty"`

	// T38Enabled Whether T38 is enabled for the number.
	T38Enabled *bool `json:"t38_enabled,omitempty"`

	// TmCreate The timestamp of when the number was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The timestamp of when the number was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmPurchase The timestamp of when the number was purchased.
	TmPurchase *string `json:"tm_purchase,omitempty"`

	// TmRenew The timestamp of when the number was renewed.
	TmRenew *string `json:"tm_renew,omitempty"`

	// TmUpdate The timestamp of when the number was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// NumberManagerNumberProviderName The provider name for the number.
type NumberManagerNumberProviderName string

// NumberManagerNumberStatus The status of the number.
type NumberManagerNumberStatus string

// OutdialManagerOutdial defines model for OutdialManagerOutdial.
type OutdialManagerOutdial struct {
	// CampaignId The unique identifier for the campaign associated with the outdial.
	CampaignId *string `json:"campaign_id,omitempty"`

	// CustomerId The unique identifier for the customer associated with the outdial.
	CustomerId *string `json:"customer_id,omitempty"`

	// Data The data associated with the outdial.
	Data *string `json:"data,omitempty"`

	// Detail The detailed description of the outdial.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the outdial.
	Id *string `json:"id,omitempty"`

	// Name The name of the outdial.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the outdial was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the outdial was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the outdial was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// OutdialManagerOutdialtarget defines model for OutdialManagerOutdialtarget.
type OutdialManagerOutdialtarget struct {
	// Data The data associated with the outdial.
	Data *string `json:"data,omitempty"`

	// Destination0 Contains source or destination detail info.
	Destination0 *CommonAddress `json:"destination_0,omitempty"`

	// Destination1 Contains source or destination detail info.
	Destination1 *CommonAddress `json:"destination_1,omitempty"`

	// Destination2 Contains source or destination detail info.
	Destination2 *CommonAddress `json:"destination_2,omitempty"`

	// Destination3 Contains source or destination detail info.
	Destination3 *CommonAddress `json:"destination_3,omitempty"`

	// Destination4 Contains source or destination detail info.
	Destination4 *CommonAddress `json:"destination_4,omitempty"`

	// Detail Additional details about the outdial.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the outdial.
	Id *string `json:"id,omitempty"`

	// Name The name of the outdial.
	Name *string `json:"name,omitempty"`

	// OutdialId The outdial reference ID.
	OutdialId *string `json:"outdial_id,omitempty"`

	// Status The status of the outdial.
	Status *OutdialManagerOutdialtargetStatus `json:"status,omitempty"`

	// TmCreate The creation timestamp.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete The deletion timestamp.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate The update timestamp.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TryCount0 The try count for destination 0.
	TryCount0 *int `json:"try_count_0,omitempty"`

	// TryCount1 The try count for destination 1.
	TryCount1 *int `json:"try_count_1,omitempty"`

	// TryCount2 The try count for destination 2.
	TryCount2 *int `json:"try_count_2,omitempty"`

	// TryCount3 The try count for destination 3.
	TryCount3 *int `json:"try_count_3,omitempty"`

	// TryCount4 The try count for destination 4.
	TryCount4 *int `json:"try_count_4,omitempty"`
}

// OutdialManagerOutdialtargetStatus The status of the outdial.
type OutdialManagerOutdialtargetStatus string

// QueueManagerQueue defines model for QueueManagerQueue.
type QueueManagerQueue struct {
	CustomerId          *string                         `json:"customer_id,omitempty"`
	Detail              *string                         `json:"detail,omitempty"`
	Id                  *string                         `json:"id,omitempty"`
	Name                *string                         `json:"name,omitempty"`
	RoutingMethod       *QueueManagerQueueRoutingMethod `json:"routing_method,omitempty"`
	ServiceQueuecallIds *[]string                       `json:"service_queuecall_ids,omitempty"`

	// ServiceTimeout Service queue timeout in milliseconds.
	ServiceTimeout *int      `json:"service_timeout,omitempty"`
	TagIds         *[]string `json:"tag_ids,omitempty"`
	TmCreate       *string   `json:"tm_create,omitempty"`
	TmDelete       *string   `json:"tm_delete,omitempty"`
	TmUpdate       *string   `json:"tm_update,omitempty"`

	// TotalAbandonedCount Total abandoned call count.
	TotalAbandonedCount *int `json:"total_abandoned_count,omitempty"`

	// TotalIncomingCount Total incoming call count.
	TotalIncomingCount *int `json:"total_incoming_count,omitempty"`

	// TotalServicedCount Total serviced call count.
	TotalServicedCount *int                 `json:"total_serviced_count,omitempty"`
	WaitActions        *[]FlowManagerAction `json:"wait_actions,omitempty"`
	WaitQueuecallIds   *[]string            `json:"wait_queuecall_ids,omitempty"`

	// WaitTimeout Wait queue timeout in milliseconds.
	WaitTimeout *int `json:"wait_timeout,omitempty"`
}

// QueueManagerQueueRoutingMethod defines model for QueueManagerQueueRoutingMethod.
type QueueManagerQueueRoutingMethod string

// QueueManagerQueuecall defines model for QueueManagerQueuecall.
type QueueManagerQueuecall struct {
	CustomerId *string `json:"customer_id,omitempty"`

	// DurationService Duration for service in milliseconds
	DurationService *int `json:"duration_service,omitempty"`

	// DurationWaiting Duration for waiting in milliseconds
	DurationWaiting *int                                `json:"duration_waiting,omitempty"`
	Id              *string                             `json:"id,omitempty"`
	ReferenceId     *string                             `json:"reference_id,omitempty"`
	ReferenceType   *QueueManagerQueuecallReferenceType `json:"reference_type,omitempty"`

	// ServiceAgentId The ID of the service agent handling the queue call
	ServiceAgentId *string                      `json:"service_agent_id,omitempty"`
	Status         *QueueManagerQueuecallStatus `json:"status,omitempty"`

	// TmCreate Timestamp when the queue call was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the queue call was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmService Timestamp when the queue call started service
	TmService *string `json:"tm_service,omitempty"`

	// TmUpdate Timestamp when the queue call was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
}

// QueueManagerQueuecallReferenceType defines model for QueueManagerQueuecallReferenceType.
type QueueManagerQueuecallReferenceType string

// QueueManagerQueuecallStatus defines model for QueueManagerQueuecallStatus.
type QueueManagerQueuecallStatus string

// RegistrarManagerAuthType Defines the authentication type. Can be 'basic' or 'ip'.
type RegistrarManagerAuthType string

// RegistrarManagerExtension defines model for RegistrarManagerExtension.
type RegistrarManagerExtension struct {
	CustomerId *string `json:"customer_id,omitempty"`
	Detail     *string `json:"detail,omitempty"`

	// DomainName Domain name, same as the customer_id, used by Kamailio's INVITE validation
	DomainName *string `json:"domain_name,omitempty"`
	Extension  *string `json:"extension,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	Password   *string `json:"password,omitempty"`

	// TmCreate Timestamp when the extension was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the extension was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the extension was last updated
	TmUpdate *string `json:"tm_update,omitempty"`

	// Username Username, same as the Extension, used by Kamailio's INVITE validation
	Username *string `json:"username,omitempty"`
}

// RegistrarManagerTrunk defines model for RegistrarManagerTrunk.
type RegistrarManagerTrunk struct {
	AllowedIps *[]string                   `json:"allowed_ips,omitempty"`
	AuthTypes  *[]RegistrarManagerAuthType `json:"auth_types,omitempty"`
	CustomerId *string                     `json:"customer_id,omitempty"`
	Detail     *string                     `json:"detail,omitempty"`
	DomainName *string                     `json:"domain_name,omitempty"`
	Id         *string                     `json:"id,omitempty"`
	Name       *string                     `json:"name,omitempty"`
	Password   *string                     `json:"password,omitempty"`

	// TmCreate Timestamp when the trunk was created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the trunk was deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the trunk was last updated
	TmUpdate *string `json:"tm_update,omitempty"`
	Username *string `json:"username,omitempty"`
}

// RouteManagerProvider defines model for RouteManagerProvider.
type RouteManagerProvider struct {
	// Detail The details about the provider.
	Detail *string `json:"detail,omitempty"`

	// Hostname The destination hostname for the provider.
	Hostname *string `json:"hostname,omitempty"`

	// Id The unique identifier for the provider.
	Id *string `json:"id,omitempty"`

	// Name The name of the provider.
	Name *string `json:"name,omitempty"`

	// TechHeaders The tech headers, valid only for SIP type providers.
	TechHeaders *map[string]string `json:"tech_headers,omitempty"`

	// TechPostfix The tech postfix, valid only for SIP type providers.
	TechPostfix *string `json:"tech_postfix,omitempty"`

	// TechPrefix The tech prefix, valid only for SIP type providers.
	TechPrefix *string `json:"tech_prefix,omitempty"`

	// TmCreate Timestamp when the provider was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the provider was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the provider was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type *RouteManagerProviderType `json:"type,omitempty"`
}

// RouteManagerProviderType Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
type RouteManagerProviderType string

// RouteManagerRoute defines model for RouteManagerRoute.
type RouteManagerRoute struct {
	// CustomerId The customer ID associated with the route.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The details about the route.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the route.
	Id *string `json:"id,omitempty"`

	// Name The name of the route.
	Name *string `json:"name,omitempty"`

	// Priority The priority of the route, used for routing decisions.
	Priority *int `json:"priority,omitempty"`

	// ProviderId The unique identifier of the provider associated with this route.
	ProviderId *string `json:"provider_id,omitempty"`

	// Target The target destination for the route (e.g., country code or 'all').
	Target *string `json:"target,omitempty"`

	// TmCreate Timestamp when the route was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the route was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the route was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// StorageManagerAccount defines model for StorageManagerAccount.
type StorageManagerAccount struct {
	// CustomerId The customer ID associated with the account.
	CustomerId *string `json:"customer_id,omitempty"`

	// Id The unique identifier for the account.
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when the account was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the account was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the account was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// TotalFileCount The total number of files in the account.
	TotalFileCount *int64 `json:"total_file_count,omitempty"`

	// TotalFileSize The total file size in bytes.
	TotalFileSize *int64 `json:"total_file_size,omitempty"`
}

// StorageManagerFile defines model for StorageManagerFile.
type StorageManagerFile struct {
	// CustomerId The customer ID associated with the file.
	CustomerId *string `json:"customer_id,omitempty"`

	// Detail The details of the file.
	Detail *string `json:"detail,omitempty"`

	// Filename The filename of the file.
	Filename *string `json:"filename,omitempty"`

	// Filesize The size of the file in bytes.
	Filesize *int64 `json:"filesize,omitempty"`

	// Id The unique identifier for the file.
	Id *string `json:"id,omitempty"`

	// Name The name of the file.
	Name *string `json:"name,omitempty"`

	// OwnerId The owner ID of the file.
	OwnerId *string `json:"owner_id,omitempty"`

	// ReferenceId The reference ID associated with the file.
	ReferenceId *string `json:"reference_id,omitempty"`

	// ReferenceType The reference type of the file.
	ReferenceType *StorageManagerFileReferenceType `json:"reference_type,omitempty"`

	// TmCreate Timestamp when the file was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the file was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmDownloadExpire The timestamp when the download link expires.
	TmDownloadExpire *string `json:"tm_download_expire,omitempty"`

	// TmUpdate Timestamp when the file was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`

	// UriDownload The URI for downloading the file.
	UriDownload *string `json:"uri_download,omitempty"`
}

// StorageManagerFileReferenceType The reference type of the file.
type StorageManagerFileReferenceType string

// TagManagerTag defines model for TagManagerTag.
type TagManagerTag struct {
	// Detail The details about the tag.
	Detail *string `json:"detail,omitempty"`

	// Id The unique identifier for the tag.
	Id *string `json:"id,omitempty"`

	// Name The name of the tag.
	Name *string `json:"name,omitempty"`

	// TmCreate Timestamp when the tag was created.
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when the tag was deleted.
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when the tag was last updated.
	TmUpdate *string `json:"tm_update,omitempty"`
}

// TranscribeManagerTranscribe defines model for TranscribeManagerTranscribe.
type TranscribeManagerTranscribe struct {
	// CustomerId Customer ID
	CustomerId *string                               `json:"customer_id,omitempty"`
	Direction  *TranscribeManagerTranscribeDirection `json:"direction,omitempty"`

	// Id Transcribe id
	Id *string `json:"id,omitempty"`

	// Language BCP47 type's language code.
	Language *string `json:"language,omitempty"`

	// ReferenceId Call/Conference/Recording's ID
	ReferenceId   *string                                   `json:"reference_id,omitempty"`
	ReferenceType *TranscribeManagerTranscribeReferenceType `json:"reference_type,omitempty"`
	Status        *TranscribeManagerTranscribeStatus        `json:"status,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when updated
	TmUpdate *string `json:"tm_update,omitempty"`
}

// TranscribeManagerTranscribeDirection defines model for TranscribeManagerTranscribeDirection.
type TranscribeManagerTranscribeDirection string

// TranscribeManagerTranscribeReferenceType defines model for TranscribeManagerTranscribeReferenceType.
type TranscribeManagerTranscribeReferenceType string

// TranscribeManagerTranscribeStatus defines model for TranscribeManagerTranscribeStatus.
type TranscribeManagerTranscribeStatus string

// TranscribeManagerTranscript defines model for TranscribeManagerTranscript.
type TranscribeManagerTranscript struct {
	Direction *TranscribeManagerTranscriptDirection `json:"direction,omitempty"`

	// Id Transcript ID
	Id *string `json:"id,omitempty"`

	// Message Transcript message
	Message *string `json:"message,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmTranscript Timestamp for the transcript
	TmTranscript *string `json:"tm_transcript,omitempty"`

	// TranscribeId Transcribe ID
	TranscribeId *string `json:"transcribe_id,omitempty"`
}

// TranscribeManagerTranscriptDirection defines model for TranscribeManagerTranscriptDirection.
type TranscribeManagerTranscriptDirection string

// TransferManagerTransfer defines model for TransferManagerTransfer.
type TransferManagerTransfer struct {
	// ConfbridgeId Conference Bridge ID
	ConfbridgeId *string `json:"confbridge_id,omitempty"`

	// CustomerId Customer ID
	CustomerId *string `json:"customer_id,omitempty"`

	// GroupcallId Created Groupcall ID
	GroupcallId *string `json:"groupcall_id,omitempty"`

	// Id Transfer ID
	Id *string `json:"id,omitempty"`

	// TmCreate Timestamp when created
	TmCreate *string `json:"tm_create,omitempty"`

	// TmDelete Timestamp when deleted
	TmDelete *string `json:"tm_delete,omitempty"`

	// TmUpdate Timestamp when updated
	TmUpdate *string `json:"tm_update,omitempty"`

	// TransfereeAddresses List of transferee addresses
	TransfereeAddresses *[]CommonAddress `json:"transferee_addresses,omitempty"`

	// TransfereeCallId Transferee Call ID
	TransfereeCallId *string `json:"transferee_call_id,omitempty"`

	// TransfererCallId Transferer Call ID
	TransfererCallId *string                      `json:"transferer_call_id,omitempty"`
	Type             *TransferManagerTransferType `json:"type,omitempty"`
}

// TransferManagerTransferType defines model for TransferManagerTransferType.
type TransferManagerTransferType string

// PageSize defines model for PageSize.
type PageSize = int

// PageToken defines model for PageToken.
type PageToken = string

// GetAccesskeysParams defines parameters for GetAccesskeys.
type GetAccesskeysParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostAccesskeysJSONBody defines parameters for PostAccesskeys.
type PostAccesskeysJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Expire *int    `json:"expire,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PutAccesskeysIdJSONBody defines parameters for PutAccesskeysId.
type PutAccesskeysIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// GetActiveflowsParams defines parameters for GetActiveflows.
type GetActiveflowsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostActiveflowsJSONBody defines parameters for PostActiveflows.
type PostActiveflowsJSONBody struct {
	Actions *[]FlowManagerAction `json:"actions,omitempty"`

	// FlowId Flow id of.
	FlowId *string `json:"flow_id,omitempty"`

	// Id ID of the activeflow.
	Id *string `json:"id,omitempty"`
}

// GetAgentsParams defines parameters for GetAgents.
type GetAgentsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// TagIds Comma separated tag ids.
	TagIds *string `form:"tag_ids,omitempty" json:"tag_ids,omitempty"`

	// Status Agent status.
	Status *AgentManagerAgentStatus `form:"status,omitempty" json:"status,omitempty"`
}

// PostAgentsJSONBody defines parameters for PostAgents.
type PostAgentsJSONBody struct {
	Addresses []CommonAddress `json:"addresses"`
	Detail    string          `json:"detail"`
	Name      string          `json:"name"`
	Password  string          `json:"password"`

	// Permission Permission type
	Permission AgentManagerAgentPermission `json:"permission"`

	// RingMethod Represents an agent resource.
	RingMethod AgentManagerAgentRingMethod `json:"ring_method"`
	TagIds     []string                    `json:"tag_ids"`
	Username   string                      `json:"username"`
}

// PutAgentsIdJSONBody defines parameters for PutAgentsId.
type PutAgentsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// RingMethod Represents an agent resource.
	RingMethod *AgentManagerAgentRingMethod `json:"ring_method,omitempty"`
}

// PutAgentsIdAddressesJSONBody defines parameters for PutAgentsIdAddresses.
type PutAgentsIdAddressesJSONBody struct {
	Addresses *[]CommonAddress `json:"addresses,omitempty"`
}

// PutAgentsIdPasswordJSONBody defines parameters for PutAgentsIdPassword.
type PutAgentsIdPasswordJSONBody struct {
	Password *string `json:"password,omitempty"`
}

// PutAgentsIdPermissionJSONBody defines parameters for PutAgentsIdPermission.
type PutAgentsIdPermissionJSONBody struct {
	// Permission Permission type
	Permission *AgentManagerAgentPermission `json:"permission,omitempty"`
}

// PutAgentsIdStatusJSONBody defines parameters for PutAgentsIdStatus.
type PutAgentsIdStatusJSONBody struct {
	// Status Agent's status
	Status *AgentManagerAgentStatus `json:"status,omitempty"`
}

// PutAgentsIdTagIdsJSONBody defines parameters for PutAgentsIdTagIds.
type PutAgentsIdTagIdsJSONBody struct {
	TagIds *[]string `json:"tag_ids,omitempty"`
}

// GetAvailableNumbersParams defines parameters for GetAvailableNumbers.
type GetAvailableNumbersParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// CountryCode The ISO country code.
	CountryCode string `form:"country_code" json:"country_code"`
}

// GetBillingAccountsParams defines parameters for GetBillingAccounts.
type GetBillingAccountsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostBillingAccountsJSONBody defines parameters for PostBillingAccounts.
type PostBillingAccountsJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`

	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`
}

// PutBillingAccountsIdJSONBody defines parameters for PutBillingAccountsId.
type PutBillingAccountsIdJSONBody struct {
	Detail *string `json:"detail,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// PostBillingAccountsIdBalanceAddForceJSONBody defines parameters for PostBillingAccountsIdBalanceAddForce.
type PostBillingAccountsIdBalanceAddForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PostBillingAccountsIdBalanceSubtractForceJSONBody defines parameters for PostBillingAccountsIdBalanceSubtractForce.
type PostBillingAccountsIdBalanceSubtractForceJSONBody struct {
	Balance *float32 `json:"balance,omitempty"`
}

// PutBillingAccountsIdPaymentInfoJSONBody defines parameters for PutBillingAccountsIdPaymentInfo.
type PutBillingAccountsIdPaymentInfoJSONBody struct {
	// PaymentMethod The method of payment used for the account.
	PaymentMethod *BillingManagerAccountPaymentMethod `json:"payment_method,omitempty"`

	// PaymentType The type of payment associated with the account.
	PaymentType *BillingManagerAccountPaymentType `json:"payment_type,omitempty"`
}

// GetBillingsParams defines parameters for GetBillings.
type GetBillingsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCallsParams defines parameters for GetCalls.
type GetCallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCallsJSONBody defines parameters for PostCalls.
type PostCallsJSONBody struct {
	Actions      *[]FlowManagerAction `json:"actions,omitempty"`
	Destinations *[]CommonAddress     `json:"destinations,omitempty"`
	FlowId       *string              `json:"flow_id,omitempty"`

	// Source Contains source or destination detail info.
	Source *CommonAddress `json:"source,omitempty"`
}

// GetCallsIdMediaStreamParams defines parameters for GetCallsIdMediaStream.
type GetCallsIdMediaStreamParams struct {
	Encapsulation *string `form:"encapsulation,omitempty" json:"encapsulation,omitempty"`
}

// DeleteCallsIdMuteJSONBody defines parameters for DeleteCallsIdMute.
type DeleteCallsIdMuteJSONBody struct {
	// Direction Possible mute directions for the call
	Direction *CallManagerCallMuteDirection `json:"direction,omitempty"`
}

// PostCallsIdMuteJSONBody defines parameters for PostCallsIdMute.
type PostCallsIdMuteJSONBody struct {
	// Direction Possible mute directions for the call
	Direction *CallManagerCallMuteDirection `json:"direction,omitempty"`
}

// PostCallsIdTalkJSONBody defines parameters for PostCallsIdTalk.
type PostCallsIdTalkJSONBody struct {
	Gender   *string `json:"gender,omitempty"`
	Language *string `json:"language,omitempty"`
	Text     *string `json:"text,omitempty"`
}

// GetCampaigncallsParams defines parameters for GetCampaigncalls.
type GetCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetCampaignsParams defines parameters for GetCampaigns.
type GetCampaignsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCampaignsJSONBody defines parameters for PostCampaigns.
type PostCampaignsJSONBody struct {
	// Actions Actions associated with the campaign
	Actions []FlowManagerAction `json:"actions"`

	// Detail Detailed description of the campaign
	Detail string `json:"detail"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle CampaignManagerCampaignEndHandle `json:"end_handle"`

	// Name Name of the campaign
	Name string `json:"name"`

	// NextCampaignId ID of the next campaign
	NextCampaignId string `json:"next_campaign_id"`

	// OutdialId Outdial ID for the campaign
	OutdialId string `json:"outdial_id"`

	// OutplanId Outplan ID for the campaign
	OutplanId string `json:"outplan_id"`

	// QueueId Queue ID for the campaign
	QueueId string `json:"queue_id"`

	// ServiceLevel Service level of the campaign
	ServiceLevel int `json:"service_level"`

	// Type Type of campaign.
	Type CampaignManagerCampaignType `json:"type"`
}

// PutCampaignsIdJSONBody defines parameters for PutCampaignsId.
type PutCampaignsIdJSONBody struct {
	// Detail Updated details of the campaign
	Detail string `json:"detail"`

	// EndHandle Behavior of the campaign after outdial has no more targets.
	EndHandle CampaignManagerCampaignEndHandle `json:"end_handle"`

	// Name Updated name of the campaign
	Name string `json:"name"`

	// ServiceLevel Updated service level of the campaign
	ServiceLevel int `json:"service_level"`

	// Type Type of campaign.
	Type CampaignManagerCampaignType `json:"type"`
}

// PutCampaignsIdActionsJSONBody defines parameters for PutCampaignsIdActions.
type PutCampaignsIdActionsJSONBody struct {
	Actions []FlowManagerAction `json:"actions"`
}

// GetCampaignsIdCampaigncallsParams defines parameters for GetCampaignsIdCampaigncalls.
type GetCampaignsIdCampaigncallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PutCampaignsIdNextCampaignIdJSONBody defines parameters for PutCampaignsIdNextCampaignId.
type PutCampaignsIdNextCampaignIdJSONBody struct {
	// NextCampaignId The next campaign's id.
	NextCampaignId string `json:"next_campaign_id"`
}

// PutCampaignsIdResourceInfoJSONBody defines parameters for PutCampaignsIdResourceInfo.
type PutCampaignsIdResourceInfoJSONBody struct {
	// NextCampaignId next campaign's id.
	NextCampaignId string `json:"next_campaign_id"`

	// OutdialId outplan's id.
	OutdialId string `json:"outdial_id"`

	// OutplanId outplan's id.
	OutplanId string `json:"outplan_id"`

	// QueueId queue's id.
	QueueId string `json:"queue_id"`
}

// PutCampaignsIdServiceLevelJSONBody defines parameters for PutCampaignsIdServiceLevel.
type PutCampaignsIdServiceLevelJSONBody struct {
	// ServiceLevel The campaign's service level.
	ServiceLevel int `json:"service_level"`
}

// PutCampaignsIdStatusJSONBody defines parameters for PutCampaignsIdStatus.
type PutCampaignsIdStatusJSONBody struct {
	// Status Status of the campaign.
	Status CampaignManagerCampaignStatus `json:"status"`
}

// GetChatbotcallsParams defines parameters for GetChatbotcalls.
type GetChatbotcallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetChatbotsParams defines parameters for GetChatbots.
type GetChatbotsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatbotsJSONBody defines parameters for PostChatbots.
type PostChatbotsJSONBody struct {
	Detail string `json:"detail"`

	// EngineType Type of engine used by the chatbot.
	EngineType ChatbotManagerChatbotEngineType `json:"engine_type"`
	InitPrompt string                          `json:"init_prompt"`
	Name       string                          `json:"name"`
}

// PutChatbotsIdJSONBody defines parameters for PutChatbotsId.
type PutChatbotsIdJSONBody struct {
	Detail string `json:"detail"`

	// EngineType Type of engine used by the chatbot.
	EngineType ChatbotManagerChatbotEngineType `json:"engine_type"`
	InitPrompt string                          `json:"init_prompt"`
	Name       string                          `json:"name"`
}

// GetChatmessagesParams defines parameters for GetChatmessages.
type GetChatmessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatId The chat id.
	ChatId string `form:"chat_id" json:"chat_id"`
}

// PostChatmessagesJSONBody defines parameters for PostChatmessages.
type PostChatmessagesJSONBody struct {
	ChatId string              `json:"chat_id"`
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`
	Text   string        `json:"text"`

	// Type Type of the message chat.
	Type ChatManagerMessagechatType `json:"type"`
}

// GetChatroommessagesParams defines parameters for GetChatroommessages.
type GetChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// PostChatroommessagesJSONBody defines parameters for PostChatroommessages.
type PostChatroommessagesJSONBody struct {
	// ChatroomId ID of the chatroom.
	ChatroomId string `json:"chatroom_id"`

	// Medias List of media URLs.
	Medias *[]ChatManagerMedia `json:"medias,omitempty"`

	// Text Text of the message.
	Text string `json:"text"`
}

// GetChatroomsParams defines parameters for GetChatrooms.
type GetChatroomsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// OwnerId The ID of the chatroom owner.
	OwnerId *string `form:"owner_id,omitempty" json:"owner_id,omitempty"`
}

// PostChatroomsJSONBody defines parameters for PostChatrooms.
type PostChatroomsJSONBody struct {
	// Detail Additional details of the chatroom.
	Detail string `json:"detail"`

	// Name The name of the chatroom.
	Name string `json:"name"`

	// ParticipantIds The ID of the participant.
	ParticipantIds []string `json:"participant_ids"`
}

// PutChatroomsIdJSONBody defines parameters for PutChatroomsId.
type PutChatroomsIdJSONBody struct {
	// Detail The new details of the chatroom.
	Detail string `json:"detail"`

	// Name The new name of the chatroom.
	Name string `json:"name"`
}

// GetChatsParams defines parameters for GetChats.
type GetChatsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostChatsJSONBody defines parameters for PostChats.
type PostChatsJSONBody struct {
	Detail         string   `json:"detail"`
	Name           string   `json:"name"`
	OwnerId        string   `json:"owner_id"`
	ParticipantIds []string `json:"participant_ids"`

	// Type Type of the chat.
	Type ChatManagerChatType `json:"type"`
}

// PutChatsIdJSONBody defines parameters for PutChatsId.
type PutChatsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// PostChatsIdParticipantIdsJSONBody defines parameters for PostChatsIdParticipantIds.
type PostChatsIdParticipantIdsJSONBody struct {
	ParticipantId string `json:"participant_id"`
}

// PutChatsIdRoomOwnerIdJSONBody defines parameters for PutChatsIdRoomOwnerId.
type PutChatsIdRoomOwnerIdJSONBody struct {
	RoomOwnerId string `json:"room_owner_id"`
}

// GetConferencecallsParams defines parameters for GetConferencecalls.
type GetConferencecallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetConferencesParams defines parameters for GetConferences.
type GetConferencesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConferencesJSONBody defines parameters for PostConferences.
type PostConferencesJSONBody struct {
	Data        map[string]interface{} `json:"data"`
	Detail      string                 `json:"detail"`
	Name        string                 `json:"name"`
	PostActions []FlowManagerAction    `json:"post_actions"`
	PreActions  []FlowManagerAction    `json:"pre_actions"`
	Timeout     int                    `json:"timeout"`

	// Type Types of conferences.
	Type ConferenceManagerConferenceType `json:"type"`
}

// PutConferencesIdJSONBody defines parameters for PutConferencesId.
type PutConferencesIdJSONBody struct {
	Detail      string              `json:"detail"`
	Name        string              `json:"name"`
	PostActions []FlowManagerAction `json:"post_actions"`
	PreActions  []FlowManagerAction `json:"pre_actions"`
	Timeout     int                 `json:"timeout"`
}

// GetConferencesIdMediaStreamParams defines parameters for GetConferencesIdMediaStream.
type GetConferencesIdMediaStreamParams struct {
	// Encapsulation The encapsulation for media stream.
	Encapsulation string `form:"encapsulation" json:"encapsulation"`
}

// PostConferencesIdTranscribeStartJSONBody defines parameters for PostConferencesIdTranscribeStart.
type PostConferencesIdTranscribeStartJSONBody struct {
	// Language The language for transcription.
	Language string `json:"language"`
}

// GetConversationAccountsParams defines parameters for GetConversationAccounts.
type GetConversationAccountsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConversationAccountsJSONBody defines parameters for PostConversationAccounts.
type PostConversationAccountsJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
	Secret string `json:"secret"`
	Token  string `json:"token"`

	// Type Type of the account.
	Type ConversationManagerAccountType `json:"type"`
}

// PutConversationAccountsIdJSONBody defines parameters for PutConversationAccountsId.
type PutConversationAccountsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
	Secret string `json:"secret"`
	Token  string `json:"token"`
}

// GetConversationsParams defines parameters for GetConversations.
type GetConversationsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PutConversationsIdJSONBody defines parameters for PutConversationsId.
type PutConversationsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// GetConversationsIdMessagesParams defines parameters for GetConversationsIdMessages.
type GetConversationsIdMessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostConversationsIdMessagesJSONBody defines parameters for PostConversationsIdMessages.
type PostConversationsIdMessagesJSONBody struct {
	Medias []ConversationManagerMedia `json:"medias"`

	// Text The message text.
	Text string `json:"text"`
}

// PutCustomerJSONBody defines parameters for PutCustomer.
type PutCustomerJSONBody struct {
	// Address The customer's address.
	Address string `json:"address"`

	// Detail Additional details about the customer.
	Detail string `json:"detail"`

	// Email The customer's email address.
	Email string `json:"email"`

	// Name The new name of the customer.
	Name string `json:"name"`

	// PhoneNumber The customer's phone number.
	PhoneNumber string `json:"phone_number"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod CustomerManagerCustomerWebhookMethod `json:"webhook_method"`

	// WebhookUri Webhook URI.
	WebhookUri string `json:"webhook_uri"`
}

// PutCustomerBillingAccountIdJSONBody defines parameters for PutCustomerBillingAccountId.
type PutCustomerBillingAccountIdJSONBody struct {
	// BillingAccountId The new billing account ID for the customer.
	BillingAccountId string `json:"billing_account_id"`
}

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostCustomersJSONBody defines parameters for PostCustomers.
type PostCustomersJSONBody struct {
	Address     string `json:"address"`
	Detail      string `json:"detail"`
	Email       string `json:"email"`
	Name        string `json:"name"`
	PhoneNumber string `json:"phone_number"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod CustomerManagerCustomerWebhookMethod `json:"webhook_method"`
	WebhookUri    string                               `json:"webhook_uri"`
}

// PutCustomersIdJSONBody defines parameters for PutCustomersId.
type PutCustomersIdJSONBody struct {
	Address     string `json:"address"`
	Detail      string `json:"detail"`
	Email       string `json:"email"`
	Name        string `json:"name"`
	PhoneNumber string `json:"phone_number"`

	// WebhookMethod The HTTP method used for webhook (e.g., POST, GET, PUT, DELETE).
	WebhookMethod CustomerManagerCustomerWebhookMethod `json:"webhook_method"`
	WebhookUri    string                               `json:"webhook_uri"`
}

// PutCustomersIdBillingAccountIdJSONBody defines parameters for PutCustomersIdBillingAccountId.
type PutCustomersIdBillingAccountIdJSONBody struct {
	BillingAccountId string `json:"billing_account_id"`
}

// GetExtensionsParams defines parameters for GetExtensions.
type GetExtensionsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostExtensionsJSONBody defines parameters for PostExtensions.
type PostExtensionsJSONBody struct {
	Detail    string `json:"detail"`
	Extension string `json:"extension"`
	Name      string `json:"name"`
	Password  string `json:"password"`
}

// PutExtensionsIdJSONBody defines parameters for PutExtensionsId.
type PutExtensionsIdJSONBody struct {
	Detail   string `json:"detail"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// GetFilesParams defines parameters for GetFiles.
type GetFilesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostFilesMultipartBody defines parameters for PostFiles.
type PostFilesMultipartBody struct {
	// File The file to be uploaded.
	File openapi_types.File `json:"file"`
}

// GetFlowsParams defines parameters for GetFlows.
type GetFlowsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostFlowsJSONBody defines parameters for PostFlows.
type PostFlowsJSONBody struct {
	// Actions List of actions associated with the flow.
	Actions []FlowManagerAction `json:"actions"`

	// Detail Detailed information about the flow.
	Detail string `json:"detail"`

	// Name The name of the flow.
	Name string `json:"name"`
}

// PutFlowsIdJSONBody defines parameters for PutFlowsId.
type PutFlowsIdJSONBody struct {
	// Actions Updated list of actions associated with the flow.
	Actions []FlowManagerAction `json:"actions"`

	// Detail The updated details of the flow.
	Detail string `json:"detail"`

	// Name The updated name of the flow.
	Name string `json:"name"`
}

// GetGroupcallsParams defines parameters for GetGroupcalls.
type GetGroupcallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostGroupcallsJSONBody defines parameters for PostGroupcalls.
type PostGroupcallsJSONBody struct {
	Actions []FlowManagerAction `json:"actions"`

	// AnswerMethod Method to handle answered calls
	AnswerMethod CallManagerGroupcallAnswerMethod `json:"answer_method"`
	Destinations []CommonAddress                  `json:"destinations"`
	FlowId       string                           `json:"flow_id"`

	// RingMethod Method used for dialing
	RingMethod CallManagerGroupcallRingMethod `json:"ring_method"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`
}

// GetMessagesParams defines parameters for GetMessages.
type GetMessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostMessagesJSONBody defines parameters for PostMessages.
type PostMessagesJSONBody struct {
	// Destinations List of destinations for the message.
	Destinations []CommonAddress `json:"destinations"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`

	// Text The content of the message.
	Text string `json:"text"`
}

// GetNumbersParams defines parameters for GetNumbers.
type GetNumbersParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostNumbersJSONBody defines parameters for PostNumbers.
type PostNumbersJSONBody struct {
	// CallFlowId The ID of the call flow.
	CallFlowId string `json:"call_flow_id"`

	// Detail Additional details about the number.
	Detail string `json:"detail"`

	// MessageFlowId The ID of the message flow.
	MessageFlowId string `json:"message_flow_id"`

	// Name The name of the number.
	Name string `json:"name"`

	// Number The phone number.
	Number string `json:"number"`
}

// PostNumbersRenewJSONBody defines parameters for PostNumbersRenew.
type PostNumbersRenewJSONBody struct {
	// TmRenew The timestamp for renewing the number.
	TmRenew string `json:"tm_renew"`
}

// PutNumbersIdJSONBody defines parameters for PutNumbersId.
type PutNumbersIdJSONBody struct {
	// CallFlowId The ID of the updated call flow.
	CallFlowId string `json:"call_flow_id"`

	// Detail Updated details for the number.
	Detail string `json:"detail"`

	// MessageFlowId The ID of the updated message flow.
	MessageFlowId string `json:"message_flow_id"`

	// Name The updated name of the number.
	Name string `json:"name"`
}

// PutNumbersIdFlowIdsJSONBody defines parameters for PutNumbersIdFlowIds.
type PutNumbersIdFlowIdsJSONBody struct {
	// CallFlowId The ID of the updated call flow.
	CallFlowId string `json:"call_flow_id"`

	// MessageFlowId The ID of the updated message flow.
	MessageFlowId string `json:"message_flow_id"`
}

// GetOutdialsParams defines parameters for GetOutdials.
type GetOutdialsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostOutdialsJSONBody defines parameters for PostOutdials.
type PostOutdialsJSONBody struct {
	CampaignId string `json:"campaign_id"`
	Data       string `json:"data"`
	Detail     string `json:"detail"`
	Name       string `json:"name"`
}

// PutOutdialsIdJSONBody defines parameters for PutOutdialsId.
type PutOutdialsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// PutOutdialsIdCampaignIdJSONBody defines parameters for PutOutdialsIdCampaignId.
type PutOutdialsIdCampaignIdJSONBody struct {
	CampaignId string `json:"campaign_id"`
}

// PutOutdialsIdDataJSONBody defines parameters for PutOutdialsIdData.
type PutOutdialsIdDataJSONBody struct {
	Data string `json:"data"`
}

// GetOutdialsIdTargetsParams defines parameters for GetOutdialsIdTargets.
type GetOutdialsIdTargetsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostOutdialsIdTargetsJSONBody defines parameters for PostOutdialsIdTargets.
type PostOutdialsIdTargetsJSONBody struct {
	Data string `json:"data"`

	// Destination0 Contains source or destination detail info.
	Destination0 CommonAddress `json:"destination_0"`

	// Destination1 Contains source or destination detail info.
	Destination1 CommonAddress `json:"destination_1"`

	// Destination2 Contains source or destination detail info.
	Destination2 CommonAddress `json:"destination_2"`

	// Destination3 Contains source or destination detail info.
	Destination3 CommonAddress `json:"destination_3"`

	// Destination4 Contains source or destination detail info.
	Destination4 CommonAddress `json:"destination_4"`
	Detail       string        `json:"detail"`
	Name         string        `json:"name"`
}

// GetOutplansParams defines parameters for GetOutplans.
type GetOutplansParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostOutplansJSONBody defines parameters for PostOutplans.
type PostOutplansJSONBody struct {
	// Detail Additional details about the outplan.
	Detail string `json:"detail"`

	// DialTimeout The dial timeout in seconds.
	DialTimeout int `json:"dial_timeout"`

	// MaxTryCount0 Maximum retry count for destination 0.
	MaxTryCount0 int `json:"max_try_count_0"`

	// MaxTryCount1 Maximum retry count for destination 1.
	MaxTryCount1 int `json:"max_try_count_1"`

	// MaxTryCount2 Maximum retry count for destination 2.
	MaxTryCount2 int `json:"max_try_count_2"`

	// MaxTryCount3 Maximum retry count for destination 3.
	MaxTryCount3 int `json:"max_try_count_3"`

	// MaxTryCount4 Maximum retry count for destination 4.
	MaxTryCount4 int `json:"max_try_count_4"`

	// Name The name of the outplan.
	Name string `json:"name"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`

	// TryInterval The interval between retry attempts.
	TryInterval int `json:"try_interval"`
}

// PutOutplansIdJSONBody defines parameters for PutOutplansId.
type PutOutplansIdJSONBody struct {
	// Detail The new detail of the outplan.
	Detail string `json:"detail"`

	// Name The new name of the outplan.
	Name string `json:"name"`
}

// PutOutplansIdDialInfoJSONBody defines parameters for PutOutplansIdDialInfo.
type PutOutplansIdDialInfoJSONBody struct {
	// DialTimeout The new dial timeout in seconds.
	DialTimeout int `json:"dial_timeout"`

	// MaxTryCount0 The new maximum retry count for destination 0.
	MaxTryCount0 int `json:"max_try_count_0"`

	// MaxTryCount1 The new maximum retry count for destination 1.
	MaxTryCount1 int `json:"max_try_count_1"`

	// MaxTryCount2 The new maximum retry count for destination 2.
	MaxTryCount2 int `json:"max_try_count_2"`

	// MaxTryCount3 The new maximum retry count for destination 3.
	MaxTryCount3 int `json:"max_try_count_3"`

	// MaxTryCount4 The new maximum retry count for destination 4.
	MaxTryCount4 int `json:"max_try_count_4"`

	// Source Contains source or destination detail info.
	Source CommonAddress `json:"source"`

	// TryInterval The new interval between retry attempts.
	TryInterval int `json:"try_interval"`
}

// GetProvidersParams defines parameters for GetProviders.
type GetProvidersParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostProvidersJSONBody defines parameters for PostProviders.
type PostProvidersJSONBody struct {
	Detail      string                 `json:"detail"`
	Hostname    string                 `json:"hostname"`
	Name        string                 `json:"name"`
	TechHeaders map[string]interface{} `json:"tech_headers"`
	TechPostfix string                 `json:"tech_postfix"`
	TechPrefix  string                 `json:"tech_prefix"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type RouteManagerProviderType `json:"type"`
}

// PutProvidersIdJSONBody defines parameters for PutProvidersId.
type PutProvidersIdJSONBody struct {
	Detail      string                 `json:"detail"`
	Hostname    string                 `json:"hostname"`
	Name        string                 `json:"name"`
	TechHeaders map[string]interface{} `json:"tech_headers"`
	TechPostfix string                 `json:"tech_postfix"`
	TechPrefix  string                 `json:"tech_prefix"`

	// Type Defines the type of the provider. Currently, only 'sip' is supported for VoIP/SIP providers.
	Type RouteManagerProviderType `json:"type"`
}

// GetQueuecallsParams defines parameters for GetQueuecalls.
type GetQueuecallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetQueuesParams defines parameters for GetQueues.
type GetQueuesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostQueuesJSONBody defines parameters for PostQueues.
type PostQueuesJSONBody struct {
	Detail         string                         `json:"detail"`
	Name           string                         `json:"name"`
	RoutingMethod  QueueManagerQueueRoutingMethod `json:"routing_method"`
	ServiceTimeout int                            `json:"service_timeout"`
	TagIds         []string                       `json:"tag_ids"`
	WaitActions    []FlowManagerAction            `json:"wait_actions"`
	WaitTimeout    int                            `json:"wait_timeout"`
}

// PutQueuesIdJSONBody defines parameters for PutQueuesId.
type PutQueuesIdJSONBody struct {
	Detail         string                         `json:"detail"`
	Name           string                         `json:"name"`
	RoutingMethod  QueueManagerQueueRoutingMethod `json:"routing_method"`
	ServiceTimeout int                            `json:"service_timeout"`
	TagIds         []string                       `json:"tag_ids"`
	WaitActions    []FlowManagerAction            `json:"wait_actions"`
	WaitTimeout    int                            `json:"wait_timeout"`
}

// PutQueuesIdActionsJSONBody defines parameters for PutQueuesIdActions.
type PutQueuesIdActionsJSONBody struct {
	TimeoutService int                 `json:"timeout_service"`
	TimeoutWait    int                 `json:"timeout_wait"`
	WaitActions    []FlowManagerAction `json:"wait_actions"`
}

// PutQueuesIdRoutingMethodJSONBody defines parameters for PutQueuesIdRoutingMethod.
type PutQueuesIdRoutingMethodJSONBody struct {
	RoutingMethod QueueManagerQueueRoutingMethod `json:"routing_method"`
}

// PutQueuesIdTagIdsJSONBody defines parameters for PutQueuesIdTagIds.
type PutQueuesIdTagIdsJSONBody struct {
	TagIds []string `json:"tag_ids"`
}

// GetRecordingsParams defines parameters for GetRecordings.
type GetRecordingsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetRoutesParams defines parameters for GetRoutes.
type GetRoutesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// CustomerId target customer id
	CustomerId *string `form:"customer_id,omitempty" json:"customer_id,omitempty"`
}

// PostRoutesJSONBody defines parameters for PostRoutes.
type PostRoutesJSONBody struct {
	// CustomerId The ID of the customer for the route.
	CustomerId string `json:"customer_id"`

	// Detail The detail information of the route.
	Detail string `json:"detail"`

	// Name The name of the route.
	Name string `json:"name"`

	// Priority The priority of the route.
	Priority int `json:"priority"`

	// ProviderId The provider ID for the route.
	ProviderId string `json:"provider_id"`

	// Target The target of the route.
	Target string `json:"target"`
}

// PutRoutesIdJSONBody defines parameters for PutRoutesId.
type PutRoutesIdJSONBody struct {
	// Detail The detail information of the route.
	Detail string `json:"detail"`

	// Name The name of the route.
	Name string `json:"name"`

	// Priority The priority of the route.
	Priority int `json:"priority"`

	// ProviderId The provider ID for the route.
	ProviderId string `json:"provider_id"`

	// Target The target of the route.
	Target string `json:"target"`
}

// GetServiceAgentsAgentsParams defines parameters for GetServiceAgentsAgents.
type GetServiceAgentsAgentsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsCallsParams defines parameters for GetServiceAgentsCalls.
type GetServiceAgentsCallsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsChatroommessagesParams defines parameters for GetServiceAgentsChatroommessages.
type GetServiceAgentsChatroommessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ChatroomId The ID of the chatroom to retrieve messages for.
	ChatroomId string `form:"chatroom_id" json:"chatroom_id"`
}

// PostServiceAgentsChatroommessagesJSONBody defines parameters for PostServiceAgentsChatroommessages.
type PostServiceAgentsChatroommessagesJSONBody struct {
	ChatroomId string             `json:"chatroom_id"`
	Medias     []ChatManagerMedia `json:"medias"`
	Text       string             `json:"text"`
}

// GetServiceAgentsChatroomsParams defines parameters for GetServiceAgentsChatrooms.
type GetServiceAgentsChatroomsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostServiceAgentsChatroomsJSONBody defines parameters for PostServiceAgentsChatrooms.
type PostServiceAgentsChatroomsJSONBody struct {
	Detail         string   `json:"detail"`
	Name           string   `json:"name"`
	ParticipantIds []string `json:"participant_ids"`
}

// PutServiceAgentsChatroomsIdJSONBody defines parameters for PutServiceAgentsChatroomsId.
type PutServiceAgentsChatroomsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// GetServiceAgentsConversationsParams defines parameters for GetServiceAgentsConversations.
type GetServiceAgentsConversationsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsConversationsIdMessagesParams defines parameters for GetServiceAgentsConversationsIdMessages.
type GetServiceAgentsConversationsIdMessagesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostServiceAgentsConversationsIdMessagesJSONBody defines parameters for PostServiceAgentsConversationsIdMessages.
type PostServiceAgentsConversationsIdMessagesJSONBody struct {
	Medias []ConversationManagerMedia `json:"medias"`

	// Text The text content of the message.
	Text string `json:"text"`
}

// GetServiceAgentsExtensionsParams defines parameters for GetServiceAgentsExtensions.
type GetServiceAgentsExtensionsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// GetServiceAgentsFilesParams defines parameters for GetServiceAgentsFiles.
type GetServiceAgentsFilesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostServiceAgentsFilesMultipartBody defines parameters for PostServiceAgentsFiles.
type PostServiceAgentsFilesMultipartBody struct {
	// File The file to upload.
	File openapi_types.File `json:"file"`
}

// PutServiceAgentsMeJSONBody defines parameters for PutServiceAgentsMe.
type PutServiceAgentsMeJSONBody struct {
	// Detail Additional details about the agent.
	Detail string `json:"detail"`

	// Name The updated name of the agent.
	Name string `json:"name"`

	// RingMethod Represents an agent resource.
	RingMethod AgentManagerAgentRingMethod `json:"ring_method"`
}

// PutServiceAgentsMeAddressesJSONBody defines parameters for PutServiceAgentsMeAddresses.
type PutServiceAgentsMeAddressesJSONBody struct {
	// Addresses The updated list of addresses.
	Addresses []CommonAddress `json:"addresses"`
}

// PutServiceAgentsMePasswordJSONBody defines parameters for PutServiceAgentsMePassword.
type PutServiceAgentsMePasswordJSONBody struct {
	// Password The new password for the agent.
	Password string `json:"password"`
}

// PutServiceAgentsMeStatusJSONBody defines parameters for PutServiceAgentsMeStatus.
type PutServiceAgentsMeStatusJSONBody struct {
	// Status Agent's status
	Status AgentManagerAgentStatus `json:"status"`
}

// GetStorageAccountsParams defines parameters for GetStorageAccounts.
type GetStorageAccountsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostStorageAccountsJSONBody defines parameters for PostStorageAccounts.
type PostStorageAccountsJSONBody struct {
	CustomerId string `json:"customer_id"`
}

// GetStorageFilesParams defines parameters for GetStorageFiles.
type GetStorageFilesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostStorageFilesMultipartBody defines parameters for PostStorageFiles.
type PostStorageFilesMultipartBody struct {
	File openapi_types.File `json:"file"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// PutTagsIdJSONBody defines parameters for PutTagsId.
type PutTagsIdJSONBody struct {
	Detail string `json:"detail"`
	Name   string `json:"name"`
}

// GetTranscribesParams defines parameters for GetTranscribes.
type GetTranscribesParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTranscribesJSONBody defines parameters for PostTranscribes.
type PostTranscribesJSONBody struct {
	Direction TranscribeManagerTranscribeDirection `json:"direction"`

	// Language The language of the transcription.
	Language string `json:"language"`

	// ReferenceId The ID of the reference for the transcription.
	ReferenceId   string                                   `json:"reference_id"`
	ReferenceType TranscribeManagerTranscribeReferenceType `json:"reference_type"`
}

// GetTranscriptsParams defines parameters for GetTranscripts.
type GetTranscriptsParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken    *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
	TranscribeId string     `form:"transcribe_id" json:"transcribe_id"`
}

// PostTransfersJSONBody defines parameters for PostTransfers.
type PostTransfersJSONBody struct {
	TransferType TransferManagerTransferType `json:"transfer_type"`

	// TransfereeAddresses Addresses of the transfer recipients.
	TransfereeAddresses []CommonAddress `json:"transferee_addresses"`

	// TransfererCallId Call ID of the transfer initiator.
	TransfererCallId string `json:"transferer_call_id"`
}

// GetTrunksParams defines parameters for GetTrunks.
type GetTrunksParams struct {
	// PageSize The size of results.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The token. tm_create
	PageToken *PageToken `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostTrunksJSONBody defines parameters for PostTrunks.
type PostTrunksJSONBody struct {
	AllowedIps []string                   `json:"allowed_ips"`
	AuthTypes  []RegistrarManagerAuthType `json:"auth_types"`
	Detail     string                     `json:"detail"`
	DomainName string                     `json:"domain_name"`
	Name       string                     `json:"name"`
	Password   string                     `json:"password"`
	Username   string                     `json:"username"`
}

// PutTrunksIdJSONBody defines parameters for PutTrunksId.
type PutTrunksIdJSONBody struct {
	AllowedIps []string                   `json:"allowed_ips"`
	AuthTypes  []RegistrarManagerAuthType `json:"auth_types"`
	Detail     string                     `json:"detail"`
	Name       string                     `json:"name"`
	Password   string                     `json:"password"`
	Username   string                     `json:"username"`
}

// PostAccesskeysJSONRequestBody defines body for PostAccesskeys for application/json ContentType.
type PostAccesskeysJSONRequestBody PostAccesskeysJSONBody

// PutAccesskeysIdJSONRequestBody defines body for PutAccesskeysId for application/json ContentType.
type PutAccesskeysIdJSONRequestBody PutAccesskeysIdJSONBody

// PostActiveflowsJSONRequestBody defines body for PostActiveflows for application/json ContentType.
type PostActiveflowsJSONRequestBody PostActiveflowsJSONBody

// PostAgentsJSONRequestBody defines body for PostAgents for application/json ContentType.
type PostAgentsJSONRequestBody PostAgentsJSONBody

// PutAgentsIdJSONRequestBody defines body for PutAgentsId for application/json ContentType.
type PutAgentsIdJSONRequestBody PutAgentsIdJSONBody

// PutAgentsIdAddressesJSONRequestBody defines body for PutAgentsIdAddresses for application/json ContentType.
type PutAgentsIdAddressesJSONRequestBody PutAgentsIdAddressesJSONBody

// PutAgentsIdPasswordJSONRequestBody defines body for PutAgentsIdPassword for application/json ContentType.
type PutAgentsIdPasswordJSONRequestBody PutAgentsIdPasswordJSONBody

// PutAgentsIdPermissionJSONRequestBody defines body for PutAgentsIdPermission for application/json ContentType.
type PutAgentsIdPermissionJSONRequestBody PutAgentsIdPermissionJSONBody

// PutAgentsIdStatusJSONRequestBody defines body for PutAgentsIdStatus for application/json ContentType.
type PutAgentsIdStatusJSONRequestBody PutAgentsIdStatusJSONBody

// PutAgentsIdTagIdsJSONRequestBody defines body for PutAgentsIdTagIds for application/json ContentType.
type PutAgentsIdTagIdsJSONRequestBody PutAgentsIdTagIdsJSONBody

// PostBillingAccountsJSONRequestBody defines body for PostBillingAccounts for application/json ContentType.
type PostBillingAccountsJSONRequestBody PostBillingAccountsJSONBody

// PutBillingAccountsIdJSONRequestBody defines body for PutBillingAccountsId for application/json ContentType.
type PutBillingAccountsIdJSONRequestBody PutBillingAccountsIdJSONBody

// PostBillingAccountsIdBalanceAddForceJSONRequestBody defines body for PostBillingAccountsIdBalanceAddForce for application/json ContentType.
type PostBillingAccountsIdBalanceAddForceJSONRequestBody PostBillingAccountsIdBalanceAddForceJSONBody

// PostBillingAccountsIdBalanceSubtractForceJSONRequestBody defines body for PostBillingAccountsIdBalanceSubtractForce for application/json ContentType.
type PostBillingAccountsIdBalanceSubtractForceJSONRequestBody PostBillingAccountsIdBalanceSubtractForceJSONBody

// PutBillingAccountsIdPaymentInfoJSONRequestBody defines body for PutBillingAccountsIdPaymentInfo for application/json ContentType.
type PutBillingAccountsIdPaymentInfoJSONRequestBody PutBillingAccountsIdPaymentInfoJSONBody

// PostCallsJSONRequestBody defines body for PostCalls for application/json ContentType.
type PostCallsJSONRequestBody PostCallsJSONBody

// DeleteCallsIdMuteJSONRequestBody defines body for DeleteCallsIdMute for application/json ContentType.
type DeleteCallsIdMuteJSONRequestBody DeleteCallsIdMuteJSONBody

// PostCallsIdMuteJSONRequestBody defines body for PostCallsIdMute for application/json ContentType.
type PostCallsIdMuteJSONRequestBody PostCallsIdMuteJSONBody

// PostCallsIdTalkJSONRequestBody defines body for PostCallsIdTalk for application/json ContentType.
type PostCallsIdTalkJSONRequestBody PostCallsIdTalkJSONBody

// PostCampaignsJSONRequestBody defines body for PostCampaigns for application/json ContentType.
type PostCampaignsJSONRequestBody PostCampaignsJSONBody

// PutCampaignsIdJSONRequestBody defines body for PutCampaignsId for application/json ContentType.
type PutCampaignsIdJSONRequestBody PutCampaignsIdJSONBody

// PutCampaignsIdActionsJSONRequestBody defines body for PutCampaignsIdActions for application/json ContentType.
type PutCampaignsIdActionsJSONRequestBody PutCampaignsIdActionsJSONBody

// PutCampaignsIdNextCampaignIdJSONRequestBody defines body for PutCampaignsIdNextCampaignId for application/json ContentType.
type PutCampaignsIdNextCampaignIdJSONRequestBody PutCampaignsIdNextCampaignIdJSONBody

// PutCampaignsIdResourceInfoJSONRequestBody defines body for PutCampaignsIdResourceInfo for application/json ContentType.
type PutCampaignsIdResourceInfoJSONRequestBody PutCampaignsIdResourceInfoJSONBody

// PutCampaignsIdServiceLevelJSONRequestBody defines body for PutCampaignsIdServiceLevel for application/json ContentType.
type PutCampaignsIdServiceLevelJSONRequestBody PutCampaignsIdServiceLevelJSONBody

// PutCampaignsIdStatusJSONRequestBody defines body for PutCampaignsIdStatus for application/json ContentType.
type PutCampaignsIdStatusJSONRequestBody PutCampaignsIdStatusJSONBody

// PostChatbotsJSONRequestBody defines body for PostChatbots for application/json ContentType.
type PostChatbotsJSONRequestBody PostChatbotsJSONBody

// PutChatbotsIdJSONRequestBody defines body for PutChatbotsId for application/json ContentType.
type PutChatbotsIdJSONRequestBody PutChatbotsIdJSONBody

// PostChatmessagesJSONRequestBody defines body for PostChatmessages for application/json ContentType.
type PostChatmessagesJSONRequestBody PostChatmessagesJSONBody

// PostChatroommessagesJSONRequestBody defines body for PostChatroommessages for application/json ContentType.
type PostChatroommessagesJSONRequestBody PostChatroommessagesJSONBody

// PostChatroomsJSONRequestBody defines body for PostChatrooms for application/json ContentType.
type PostChatroomsJSONRequestBody PostChatroomsJSONBody

// PutChatroomsIdJSONRequestBody defines body for PutChatroomsId for application/json ContentType.
type PutChatroomsIdJSONRequestBody PutChatroomsIdJSONBody

// PostChatsJSONRequestBody defines body for PostChats for application/json ContentType.
type PostChatsJSONRequestBody PostChatsJSONBody

// PutChatsIdJSONRequestBody defines body for PutChatsId for application/json ContentType.
type PutChatsIdJSONRequestBody PutChatsIdJSONBody

// PostChatsIdParticipantIdsJSONRequestBody defines body for PostChatsIdParticipantIds for application/json ContentType.
type PostChatsIdParticipantIdsJSONRequestBody PostChatsIdParticipantIdsJSONBody

// PutChatsIdRoomOwnerIdJSONRequestBody defines body for PutChatsIdRoomOwnerId for application/json ContentType.
type PutChatsIdRoomOwnerIdJSONRequestBody PutChatsIdRoomOwnerIdJSONBody

// PostConferencesJSONRequestBody defines body for PostConferences for application/json ContentType.
type PostConferencesJSONRequestBody PostConferencesJSONBody

// PutConferencesIdJSONRequestBody defines body for PutConferencesId for application/json ContentType.
type PutConferencesIdJSONRequestBody PutConferencesIdJSONBody

// PostConferencesIdTranscribeStartJSONRequestBody defines body for PostConferencesIdTranscribeStart for application/json ContentType.
type PostConferencesIdTranscribeStartJSONRequestBody PostConferencesIdTranscribeStartJSONBody

// PostConversationAccountsJSONRequestBody defines body for PostConversationAccounts for application/json ContentType.
type PostConversationAccountsJSONRequestBody PostConversationAccountsJSONBody

// PutConversationAccountsIdJSONRequestBody defines body for PutConversationAccountsId for application/json ContentType.
type PutConversationAccountsIdJSONRequestBody PutConversationAccountsIdJSONBody

// PutConversationsIdJSONRequestBody defines body for PutConversationsId for application/json ContentType.
type PutConversationsIdJSONRequestBody PutConversationsIdJSONBody

// PostConversationsIdMessagesJSONRequestBody defines body for PostConversationsIdMessages for application/json ContentType.
type PostConversationsIdMessagesJSONRequestBody PostConversationsIdMessagesJSONBody

// PutCustomerJSONRequestBody defines body for PutCustomer for application/json ContentType.
type PutCustomerJSONRequestBody PutCustomerJSONBody

// PutCustomerBillingAccountIdJSONRequestBody defines body for PutCustomerBillingAccountId for application/json ContentType.
type PutCustomerBillingAccountIdJSONRequestBody PutCustomerBillingAccountIdJSONBody

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody PostCustomersJSONBody

// PutCustomersIdJSONRequestBody defines body for PutCustomersId for application/json ContentType.
type PutCustomersIdJSONRequestBody PutCustomersIdJSONBody

// PutCustomersIdBillingAccountIdJSONRequestBody defines body for PutCustomersIdBillingAccountId for application/json ContentType.
type PutCustomersIdBillingAccountIdJSONRequestBody PutCustomersIdBillingAccountIdJSONBody

// PostExtensionsJSONRequestBody defines body for PostExtensions for application/json ContentType.
type PostExtensionsJSONRequestBody PostExtensionsJSONBody

// PutExtensionsIdJSONRequestBody defines body for PutExtensionsId for application/json ContentType.
type PutExtensionsIdJSONRequestBody PutExtensionsIdJSONBody

// PostFilesMultipartRequestBody defines body for PostFiles for multipart/form-data ContentType.
type PostFilesMultipartRequestBody PostFilesMultipartBody

// PostFlowsJSONRequestBody defines body for PostFlows for application/json ContentType.
type PostFlowsJSONRequestBody PostFlowsJSONBody

// PutFlowsIdJSONRequestBody defines body for PutFlowsId for application/json ContentType.
type PutFlowsIdJSONRequestBody PutFlowsIdJSONBody

// PostGroupcallsJSONRequestBody defines body for PostGroupcalls for application/json ContentType.
type PostGroupcallsJSONRequestBody PostGroupcallsJSONBody

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody PostMessagesJSONBody

// PostNumbersJSONRequestBody defines body for PostNumbers for application/json ContentType.
type PostNumbersJSONRequestBody PostNumbersJSONBody

// PostNumbersRenewJSONRequestBody defines body for PostNumbersRenew for application/json ContentType.
type PostNumbersRenewJSONRequestBody PostNumbersRenewJSONBody

// PutNumbersIdJSONRequestBody defines body for PutNumbersId for application/json ContentType.
type PutNumbersIdJSONRequestBody PutNumbersIdJSONBody

// PutNumbersIdFlowIdsJSONRequestBody defines body for PutNumbersIdFlowIds for application/json ContentType.
type PutNumbersIdFlowIdsJSONRequestBody PutNumbersIdFlowIdsJSONBody

// PostOutdialsJSONRequestBody defines body for PostOutdials for application/json ContentType.
type PostOutdialsJSONRequestBody PostOutdialsJSONBody

// PutOutdialsIdJSONRequestBody defines body for PutOutdialsId for application/json ContentType.
type PutOutdialsIdJSONRequestBody PutOutdialsIdJSONBody

// PutOutdialsIdCampaignIdJSONRequestBody defines body for PutOutdialsIdCampaignId for application/json ContentType.
type PutOutdialsIdCampaignIdJSONRequestBody PutOutdialsIdCampaignIdJSONBody

// PutOutdialsIdDataJSONRequestBody defines body for PutOutdialsIdData for application/json ContentType.
type PutOutdialsIdDataJSONRequestBody PutOutdialsIdDataJSONBody

// PostOutdialsIdTargetsJSONRequestBody defines body for PostOutdialsIdTargets for application/json ContentType.
type PostOutdialsIdTargetsJSONRequestBody PostOutdialsIdTargetsJSONBody

// PostOutplansJSONRequestBody defines body for PostOutplans for application/json ContentType.
type PostOutplansJSONRequestBody PostOutplansJSONBody

// PutOutplansIdJSONRequestBody defines body for PutOutplansId for application/json ContentType.
type PutOutplansIdJSONRequestBody PutOutplansIdJSONBody

// PutOutplansIdDialInfoJSONRequestBody defines body for PutOutplansIdDialInfo for application/json ContentType.
type PutOutplansIdDialInfoJSONRequestBody PutOutplansIdDialInfoJSONBody

// PostProvidersJSONRequestBody defines body for PostProviders for application/json ContentType.
type PostProvidersJSONRequestBody PostProvidersJSONBody

// PutProvidersIdJSONRequestBody defines body for PutProvidersId for application/json ContentType.
type PutProvidersIdJSONRequestBody PutProvidersIdJSONBody

// PostQueuesJSONRequestBody defines body for PostQueues for application/json ContentType.
type PostQueuesJSONRequestBody PostQueuesJSONBody

// PutQueuesIdJSONRequestBody defines body for PutQueuesId for application/json ContentType.
type PutQueuesIdJSONRequestBody PutQueuesIdJSONBody

// PutQueuesIdActionsJSONRequestBody defines body for PutQueuesIdActions for application/json ContentType.
type PutQueuesIdActionsJSONRequestBody PutQueuesIdActionsJSONBody

// PutQueuesIdRoutingMethodJSONRequestBody defines body for PutQueuesIdRoutingMethod for application/json ContentType.
type PutQueuesIdRoutingMethodJSONRequestBody PutQueuesIdRoutingMethodJSONBody

// PutQueuesIdTagIdsJSONRequestBody defines body for PutQueuesIdTagIds for application/json ContentType.
type PutQueuesIdTagIdsJSONRequestBody PutQueuesIdTagIdsJSONBody

// PostRoutesJSONRequestBody defines body for PostRoutes for application/json ContentType.
type PostRoutesJSONRequestBody PostRoutesJSONBody

// PutRoutesIdJSONRequestBody defines body for PutRoutesId for application/json ContentType.
type PutRoutesIdJSONRequestBody PutRoutesIdJSONBody

// PostServiceAgentsChatroommessagesJSONRequestBody defines body for PostServiceAgentsChatroommessages for application/json ContentType.
type PostServiceAgentsChatroommessagesJSONRequestBody PostServiceAgentsChatroommessagesJSONBody

// PostServiceAgentsChatroomsJSONRequestBody defines body for PostServiceAgentsChatrooms for application/json ContentType.
type PostServiceAgentsChatroomsJSONRequestBody PostServiceAgentsChatroomsJSONBody

// PutServiceAgentsChatroomsIdJSONRequestBody defines body for PutServiceAgentsChatroomsId for application/json ContentType.
type PutServiceAgentsChatroomsIdJSONRequestBody PutServiceAgentsChatroomsIdJSONBody

// PostServiceAgentsConversationsIdMessagesJSONRequestBody defines body for PostServiceAgentsConversationsIdMessages for application/json ContentType.
type PostServiceAgentsConversationsIdMessagesJSONRequestBody PostServiceAgentsConversationsIdMessagesJSONBody

// PostServiceAgentsFilesMultipartRequestBody defines body for PostServiceAgentsFiles for multipart/form-data ContentType.
type PostServiceAgentsFilesMultipartRequestBody PostServiceAgentsFilesMultipartBody

// PutServiceAgentsMeJSONRequestBody defines body for PutServiceAgentsMe for application/json ContentType.
type PutServiceAgentsMeJSONRequestBody PutServiceAgentsMeJSONBody

// PutServiceAgentsMeAddressesJSONRequestBody defines body for PutServiceAgentsMeAddresses for application/json ContentType.
type PutServiceAgentsMeAddressesJSONRequestBody PutServiceAgentsMeAddressesJSONBody

// PutServiceAgentsMePasswordJSONRequestBody defines body for PutServiceAgentsMePassword for application/json ContentType.
type PutServiceAgentsMePasswordJSONRequestBody PutServiceAgentsMePasswordJSONBody

// PutServiceAgentsMeStatusJSONRequestBody defines body for PutServiceAgentsMeStatus for application/json ContentType.
type PutServiceAgentsMeStatusJSONRequestBody PutServiceAgentsMeStatusJSONBody

// PostStorageAccountsJSONRequestBody defines body for PostStorageAccounts for application/json ContentType.
type PostStorageAccountsJSONRequestBody PostStorageAccountsJSONBody

// PostStorageFilesMultipartRequestBody defines body for PostStorageFiles for multipart/form-data ContentType.
type PostStorageFilesMultipartRequestBody PostStorageFilesMultipartBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PutTagsIdJSONRequestBody defines body for PutTagsId for application/json ContentType.
type PutTagsIdJSONRequestBody PutTagsIdJSONBody

// PostTranscribesJSONRequestBody defines body for PostTranscribes for application/json ContentType.
type PostTranscribesJSONRequestBody PostTranscribesJSONBody

// PostTransfersJSONRequestBody defines body for PostTransfers for application/json ContentType.
type PostTransfersJSONRequestBody PostTransfersJSONBody

// PostTrunksJSONRequestBody defines body for PostTrunks for application/json ContentType.
type PostTrunksJSONRequestBody PostTrunksJSONBody

// PutTrunksIdJSONRequestBody defines body for PutTrunksId for application/json ContentType.
type PutTrunksIdJSONRequestBody PutTrunksIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccesskeys request
	GetAccesskeys(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccesskeysWithBody request with any body
	PostAccesskeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccesskeys(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccesskeysId request
	DeleteAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccesskeysId request
	GetAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccesskeysIdWithBody request with any body
	PutAccesskeysIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccesskeysId(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveflows request
	GetActiveflows(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActiveflowsWithBody request with any body
	PostActiveflowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActiveflows(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActiveflowsId request
	DeleteActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveflowsId request
	GetActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActiveflowsIdStop request
	PostActiveflowsIdStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgents request
	GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAgentsWithBody request with any body
	PostAgentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAgents(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgentsId request
	DeleteAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentsId request
	GetAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdWithBody request with any body
	PutAgentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsId(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdAddressesWithBody request with any body
	PutAgentsIdAddressesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdAddresses(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdPasswordWithBody request with any body
	PutAgentsIdPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdPassword(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdPermissionWithBody request with any body
	PutAgentsIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdPermission(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdStatusWithBody request with any body
	PutAgentsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdStatus(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAgentsIdTagIdsWithBody request with any body
	PutAgentsIdTagIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAgentsIdTagIds(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailableNumbers request
	GetAvailableNumbers(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingAccounts request
	GetBillingAccounts(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingAccountsWithBody request with any body
	PostBillingAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingAccounts(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBillingAccountsId request
	DeleteBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingAccountsId request
	GetBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBillingAccountsIdWithBody request with any body
	PutBillingAccountsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBillingAccountsId(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingAccountsIdBalanceAddForceWithBody request with any body
	PostBillingAccountsIdBalanceAddForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingAccountsIdBalanceAddForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingAccountsIdBalanceSubtractForceWithBody request with any body
	PostBillingAccountsIdBalanceSubtractForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBillingAccountsIdPaymentInfoWithBody request with any body
	PutBillingAccountsIdPaymentInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBillingAccountsIdPaymentInfo(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillings request
	GetBillings(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCalls request
	GetCalls(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsWithBody request with any body
	PostCallsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCalls(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsId request
	DeleteCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallsId request
	GetCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdHangup request
	PostCallsIdHangup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdHold request
	DeleteCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdHold request
	PostCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallsIdMediaStream request
	GetCallsIdMediaStream(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdMoh request
	DeleteCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdMoh request
	PostCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdMuteWithBody request with any body
	DeleteCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCallsIdMute(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdMuteWithBody request with any body
	PostCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallsIdMute(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallsIdSilence request
	DeleteCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdSilence request
	PostCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallsIdTalkWithBody request with any body
	PostCallsIdTalkWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallsIdTalk(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigncalls request
	GetCampaigncalls(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCampaigncallsId request
	DeleteCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigncallsId request
	GetCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaigns request
	GetCampaigns(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCampaignsWithBody request with any body
	PostCampaignsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCampaigns(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCampaignsId request
	DeleteCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsId request
	GetCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdWithBody request with any body
	PutCampaignsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsId(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdActionsWithBody request with any body
	PutCampaignsIdActionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdActions(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCampaignsIdCampaigncalls request
	GetCampaignsIdCampaigncalls(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdNextCampaignIdWithBody request with any body
	PutCampaignsIdNextCampaignIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdNextCampaignId(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdResourceInfoWithBody request with any body
	PutCampaignsIdResourceInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdResourceInfo(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdServiceLevelWithBody request with any body
	PutCampaignsIdServiceLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdServiceLevel(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCampaignsIdStatusWithBody request with any body
	PutCampaignsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCampaignsIdStatus(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbotcalls request
	GetChatbotcalls(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatbotcallsId request
	DeleteChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbotcallsId request
	GetChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbots request
	GetChatbots(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatbotsWithBody request with any body
	PostChatbotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatbots(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatbotsId request
	DeleteChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatbotsId request
	GetChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatbotsIdWithBody request with any body
	PutChatbotsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatbotsId(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatmessages request
	GetChatmessages(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatmessagesWithBody request with any body
	PostChatmessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatmessages(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatmessagesId request
	DeleteChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatmessagesId request
	GetChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatroommessages request
	GetChatroommessages(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatroommessagesWithBody request with any body
	PostChatroommessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatroommessages(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatroommessagesId request
	DeleteChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatroommessagesId request
	GetChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatrooms request
	GetChatrooms(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatroomsWithBody request with any body
	PostChatroomsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatrooms(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatroomsId request
	DeleteChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatroomsId request
	GetChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatroomsIdWithBody request with any body
	PutChatroomsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatroomsId(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChats request
	GetChats(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatsWithBody request with any body
	PostChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChats(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatsId request
	DeleteChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChatsId request
	GetChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatsIdWithBody request with any body
	PutChatsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatsId(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChatsIdParticipantIdsWithBody request with any body
	PostChatsIdParticipantIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChatsIdParticipantIds(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChatsIdParticipantIdsParticipantId request
	DeleteChatsIdParticipantIdsParticipantId(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChatsIdRoomOwnerIdWithBody request with any body
	PutChatsIdRoomOwnerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChatsIdRoomOwnerId(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencecalls request
	GetConferencecalls(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConferencecallsId request
	DeleteConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencecallsId request
	GetConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferences request
	GetConferences(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesWithBody request with any body
	PostConferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConferences(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConferencesId request
	DeleteConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencesId request
	GetConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConferencesIdWithBody request with any body
	PutConferencesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConferencesId(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConferencesIdMediaStream request
	GetConferencesIdMediaStream(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdRecordingStart request
	PostConferencesIdRecordingStart(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdRecordingStop request
	PostConferencesIdRecordingStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdTranscribeStartWithBody request with any body
	PostConferencesIdTranscribeStartWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConferencesIdTranscribeStart(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConferencesIdTranscribeStop request
	PostConferencesIdTranscribeStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationAccounts request
	GetConversationAccounts(ctx context.Context, params *GetConversationAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationAccountsWithBody request with any body
	PostConversationAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationAccounts(ctx context.Context, body PostConversationAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConversationAccountsId request
	DeleteConversationAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationAccountsId request
	GetConversationAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConversationAccountsIdWithBody request with any body
	PutConversationAccountsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConversationAccountsId(ctx context.Context, id string, body PutConversationAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversations request
	GetConversations(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsId request
	GetConversationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConversationsIdWithBody request with any body
	PutConversationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConversationsId(ctx context.Context, id string, body PutConversationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConversationsIdMessages request
	GetConversationsIdMessages(ctx context.Context, id string, params *GetConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConversationsIdMessagesWithBody request with any body
	PostConversationsIdMessagesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConversationsIdMessages(ctx context.Context, id string, body PostConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomer request
	GetCustomer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomerWithBody request with any body
	PutCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomer(ctx context.Context, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomerBillingAccountIdWithBody request with any body
	PutCustomerBillingAccountIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomerBillingAccountId(ctx context.Context, body PutCustomerBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomers request
	GetCustomers(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersWithBody request with any body
	PostCustomersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomers(ctx context.Context, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomersId request
	DeleteCustomersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersId request
	GetCustomersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomersIdWithBody request with any body
	PutCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomersId(ctx context.Context, id string, body PutCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomersIdBillingAccountIdWithBody request with any body
	PutCustomersIdBillingAccountIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomersIdBillingAccountId(ctx context.Context, id string, body PutCustomersIdBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtensions request
	GetExtensions(ctx context.Context, params *GetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExtensionsWithBody request with any body
	PostExtensionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExtensions(ctx context.Context, body PostExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExtensionsId request
	DeleteExtensionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExtensionsId request
	GetExtensionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutExtensionsIdWithBody request with any body
	PutExtensionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutExtensionsId(ctx context.Context, id string, body PutExtensionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFiles request
	GetFiles(ctx context.Context, params *GetFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilesWithBody request with any body
	PostFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFilesId request
	DeleteFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilesId request
	GetFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlows request
	GetFlows(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlowsWithBody request with any body
	PostFlowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlows(ctx context.Context, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFlowsId request
	DeleteFlowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlowsId request
	GetFlowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFlowsIdWithBody request with any body
	PutFlowsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFlowsId(ctx context.Context, id string, body PutFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupcalls request
	GetGroupcalls(ctx context.Context, params *GetGroupcallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupcallsWithBody request with any body
	PostGroupcallsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupcalls(ctx context.Context, body PostGroupcallsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupcallsId request
	DeleteGroupcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupcallsId request
	GetGroupcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupcallsIdHangup request
	PostGroupcallsIdHangup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessages request
	GetMessages(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMessagesWithBody request with any body
	PostMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMessages(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessagesId request
	DeleteMessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessagesId request
	GetMessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNumbers request
	GetNumbers(ctx context.Context, params *GetNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNumbersWithBody request with any body
	PostNumbersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNumbers(ctx context.Context, body PostNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNumbersRenewWithBody request with any body
	PostNumbersRenewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNumbersRenew(ctx context.Context, body PostNumbersRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNumbersId request
	DeleteNumbersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNumbersId request
	GetNumbersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNumbersIdWithBody request with any body
	PutNumbersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNumbersId(ctx context.Context, id string, body PutNumbersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNumbersIdFlowIdsWithBody request with any body
	PutNumbersIdFlowIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNumbersIdFlowIds(ctx context.Context, id string, body PutNumbersIdFlowIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutdials request
	GetOutdials(ctx context.Context, params *GetOutdialsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOutdialsWithBody request with any body
	PostOutdialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOutdials(ctx context.Context, body PostOutdialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOutdialsId request
	DeleteOutdialsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutdialsId request
	GetOutdialsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOutdialsIdWithBody request with any body
	PutOutdialsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOutdialsId(ctx context.Context, id string, body PutOutdialsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOutdialsIdCampaignIdWithBody request with any body
	PutOutdialsIdCampaignIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOutdialsIdCampaignId(ctx context.Context, id string, body PutOutdialsIdCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOutdialsIdDataWithBody request with any body
	PutOutdialsIdDataWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOutdialsIdData(ctx context.Context, id string, body PutOutdialsIdDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutdialsIdTargets request
	GetOutdialsIdTargets(ctx context.Context, id string, params *GetOutdialsIdTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOutdialsIdTargetsWithBody request with any body
	PostOutdialsIdTargetsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOutdialsIdTargets(ctx context.Context, id string, body PostOutdialsIdTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOutdialsIdTargetsTargetId request
	DeleteOutdialsIdTargetsTargetId(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutdialsIdTargetsTargetId request
	GetOutdialsIdTargetsTargetId(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutplans request
	GetOutplans(ctx context.Context, params *GetOutplansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOutplansWithBody request with any body
	PostOutplansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOutplans(ctx context.Context, body PostOutplansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOutplansId request
	DeleteOutplansId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutplansId request
	GetOutplansId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOutplansIdWithBody request with any body
	PutOutplansIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOutplansId(ctx context.Context, id string, body PutOutplansIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOutplansIdDialInfoWithBody request with any body
	PutOutplansIdDialInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOutplansIdDialInfo(ctx context.Context, id string, body PutOutplansIdDialInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviders request
	GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProvidersWithBody request with any body
	PostProvidersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProviders(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProvidersId request
	DeleteProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvidersId request
	GetProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProvidersIdWithBody request with any body
	PutProvidersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProvidersId(ctx context.Context, id string, body PutProvidersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueuecalls request
	GetQueuecalls(ctx context.Context, params *GetQueuecallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueuecallsReferenceIdIdKick request
	PostQueuecallsReferenceIdIdKick(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteQueuecallsId request
	DeleteQueuecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueuecallsId request
	GetQueuecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueuecallsIdKick request
	PostQueuecallsIdKick(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueues request
	GetQueues(ctx context.Context, params *GetQueuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostQueuesWithBody request with any body
	PostQueuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostQueues(ctx context.Context, body PostQueuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteQueuesId request
	DeleteQueuesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueuesId request
	GetQueuesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutQueuesIdWithBody request with any body
	PutQueuesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutQueuesId(ctx context.Context, id string, body PutQueuesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutQueuesIdActionsWithBody request with any body
	PutQueuesIdActionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutQueuesIdActions(ctx context.Context, id string, body PutQueuesIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutQueuesIdRoutingMethodWithBody request with any body
	PutQueuesIdRoutingMethodWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutQueuesIdRoutingMethod(ctx context.Context, id string, body PutQueuesIdRoutingMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutQueuesIdTagIdsWithBody request with any body
	PutQueuesIdTagIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutQueuesIdTagIds(ctx context.Context, id string, body PutQueuesIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecordingfilesId request
	GetRecordingfilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecordings request
	GetRecordings(ctx context.Context, params *GetRecordingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordingsId request
	DeleteRecordingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecordingsId request
	GetRecordingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoutes request
	GetRoutes(ctx context.Context, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRoutesWithBody request with any body
	PostRoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRoutes(ctx context.Context, body PostRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoutesId request
	DeleteRoutesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoutesId request
	GetRoutesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRoutesIdWithBody request with any body
	PutRoutesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRoutesId(ctx context.Context, id string, body PutRoutesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsAgents request
	GetServiceAgentsAgents(ctx context.Context, params *GetServiceAgentsAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsAgentsId request
	GetServiceAgentsAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsCalls request
	GetServiceAgentsCalls(ctx context.Context, params *GetServiceAgentsCallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsCallsId request
	GetServiceAgentsCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsChatroommessages request
	GetServiceAgentsChatroommessages(ctx context.Context, params *GetServiceAgentsChatroommessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceAgentsChatroommessagesWithBody request with any body
	PostServiceAgentsChatroommessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceAgentsChatroommessages(ctx context.Context, body PostServiceAgentsChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceAgentsChatroommessagesId request
	DeleteServiceAgentsChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsChatroommessagesId request
	GetServiceAgentsChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsChatrooms request
	GetServiceAgentsChatrooms(ctx context.Context, params *GetServiceAgentsChatroomsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceAgentsChatroomsWithBody request with any body
	PostServiceAgentsChatroomsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceAgentsChatrooms(ctx context.Context, body PostServiceAgentsChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceAgentsChatroomsId request
	DeleteServiceAgentsChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsChatroomsId request
	GetServiceAgentsChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceAgentsChatroomsIdWithBody request with any body
	PutServiceAgentsChatroomsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceAgentsChatroomsId(ctx context.Context, id string, body PutServiceAgentsChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsConversations request
	GetServiceAgentsConversations(ctx context.Context, params *GetServiceAgentsConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsConversationsId request
	GetServiceAgentsConversationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsConversationsIdMessages request
	GetServiceAgentsConversationsIdMessages(ctx context.Context, id string, params *GetServiceAgentsConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceAgentsConversationsIdMessagesWithBody request with any body
	PostServiceAgentsConversationsIdMessagesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceAgentsConversationsIdMessages(ctx context.Context, id string, body PostServiceAgentsConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsCustomer request
	GetServiceAgentsCustomer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsExtensions request
	GetServiceAgentsExtensions(ctx context.Context, params *GetServiceAgentsExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsExtensionsId request
	GetServiceAgentsExtensionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsFiles request
	GetServiceAgentsFiles(ctx context.Context, params *GetServiceAgentsFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceAgentsFilesWithBody request with any body
	PostServiceAgentsFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceAgentsFilesId request
	DeleteServiceAgentsFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsFilesId request
	GetServiceAgentsFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsMe request
	GetServiceAgentsMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceAgentsMeWithBody request with any body
	PutServiceAgentsMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceAgentsMe(ctx context.Context, body PutServiceAgentsMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceAgentsMeAddressesWithBody request with any body
	PutServiceAgentsMeAddressesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceAgentsMeAddresses(ctx context.Context, body PutServiceAgentsMeAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceAgentsMePasswordWithBody request with any body
	PutServiceAgentsMePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceAgentsMePassword(ctx context.Context, body PutServiceAgentsMePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceAgentsMeStatusWithBody request with any body
	PutServiceAgentsMeStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceAgentsMeStatus(ctx context.Context, body PutServiceAgentsMeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAgentsWs request
	GetServiceAgentsWs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageAccount request
	GetStorageAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageAccounts request
	GetStorageAccounts(ctx context.Context, params *GetStorageAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStorageAccountsWithBody request with any body
	PostStorageAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStorageAccounts(ctx context.Context, body PostStorageAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageAccountsId request
	DeleteStorageAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageAccountsId request
	GetStorageAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageFiles request
	GetStorageFiles(ctx context.Context, params *GetStorageFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStorageFilesWithBody request with any body
	PostStorageFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStorageFilesId request
	DeleteStorageFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageFilesId request
	GetStorageFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTagsWithBody request with any body
	PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagsId request
	DeleteTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsId request
	GetTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTagsIdWithBody request with any body
	PutTagsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTagsId(ctx context.Context, id string, body PutTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTranscribes request
	GetTranscribes(ctx context.Context, params *GetTranscribesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTranscribesWithBody request with any body
	PostTranscribesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTranscribes(ctx context.Context, body PostTranscribesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTranscribesId request
	DeleteTranscribesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTranscribesId request
	GetTranscribesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTranscribesIdStop request
	PostTranscribesIdStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTranscripts request
	GetTranscripts(ctx context.Context, params *GetTranscriptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransfersWithBody request with any body
	PostTransfersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransfers(ctx context.Context, body PostTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrunks request
	GetTrunks(ctx context.Context, params *GetTrunksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTrunksWithBody request with any body
	PostTrunksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTrunks(ctx context.Context, body PostTrunksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTrunksId request
	DeleteTrunksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrunksId request
	GetTrunksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTrunksIdWithBody request with any body
	PutTrunksIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrunksId(ctx context.Context, id string, body PutTrunksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWs request
	GetWs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccesskeys(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccesskeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccesskeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccesskeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccesskeys(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccesskeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccesskeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccesskeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccesskeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccesskeysIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccesskeysIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccesskeysId(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccesskeysIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveflows(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveflowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveflowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveflowsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveflows(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveflowsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActiveflowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveflowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveflowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveflowsIdStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveflowsIdStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgents(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAgentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAgentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAgents(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAgentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsId(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdAddressesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdAddressesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdAddresses(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdAddressesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPassword(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPermissionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPermissionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdPermission(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdPermissionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdStatus(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdTagIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdTagIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAgentsIdTagIds(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAgentsIdTagIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailableNumbers(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailableNumbersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingAccounts(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccounts(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBillingAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsId(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceAddForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceAddForceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceAddForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceAddForceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceSubtractForceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingAccountsIdBalanceSubtractForce(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingAccountsIdBalanceSubtractForceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsIdPaymentInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdPaymentInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingAccountsIdPaymentInfo(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingAccountsIdPaymentInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillings(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCalls(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCalls(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdHangup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdHangupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdHoldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdHold(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdHoldRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallsIdMediaStream(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallsIdMediaStreamRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdMohRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdMoh(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdMohRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdMuteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdMute(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdMuteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdMuteWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdMuteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdMute(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdMuteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallsIdSilenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdSilence(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdSilenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdTalkWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdTalkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallsIdTalk(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallsIdTalkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigncalls(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaigncallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaigncallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigncallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaigncallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaigns(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaignsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCampaigns(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCampaignsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCampaignsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsId(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdActionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdActionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdActions(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdActionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCampaignsIdCampaigncalls(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignsIdCampaigncallsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdNextCampaignIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdNextCampaignIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdNextCampaignId(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdNextCampaignIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdResourceInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdResourceInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdResourceInfo(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdResourceInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdServiceLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdServiceLevelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdServiceLevel(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdServiceLevelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdStatusWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCampaignsIdStatus(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCampaignsIdStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbotcalls(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotcallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatbotcallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbotcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotcallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbots(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatbotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatbotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatbots(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatbotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatbotsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatbotsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatbotsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatbotsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatbotsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatbotsId(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatbotsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatmessages(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatmessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatmessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatmessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatmessages(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatmessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatmessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatmessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatmessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatroommessages(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroommessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatroommessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroommessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatroommessages(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroommessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatroommessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroommessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatrooms(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroomsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatroomsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroomsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatrooms(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatroomsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatroomsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatroomsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatroomsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatroomsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatroomsId(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatroomsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChats(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChats(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChatsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChatsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsId(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatsIdParticipantIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsIdParticipantIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChatsIdParticipantIds(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChatsIdParticipantIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChatsIdParticipantIdsParticipantId(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChatsIdParticipantIdsParticipantIdRequest(c.Server, id, participantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsIdRoomOwnerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRoomOwnerIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChatsIdRoomOwnerId(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChatsIdRoomOwnerIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencecalls(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencecallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConferencecallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencecallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferences(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferences(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConferencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConferencesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConferencesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConferencesId(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConferencesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConferencesIdMediaStream(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConferencesIdMediaStreamRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdRecordingStart(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdRecordingStartRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdRecordingStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdRecordingStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdTranscribeStartWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdTranscribeStartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdTranscribeStart(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdTranscribeStartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConferencesIdTranscribeStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConferencesIdTranscribeStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationAccounts(ctx context.Context, params *GetConversationAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationAccounts(ctx context.Context, body PostConversationAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConversationAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConversationAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConversationAccountsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConversationAccountsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConversationAccountsId(ctx context.Context, id string, body PutConversationAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConversationAccountsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversations(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConversationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConversationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConversationsId(ctx context.Context, id string, body PutConversationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConversationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationsIdMessages(ctx context.Context, id string, params *GetConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConversationsIdMessagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsIdMessagesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsIdMessagesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConversationsIdMessages(ctx context.Context, id string, body PostConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConversationsIdMessagesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomer(ctx context.Context, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerBillingAccountIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerBillingAccountIdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerBillingAccountId(ctx context.Context, body PutCustomerBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerBillingAccountIdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomers(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomers(ctx context.Context, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersId(ctx context.Context, id string, body PutCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersIdBillingAccountIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersIdBillingAccountIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersIdBillingAccountId(ctx context.Context, id string, body PutCustomersIdBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersIdBillingAccountIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtensions(ctx context.Context, params *GetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExtensionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExtensionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExtensions(ctx context.Context, body PostExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExtensionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExtensionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExtensionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExtensionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExtensionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExtensionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExtensionsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutExtensionsId(ctx context.Context, id string, body PutExtensionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutExtensionsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFiles(ctx context.Context, params *GetFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlows(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlowsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlowsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlows(ctx context.Context, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlowsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFlowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFlowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlowsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlowsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlowsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlowsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlowsId(ctx context.Context, id string, body PutFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlowsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupcalls(ctx context.Context, params *GetGroupcallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupcallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupcallsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupcallsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupcalls(ctx context.Context, body PostGroupcallsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupcallsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupcallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupcallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupcallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupcallsIdHangup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupcallsIdHangupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessages(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessages(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNumbers(ctx context.Context, params *GetNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNumbersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNumbersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNumbersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNumbers(ctx context.Context, body PostNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNumbersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNumbersRenewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNumbersRenewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNumbersRenew(ctx context.Context, body PostNumbersRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNumbersRenewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNumbersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNumbersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNumbersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNumbersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNumbersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNumbersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNumbersId(ctx context.Context, id string, body PutNumbersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNumbersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNumbersIdFlowIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNumbersIdFlowIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNumbersIdFlowIds(ctx context.Context, id string, body PutNumbersIdFlowIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNumbersIdFlowIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutdials(ctx context.Context, params *GetOutdialsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutdialsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutdialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutdialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutdials(ctx context.Context, body PostOutdialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutdialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOutdialsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOutdialsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutdialsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutdialsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutdialsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutdialsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutdialsId(ctx context.Context, id string, body PutOutdialsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutdialsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutdialsIdCampaignIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutdialsIdCampaignIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutdialsIdCampaignId(ctx context.Context, id string, body PutOutdialsIdCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutdialsIdCampaignIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutdialsIdDataWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutdialsIdDataRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutdialsIdData(ctx context.Context, id string, body PutOutdialsIdDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutdialsIdDataRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutdialsIdTargets(ctx context.Context, id string, params *GetOutdialsIdTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutdialsIdTargetsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutdialsIdTargetsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutdialsIdTargetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutdialsIdTargets(ctx context.Context, id string, body PostOutdialsIdTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutdialsIdTargetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOutdialsIdTargetsTargetId(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOutdialsIdTargetsTargetIdRequest(c.Server, id, targetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutdialsIdTargetsTargetId(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutdialsIdTargetsTargetIdRequest(c.Server, id, targetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutplans(ctx context.Context, params *GetOutplansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutplansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutplansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutplansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOutplans(ctx context.Context, body PostOutplansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOutplansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOutplansId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOutplansIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutplansId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutplansIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutplansIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutplansIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutplansId(ctx context.Context, id string, body PutOutplansIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutplansIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutplansIdDialInfoWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutplansIdDialInfoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOutplansIdDialInfo(ctx context.Context, id string, body PutOutplansIdDialInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOutplansIdDialInfoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProvidersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProvidersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProviders(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProvidersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProvidersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvidersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProvidersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProvidersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProvidersId(ctx context.Context, id string, body PutProvidersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProvidersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueuecalls(ctx context.Context, params *GetQueuecallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueuecallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueuecallsReferenceIdIdKick(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueuecallsReferenceIdIdKickRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteQueuecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteQueuecallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueuecallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueuecallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueuecallsIdKick(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueuecallsIdKickRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueues(ctx context.Context, params *GetQueuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostQueues(ctx context.Context, body PostQueuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostQueuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteQueuesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteQueuesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueuesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueuesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesId(ctx context.Context, id string, body PutQueuesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdActionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdActionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdActions(ctx context.Context, id string, body PutQueuesIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdActionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdRoutingMethodWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdRoutingMethodRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdRoutingMethod(ctx context.Context, id string, body PutQueuesIdRoutingMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdRoutingMethodRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdTagIdsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdTagIdsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutQueuesIdTagIds(ctx context.Context, id string, body PutQueuesIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutQueuesIdTagIdsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecordingfilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordingfilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecordings(ctx context.Context, params *GetRecordingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecordingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordingsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoutes(ctx context.Context, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRoutesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRoutes(ctx context.Context, body PostRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRoutesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoutesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoutesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoutesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoutesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRoutesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRoutesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRoutesId(ctx context.Context, id string, body PutRoutesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRoutesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsAgents(ctx context.Context, params *GetServiceAgentsAgentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsAgentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsAgentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsAgentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsCalls(ctx context.Context, params *GetServiceAgentsCallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsCallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsCallsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsCallsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsChatroommessages(ctx context.Context, params *GetServiceAgentsChatroommessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsChatroommessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsChatroommessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsChatroommessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsChatroommessages(ctx context.Context, body PostServiceAgentsChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsChatroommessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceAgentsChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceAgentsChatroommessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsChatroommessagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsChatroommessagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsChatrooms(ctx context.Context, params *GetServiceAgentsChatroomsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsChatroomsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsChatroomsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsChatroomsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsChatrooms(ctx context.Context, body PostServiceAgentsChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsChatroomsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceAgentsChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceAgentsChatroomsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsChatroomsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsChatroomsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsChatroomsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsChatroomsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsChatroomsId(ctx context.Context, id string, body PutServiceAgentsChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsChatroomsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsConversations(ctx context.Context, params *GetServiceAgentsConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsConversationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsConversationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsConversationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsConversationsIdMessages(ctx context.Context, id string, params *GetServiceAgentsConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsConversationsIdMessagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsConversationsIdMessagesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsConversationsIdMessagesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsConversationsIdMessages(ctx context.Context, id string, body PostServiceAgentsConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsConversationsIdMessagesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsCustomer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsCustomerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsExtensions(ctx context.Context, params *GetServiceAgentsExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsExtensionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsExtensionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsExtensionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsFiles(ctx context.Context, params *GetServiceAgentsFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceAgentsFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceAgentsFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceAgentsFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceAgentsFilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsFilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMe(ctx context.Context, body PutServiceAgentsMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMeAddressesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMeAddressesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMeAddresses(ctx context.Context, body PutServiceAgentsMeAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMeAddressesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMePassword(ctx context.Context, body PutServiceAgentsMePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMeStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMeStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceAgentsMeStatus(ctx context.Context, body PutServiceAgentsMeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceAgentsMeStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAgentsWs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAgentsWsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageAccounts(ctx context.Context, params *GetStorageAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStorageAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStorageAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStorageAccounts(ctx context.Context, body PostStorageAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStorageAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageAccountsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageFiles(ctx context.Context, params *GetStorageFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStorageFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStorageFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStorageFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStorageFilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageFilesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageFilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTagsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTagsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTagsId(ctx context.Context, id string, body PutTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTagsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTranscribes(ctx context.Context, params *GetTranscribesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTranscribesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTranscribesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTranscribesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTranscribes(ctx context.Context, body PostTranscribesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTranscribesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTranscribesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTranscribesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTranscribesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTranscribesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTranscribesIdStop(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTranscribesIdStopRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTranscripts(ctx context.Context, params *GetTranscriptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTranscriptsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransfersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransfersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransfers(ctx context.Context, body PostTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransfersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrunks(ctx context.Context, params *GetTrunksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrunksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrunksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrunksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrunks(ctx context.Context, body PostTrunksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrunksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTrunksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTrunksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrunksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrunksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrunksIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrunksIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrunksId(ctx context.Context, id string, body PutTrunksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTrunksIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccesskeysRequest generates requests for GetAccesskeys
func NewGetAccesskeysRequest(server string, params *GetAccesskeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccesskeysRequest calls the generic PostAccesskeys builder with application/json body
func NewPostAccesskeysRequest(server string, body PostAccesskeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccesskeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccesskeysRequestWithBody generates requests for PostAccesskeys with any type of body
func NewPostAccesskeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccesskeysIdRequest generates requests for DeleteAccesskeysId
func NewDeleteAccesskeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccesskeysIdRequest generates requests for GetAccesskeysId
func NewGetAccesskeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAccesskeysIdRequest calls the generic PutAccesskeysId builder with application/json body
func NewPutAccesskeysIdRequest(server string, id string, body PutAccesskeysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccesskeysIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAccesskeysIdRequestWithBody generates requests for PutAccesskeysId with any type of body
func NewPutAccesskeysIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accesskeys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveflowsRequest generates requests for GetActiveflows
func NewGetActiveflowsRequest(server string, params *GetActiveflowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActiveflowsRequest calls the generic PostActiveflows builder with application/json body
func NewPostActiveflowsRequest(server string, body PostActiveflowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActiveflowsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostActiveflowsRequestWithBody generates requests for PostActiveflows with any type of body
func NewPostActiveflowsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteActiveflowsIdRequest generates requests for DeleteActiveflowsId
func NewDeleteActiveflowsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActiveflowsIdRequest generates requests for GetActiveflowsId
func NewGetActiveflowsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActiveflowsIdStopRequest generates requests for PostActiveflowsIdStop
func NewPostActiveflowsIdStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/activeflows/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsRequest generates requests for GetAgents
func NewGetAgentsRequest(server string, params *GetAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_ids", runtime.ParamLocationQuery, *params.TagIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAgentsRequest calls the generic PostAgents builder with application/json body
func NewPostAgentsRequest(server string, body PostAgentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAgentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAgentsRequestWithBody generates requests for PostAgents with any type of body
func NewPostAgentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAgentsIdRequest generates requests for DeleteAgentsId
func NewDeleteAgentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsIdRequest generates requests for GetAgentsId
func NewGetAgentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAgentsIdRequest calls the generic PutAgentsId builder with application/json body
func NewPutAgentsIdRequest(server string, id string, body PutAgentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdRequestWithBody generates requests for PutAgentsId with any type of body
func NewPutAgentsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdAddressesRequest calls the generic PutAgentsIdAddresses builder with application/json body
func NewPutAgentsIdAddressesRequest(server string, id string, body PutAgentsIdAddressesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdAddressesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdAddressesRequestWithBody generates requests for PutAgentsIdAddresses with any type of body
func NewPutAgentsIdAddressesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdPasswordRequest calls the generic PutAgentsIdPassword builder with application/json body
func NewPutAgentsIdPasswordRequest(server string, id string, body PutAgentsIdPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdPasswordRequestWithBody generates requests for PutAgentsIdPassword with any type of body
func NewPutAgentsIdPasswordRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdPermissionRequest calls the generic PutAgentsIdPermission builder with application/json body
func NewPutAgentsIdPermissionRequest(server string, id string, body PutAgentsIdPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdPermissionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdPermissionRequestWithBody generates requests for PutAgentsIdPermission with any type of body
func NewPutAgentsIdPermissionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/permission", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdStatusRequest calls the generic PutAgentsIdStatus builder with application/json body
func NewPutAgentsIdStatusRequest(server string, id string, body PutAgentsIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdStatusRequestWithBody generates requests for PutAgentsIdStatus with any type of body
func NewPutAgentsIdStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAgentsIdTagIdsRequest calls the generic PutAgentsIdTagIds builder with application/json body
func NewPutAgentsIdTagIdsRequest(server string, id string, body PutAgentsIdTagIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAgentsIdTagIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAgentsIdTagIdsRequestWithBody generates requests for PutAgentsIdTagIds with any type of body
func NewPutAgentsIdTagIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s/tag_ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailableNumbersRequest generates requests for GetAvailableNumbers
func NewGetAvailableNumbersRequest(server string, params *GetAvailableNumbersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available_numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingAccountsRequest generates requests for GetBillingAccounts
func NewGetBillingAccountsRequest(server string, params *GetBillingAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBillingAccountsRequest calls the generic PostBillingAccounts builder with application/json body
func NewPostBillingAccountsRequest(server string, body PostBillingAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBillingAccountsRequestWithBody generates requests for PostBillingAccounts with any type of body
func NewPostBillingAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBillingAccountsIdRequest generates requests for DeleteBillingAccountsId
func NewDeleteBillingAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingAccountsIdRequest generates requests for GetBillingAccountsId
func NewGetBillingAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBillingAccountsIdRequest calls the generic PutBillingAccountsId builder with application/json body
func NewPutBillingAccountsIdRequest(server string, id string, body PutBillingAccountsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBillingAccountsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBillingAccountsIdRequestWithBody generates requests for PutBillingAccountsId with any type of body
func NewPutBillingAccountsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBillingAccountsIdBalanceAddForceRequest calls the generic PostBillingAccountsIdBalanceAddForce builder with application/json body
func NewPostBillingAccountsIdBalanceAddForceRequest(server string, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingAccountsIdBalanceAddForceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBillingAccountsIdBalanceAddForceRequestWithBody generates requests for PostBillingAccountsIdBalanceAddForce with any type of body
func NewPostBillingAccountsIdBalanceAddForceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s/balance_add_force", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBillingAccountsIdBalanceSubtractForceRequest calls the generic PostBillingAccountsIdBalanceSubtractForce builder with application/json body
func NewPostBillingAccountsIdBalanceSubtractForceRequest(server string, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody generates requests for PostBillingAccountsIdBalanceSubtractForce with any type of body
func NewPostBillingAccountsIdBalanceSubtractForceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s/balance_subtract_force", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBillingAccountsIdPaymentInfoRequest calls the generic PutBillingAccountsIdPaymentInfo builder with application/json body
func NewPutBillingAccountsIdPaymentInfoRequest(server string, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBillingAccountsIdPaymentInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutBillingAccountsIdPaymentInfoRequestWithBody generates requests for PutBillingAccountsIdPaymentInfo with any type of body
func NewPutBillingAccountsIdPaymentInfoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing_accounts/%s/payment_info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBillingsRequest generates requests for GetBillings
func NewGetBillingsRequest(server string, params *GetBillingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallsRequest generates requests for GetCalls
func NewGetCallsRequest(server string, params *GetCallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsRequest calls the generic PostCalls builder with application/json body
func NewPostCallsRequest(server string, body PostCallsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCallsRequestWithBody generates requests for PostCalls with any type of body
func NewPostCallsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallsIdRequest generates requests for DeleteCallsId
func NewDeleteCallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallsIdRequest generates requests for GetCallsId
func NewGetCallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdHangupRequest generates requests for PostCallsIdHangup
func NewPostCallsIdHangupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/hangup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCallsIdHoldRequest generates requests for DeleteCallsIdHold
func NewDeleteCallsIdHoldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/hold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdHoldRequest generates requests for PostCallsIdHold
func NewPostCallsIdHoldRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/hold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallsIdMediaStreamRequest generates requests for GetCallsIdMediaStream
func NewGetCallsIdMediaStreamRequest(server string, id string, params *GetCallsIdMediaStreamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/media_stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Encapsulation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "encapsulation", runtime.ParamLocationQuery, *params.Encapsulation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCallsIdMohRequest generates requests for DeleteCallsIdMoh
func NewDeleteCallsIdMohRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/moh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdMohRequest generates requests for PostCallsIdMoh
func NewPostCallsIdMohRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/moh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCallsIdMuteRequest calls the generic DeleteCallsIdMute builder with application/json body
func NewDeleteCallsIdMuteRequest(server string, id string, body DeleteCallsIdMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCallsIdMuteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteCallsIdMuteRequestWithBody generates requests for DeleteCallsIdMute with any type of body
func NewDeleteCallsIdMuteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCallsIdMuteRequest calls the generic PostCallsIdMute builder with application/json body
func NewPostCallsIdMuteRequest(server string, id string, body PostCallsIdMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallsIdMuteRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCallsIdMuteRequestWithBody generates requests for PostCallsIdMute with any type of body
func NewPostCallsIdMuteRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/mute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallsIdSilenceRequest generates requests for DeleteCallsIdSilence
func NewDeleteCallsIdSilenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/silence", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdSilenceRequest generates requests for PostCallsIdSilence
func NewPostCallsIdSilenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/silence", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallsIdTalkRequest calls the generic PostCallsIdTalk builder with application/json body
func NewPostCallsIdTalkRequest(server string, id string, body PostCallsIdTalkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallsIdTalkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostCallsIdTalkRequestWithBody generates requests for PostCallsIdTalk with any type of body
func NewPostCallsIdTalkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls/%s/talk", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCampaigncallsRequest generates requests for GetCampaigncalls
func NewGetCampaigncallsRequest(server string, params *GetCampaigncallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigncalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCampaigncallsIdRequest generates requests for DeleteCampaigncallsId
func NewDeleteCampaigncallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigncalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCampaigncallsIdRequest generates requests for GetCampaigncallsId
func NewGetCampaigncallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigncalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCampaignsRequest generates requests for GetCampaigns
func NewGetCampaignsRequest(server string, params *GetCampaignsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCampaignsRequest calls the generic PostCampaigns builder with application/json body
func NewPostCampaignsRequest(server string, body PostCampaignsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCampaignsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCampaignsRequestWithBody generates requests for PostCampaigns with any type of body
func NewPostCampaignsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCampaignsIdRequest generates requests for DeleteCampaignsId
func NewDeleteCampaignsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCampaignsIdRequest generates requests for GetCampaignsId
func NewGetCampaignsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCampaignsIdRequest calls the generic PutCampaignsId builder with application/json body
func NewPutCampaignsIdRequest(server string, id string, body PutCampaignsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdRequestWithBody generates requests for PutCampaignsId with any type of body
func NewPutCampaignsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdActionsRequest calls the generic PutCampaignsIdActions builder with application/json body
func NewPutCampaignsIdActionsRequest(server string, id string, body PutCampaignsIdActionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdActionsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdActionsRequestWithBody generates requests for PutCampaignsIdActions with any type of body
func NewPutCampaignsIdActionsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCampaignsIdCampaigncallsRequest generates requests for GetCampaignsIdCampaigncalls
func NewGetCampaignsIdCampaigncallsRequest(server string, id string, params *GetCampaignsIdCampaigncallsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/campaigncalls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCampaignsIdNextCampaignIdRequest calls the generic PutCampaignsIdNextCampaignId builder with application/json body
func NewPutCampaignsIdNextCampaignIdRequest(server string, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdNextCampaignIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdNextCampaignIdRequestWithBody generates requests for PutCampaignsIdNextCampaignId with any type of body
func NewPutCampaignsIdNextCampaignIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/next_campaign_id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdResourceInfoRequest calls the generic PutCampaignsIdResourceInfo builder with application/json body
func NewPutCampaignsIdResourceInfoRequest(server string, id string, body PutCampaignsIdResourceInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdResourceInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdResourceInfoRequestWithBody generates requests for PutCampaignsIdResourceInfo with any type of body
func NewPutCampaignsIdResourceInfoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/resource_info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdServiceLevelRequest calls the generic PutCampaignsIdServiceLevel builder with application/json body
func NewPutCampaignsIdServiceLevelRequest(server string, id string, body PutCampaignsIdServiceLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdServiceLevelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdServiceLevelRequestWithBody generates requests for PutCampaignsIdServiceLevel with any type of body
func NewPutCampaignsIdServiceLevelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/service_level", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCampaignsIdStatusRequest calls the generic PutCampaignsIdStatus builder with application/json body
func NewPutCampaignsIdStatusRequest(server string, id string, body PutCampaignsIdStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCampaignsIdStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCampaignsIdStatusRequestWithBody generates requests for PutCampaignsIdStatus with any type of body
func NewPutCampaignsIdStatusRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/campaigns/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChatbotcallsRequest generates requests for GetChatbotcalls
func NewGetChatbotcallsRequest(server string, params *GetChatbotcallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbotcalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteChatbotcallsIdRequest generates requests for DeleteChatbotcallsId
func NewDeleteChatbotcallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbotcalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatbotcallsIdRequest generates requests for GetChatbotcallsId
func NewGetChatbotcallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbotcalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatbotsRequest generates requests for GetChatbots
func NewGetChatbotsRequest(server string, params *GetChatbotsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatbotsRequest calls the generic PostChatbots builder with application/json body
func NewPostChatbotsRequest(server string, body PostChatbotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatbotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatbotsRequestWithBody generates requests for PostChatbots with any type of body
func NewPostChatbotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatbotsIdRequest generates requests for DeleteChatbotsId
func NewDeleteChatbotsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatbotsIdRequest generates requests for GetChatbotsId
func NewGetChatbotsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatbotsIdRequest calls the generic PutChatbotsId builder with application/json body
func NewPutChatbotsIdRequest(server string, id string, body PutChatbotsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatbotsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatbotsIdRequestWithBody generates requests for PutChatbotsId with any type of body
func NewPutChatbotsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatbots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChatmessagesRequest generates requests for GetChatmessages
func NewGetChatmessagesRequest(server string, params *GetChatmessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chat_id", runtime.ParamLocationQuery, params.ChatId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatmessagesRequest calls the generic PostChatmessages builder with application/json body
func NewPostChatmessagesRequest(server string, body PostChatmessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatmessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatmessagesRequestWithBody generates requests for PostChatmessages with any type of body
func NewPostChatmessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatmessagesIdRequest generates requests for DeleteChatmessagesId
func NewDeleteChatmessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatmessagesIdRequest generates requests for GetChatmessagesId
func NewGetChatmessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatmessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroommessagesRequest generates requests for GetChatroommessages
func NewGetChatroommessagesRequest(server string, params *GetChatroommessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chatroom_id", runtime.ParamLocationQuery, params.ChatroomId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatroommessagesRequest calls the generic PostChatroommessages builder with application/json body
func NewPostChatroommessagesRequest(server string, body PostChatroommessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatroommessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatroommessagesRequestWithBody generates requests for PostChatroommessages with any type of body
func NewPostChatroommessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatroommessagesIdRequest generates requests for DeleteChatroommessagesId
func NewDeleteChatroommessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroommessagesIdRequest generates requests for GetChatroommessagesId
func NewGetChatroommessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatroommessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroomsRequest generates requests for GetChatrooms
func NewGetChatroomsRequest(server string, params *GetChatroomsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OwnerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner_id", runtime.ParamLocationQuery, *params.OwnerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatroomsRequest calls the generic PostChatrooms builder with application/json body
func NewPostChatroomsRequest(server string, body PostChatroomsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatroomsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatroomsRequestWithBody generates requests for PostChatrooms with any type of body
func NewPostChatroomsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatroomsIdRequest generates requests for DeleteChatroomsId
func NewDeleteChatroomsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatroomsIdRequest generates requests for GetChatroomsId
func NewGetChatroomsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatroomsIdRequest calls the generic PutChatroomsId builder with application/json body
func NewPutChatroomsIdRequest(server string, id string, body PutChatroomsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatroomsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatroomsIdRequestWithBody generates requests for PutChatroomsId with any type of body
func NewPutChatroomsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChatsRequest generates requests for GetChats
func NewGetChatsRequest(server string, params *GetChatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChatsRequest calls the generic PostChats builder with application/json body
func NewPostChatsRequest(server string, body PostChatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChatsRequestWithBody generates requests for PostChats with any type of body
func NewPostChatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatsIdRequest generates requests for DeleteChatsId
func NewDeleteChatsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChatsIdRequest generates requests for GetChatsId
func NewGetChatsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatsIdRequest calls the generic PutChatsId builder with application/json body
func NewPutChatsIdRequest(server string, id string, body PutChatsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatsIdRequestWithBody generates requests for PutChatsId with any type of body
func NewPutChatsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChatsIdParticipantIdsRequest calls the generic PostChatsIdParticipantIds builder with application/json body
func NewPostChatsIdParticipantIdsRequest(server string, id string, body PostChatsIdParticipantIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChatsIdParticipantIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostChatsIdParticipantIdsRequestWithBody generates requests for PostChatsIdParticipantIds with any type of body
func NewPostChatsIdParticipantIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s/participant_ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChatsIdParticipantIdsParticipantIdRequest generates requests for DeleteChatsIdParticipantIdsParticipantId
func NewDeleteChatsIdParticipantIdsParticipantIdRequest(server string, id string, participantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "participant_id", runtime.ParamLocationPath, participantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s/participant_ids/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChatsIdRoomOwnerIdRequest calls the generic PutChatsIdRoomOwnerId builder with application/json body
func NewPutChatsIdRoomOwnerIdRequest(server string, id string, body PutChatsIdRoomOwnerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChatsIdRoomOwnerIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutChatsIdRoomOwnerIdRequestWithBody generates requests for PutChatsIdRoomOwnerId with any type of body
func NewPutChatsIdRoomOwnerIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chats/%s/room_owner_id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConferencecallsRequest generates requests for GetConferencecalls
func NewGetConferencecallsRequest(server string, params *GetConferencecallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferencecalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConferencecallsIdRequest generates requests for DeleteConferencecallsId
func NewDeleteConferencecallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferencecalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConferencecallsIdRequest generates requests for GetConferencecallsId
func NewGetConferencecallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferencecalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConferencesRequest generates requests for GetConferences
func NewGetConferencesRequest(server string, params *GetConferencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesRequest calls the generic PostConferences builder with application/json body
func NewPostConferencesRequest(server string, body PostConferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConferencesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConferencesRequestWithBody generates requests for PostConferences with any type of body
func NewPostConferencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConferencesIdRequest generates requests for DeleteConferencesId
func NewDeleteConferencesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConferencesIdRequest generates requests for GetConferencesId
func NewGetConferencesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutConferencesIdRequest calls the generic PutConferencesId builder with application/json body
func NewPutConferencesIdRequest(server string, id string, body PutConferencesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConferencesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutConferencesIdRequestWithBody generates requests for PutConferencesId with any type of body
func NewPutConferencesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConferencesIdMediaStreamRequest generates requests for GetConferencesIdMediaStream
func NewGetConferencesIdMediaStreamRequest(server string, id string, params *GetConferencesIdMediaStreamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/media_stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "encapsulation", runtime.ParamLocationQuery, params.Encapsulation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesIdRecordingStartRequest generates requests for PostConferencesIdRecordingStart
func NewPostConferencesIdRecordingStartRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/recording_start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesIdRecordingStopRequest generates requests for PostConferencesIdRecordingStop
func NewPostConferencesIdRecordingStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/recording_stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConferencesIdTranscribeStartRequest calls the generic PostConferencesIdTranscribeStart builder with application/json body
func NewPostConferencesIdTranscribeStartRequest(server string, id string, body PostConferencesIdTranscribeStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConferencesIdTranscribeStartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostConferencesIdTranscribeStartRequestWithBody generates requests for PostConferencesIdTranscribeStart with any type of body
func NewPostConferencesIdTranscribeStartRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/transcribe_start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConferencesIdTranscribeStopRequest generates requests for PostConferencesIdTranscribeStop
func NewPostConferencesIdTranscribeStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conferences/%s/transcribe_stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConversationAccountsRequest generates requests for GetConversationAccounts
func NewGetConversationAccountsRequest(server string, params *GetConversationAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversation_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConversationAccountsRequest calls the generic PostConversationAccounts builder with application/json body
func NewPostConversationAccountsRequest(server string, body PostConversationAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConversationAccountsRequestWithBody generates requests for PostConversationAccounts with any type of body
func NewPostConversationAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversation_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConversationAccountsIdRequest generates requests for DeleteConversationAccountsId
func NewDeleteConversationAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversation_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConversationAccountsIdRequest generates requests for GetConversationAccountsId
func NewGetConversationAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversation_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutConversationAccountsIdRequest calls the generic PutConversationAccountsId builder with application/json body
func NewPutConversationAccountsIdRequest(server string, id string, body PutConversationAccountsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConversationAccountsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutConversationAccountsIdRequestWithBody generates requests for PutConversationAccountsId with any type of body
func NewPutConversationAccountsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversation_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsRequest generates requests for GetConversations
func NewGetConversationsRequest(server string, params *GetConversationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConversationsIdRequest generates requests for GetConversationsId
func NewGetConversationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutConversationsIdRequest calls the generic PutConversationsId builder with application/json body
func NewPutConversationsIdRequest(server string, id string, body PutConversationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConversationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutConversationsIdRequestWithBody generates requests for PutConversationsId with any type of body
func NewPutConversationsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConversationsIdMessagesRequest generates requests for GetConversationsIdMessages
func NewGetConversationsIdMessagesRequest(server string, id string, params *GetConversationsIdMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConversationsIdMessagesRequest calls the generic PostConversationsIdMessages builder with application/json body
func NewPostConversationsIdMessagesRequest(server string, id string, body PostConversationsIdMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConversationsIdMessagesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostConversationsIdMessagesRequestWithBody generates requests for PostConversationsIdMessages with any type of body
func NewPostConversationsIdMessagesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomerRequest generates requests for GetCustomer
func NewGetCustomerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCustomerRequest calls the generic PutCustomer builder with application/json body
func NewPutCustomerRequest(server string, body PutCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCustomerRequestWithBody generates requests for PutCustomer with any type of body
func NewPutCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCustomerBillingAccountIdRequest calls the generic PutCustomerBillingAccountId builder with application/json body
func NewPutCustomerBillingAccountIdRequest(server string, body PutCustomerBillingAccountIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomerBillingAccountIdRequestWithBody(server, "application/json", bodyReader)
}

// NewPutCustomerBillingAccountIdRequestWithBody generates requests for PutCustomerBillingAccountId with any type of body
func NewPutCustomerBillingAccountIdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer/billing_account_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomersRequest generates requests for GetCustomers
func NewGetCustomersRequest(server string, params *GetCustomersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomersRequest calls the generic PostCustomers builder with application/json body
func NewPostCustomersRequest(server string, body PostCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCustomersRequestWithBody generates requests for PostCustomers with any type of body
func NewPostCustomersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomersIdRequest generates requests for DeleteCustomersId
func NewDeleteCustomersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomersIdRequest generates requests for GetCustomersId
func NewGetCustomersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCustomersIdRequest calls the generic PutCustomersId builder with application/json body
func NewPutCustomersIdRequest(server string, id string, body PutCustomersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCustomersIdRequestWithBody generates requests for PutCustomersId with any type of body
func NewPutCustomersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutCustomersIdBillingAccountIdRequest calls the generic PutCustomersIdBillingAccountId builder with application/json body
func NewPutCustomersIdBillingAccountIdRequest(server string, id string, body PutCustomersIdBillingAccountIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomersIdBillingAccountIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCustomersIdBillingAccountIdRequestWithBody generates requests for PutCustomersIdBillingAccountId with any type of body
func NewPutCustomersIdBillingAccountIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/billing_account_id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExtensionsRequest generates requests for GetExtensions
func NewGetExtensionsRequest(server string, params *GetExtensionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExtensionsRequest calls the generic PostExtensions builder with application/json body
func NewPostExtensionsRequest(server string, body PostExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExtensionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostExtensionsRequestWithBody generates requests for PostExtensions with any type of body
func NewPostExtensionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteExtensionsIdRequest generates requests for DeleteExtensionsId
func NewDeleteExtensionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExtensionsIdRequest generates requests for GetExtensionsId
func NewGetExtensionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutExtensionsIdRequest calls the generic PutExtensionsId builder with application/json body
func NewPutExtensionsIdRequest(server string, id string, body PutExtensionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutExtensionsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutExtensionsIdRequestWithBody generates requests for PutExtensionsId with any type of body
func NewPutExtensionsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFilesRequest generates requests for GetFiles
func NewGetFilesRequest(server string, params *GetFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFilesRequestWithBody generates requests for PostFiles with any type of body
func NewPostFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFilesIdRequest generates requests for DeleteFilesId
func NewDeleteFilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilesIdRequest generates requests for GetFilesId
func NewGetFilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlowsRequest generates requests for GetFlows
func NewGetFlowsRequest(server string, params *GetFlowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFlowsRequest calls the generic PostFlows builder with application/json body
func NewPostFlowsRequest(server string, body PostFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlowsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFlowsRequestWithBody generates requests for PostFlows with any type of body
func NewPostFlowsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFlowsIdRequest generates requests for DeleteFlowsId
func NewDeleteFlowsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlowsIdRequest generates requests for GetFlowsId
func NewGetFlowsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFlowsIdRequest calls the generic PutFlowsId builder with application/json body
func NewPutFlowsIdRequest(server string, id string, body PutFlowsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFlowsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutFlowsIdRequestWithBody generates requests for PutFlowsId with any type of body
func NewPutFlowsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupcallsRequest generates requests for GetGroupcalls
func NewGetGroupcallsRequest(server string, params *GetGroupcallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groupcalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupcallsRequest calls the generic PostGroupcalls builder with application/json body
func NewPostGroupcallsRequest(server string, body PostGroupcallsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupcallsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupcallsRequestWithBody generates requests for PostGroupcalls with any type of body
func NewPostGroupcallsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groupcalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupcallsIdRequest generates requests for DeleteGroupcallsId
func NewDeleteGroupcallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groupcalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupcallsIdRequest generates requests for GetGroupcallsId
func NewGetGroupcallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groupcalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupcallsIdHangupRequest generates requests for PostGroupcallsIdHangup
func NewPostGroupcallsIdHangupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groupcalls/%s/hangup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessagesRequest generates requests for GetMessages
func NewGetMessagesRequest(server string, params *GetMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessagesRequest calls the generic PostMessages builder with application/json body
func NewPostMessagesRequest(server string, body PostMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMessagesRequestWithBody generates requests for PostMessages with any type of body
func NewPostMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMessagesIdRequest generates requests for DeleteMessagesId
func NewDeleteMessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessagesIdRequest generates requests for GetMessagesId
func NewGetMessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNumbersRequest generates requests for GetNumbers
func NewGetNumbersRequest(server string, params *GetNumbersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNumbersRequest calls the generic PostNumbers builder with application/json body
func NewPostNumbersRequest(server string, body PostNumbersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNumbersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNumbersRequestWithBody generates requests for PostNumbers with any type of body
func NewPostNumbersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNumbersRenewRequest calls the generic PostNumbersRenew builder with application/json body
func NewPostNumbersRenewRequest(server string, body PostNumbersRenewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNumbersRenewRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNumbersRenewRequestWithBody generates requests for PostNumbersRenew with any type of body
func NewPostNumbersRenewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers/renew")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNumbersIdRequest generates requests for DeleteNumbersId
func NewDeleteNumbersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNumbersIdRequest generates requests for GetNumbersId
func NewGetNumbersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNumbersIdRequest calls the generic PutNumbersId builder with application/json body
func NewPutNumbersIdRequest(server string, id string, body PutNumbersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNumbersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutNumbersIdRequestWithBody generates requests for PutNumbersId with any type of body
func NewPutNumbersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutNumbersIdFlowIdsRequest calls the generic PutNumbersIdFlowIds builder with application/json body
func NewPutNumbersIdFlowIdsRequest(server string, id string, body PutNumbersIdFlowIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNumbersIdFlowIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutNumbersIdFlowIdsRequestWithBody generates requests for PutNumbersIdFlowIds with any type of body
func NewPutNumbersIdFlowIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/numbers/%s/flow_ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutdialsRequest generates requests for GetOutdials
func NewGetOutdialsRequest(server string, params *GetOutdialsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOutdialsRequest calls the generic PostOutdials builder with application/json body
func NewPostOutdialsRequest(server string, body PostOutdialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOutdialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOutdialsRequestWithBody generates requests for PostOutdials with any type of body
func NewPostOutdialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOutdialsIdRequest generates requests for DeleteOutdialsId
func NewDeleteOutdialsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutdialsIdRequest generates requests for GetOutdialsId
func NewGetOutdialsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOutdialsIdRequest calls the generic PutOutdialsId builder with application/json body
func NewPutOutdialsIdRequest(server string, id string, body PutOutdialsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOutdialsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOutdialsIdRequestWithBody generates requests for PutOutdialsId with any type of body
func NewPutOutdialsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOutdialsIdCampaignIdRequest calls the generic PutOutdialsIdCampaignId builder with application/json body
func NewPutOutdialsIdCampaignIdRequest(server string, id string, body PutOutdialsIdCampaignIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOutdialsIdCampaignIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOutdialsIdCampaignIdRequestWithBody generates requests for PutOutdialsIdCampaignId with any type of body
func NewPutOutdialsIdCampaignIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s/campaign_id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOutdialsIdDataRequest calls the generic PutOutdialsIdData builder with application/json body
func NewPutOutdialsIdDataRequest(server string, id string, body PutOutdialsIdDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOutdialsIdDataRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOutdialsIdDataRequestWithBody generates requests for PutOutdialsIdData with any type of body
func NewPutOutdialsIdDataRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s/data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutdialsIdTargetsRequest generates requests for GetOutdialsIdTargets
func NewGetOutdialsIdTargetsRequest(server string, id string, params *GetOutdialsIdTargetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s/targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOutdialsIdTargetsRequest calls the generic PostOutdialsIdTargets builder with application/json body
func NewPostOutdialsIdTargetsRequest(server string, id string, body PostOutdialsIdTargetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOutdialsIdTargetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOutdialsIdTargetsRequestWithBody generates requests for PostOutdialsIdTargets with any type of body
func NewPostOutdialsIdTargetsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s/targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOutdialsIdTargetsTargetIdRequest generates requests for DeleteOutdialsIdTargetsTargetId
func NewDeleteOutdialsIdTargetsTargetIdRequest(server string, id string, targetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "target_id", runtime.ParamLocationPath, targetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s/targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutdialsIdTargetsTargetIdRequest generates requests for GetOutdialsIdTargetsTargetId
func NewGetOutdialsIdTargetsTargetIdRequest(server string, id string, targetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "target_id", runtime.ParamLocationPath, targetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outdials/%s/targets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutplansRequest generates requests for GetOutplans
func NewGetOutplansRequest(server string, params *GetOutplansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outplans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOutplansRequest calls the generic PostOutplans builder with application/json body
func NewPostOutplansRequest(server string, body PostOutplansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOutplansRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOutplansRequestWithBody generates requests for PostOutplans with any type of body
func NewPostOutplansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outplans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOutplansIdRequest generates requests for DeleteOutplansId
func NewDeleteOutplansIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outplans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutplansIdRequest generates requests for GetOutplansId
func NewGetOutplansIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outplans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOutplansIdRequest calls the generic PutOutplansId builder with application/json body
func NewPutOutplansIdRequest(server string, id string, body PutOutplansIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOutplansIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOutplansIdRequestWithBody generates requests for PutOutplansId with any type of body
func NewPutOutplansIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outplans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOutplansIdDialInfoRequest calls the generic PutOutplansIdDialInfo builder with application/json body
func NewPutOutplansIdDialInfoRequest(server string, id string, body PutOutplansIdDialInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOutplansIdDialInfoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutOutplansIdDialInfoRequestWithBody generates requests for PutOutplansIdDialInfo with any type of body
func NewPutOutplansIdDialInfoRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outplans/%s/dial_info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProvidersRequest generates requests for GetProviders
func NewGetProvidersRequest(server string, params *GetProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProvidersRequest calls the generic PostProviders builder with application/json body
func NewPostProvidersRequest(server string, body PostProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProvidersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProvidersRequestWithBody generates requests for PostProviders with any type of body
func NewPostProvidersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProvidersIdRequest generates requests for DeleteProvidersId
func NewDeleteProvidersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersIdRequest generates requests for GetProvidersId
func NewGetProvidersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProvidersIdRequest calls the generic PutProvidersId builder with application/json body
func NewPutProvidersIdRequest(server string, id string, body PutProvidersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProvidersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutProvidersIdRequestWithBody generates requests for PutProvidersId with any type of body
func NewPutProvidersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetQueuecallsRequest generates requests for GetQueuecalls
func NewGetQueuecallsRequest(server string, params *GetQueuecallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queuecalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostQueuecallsReferenceIdIdKickRequest generates requests for PostQueuecallsReferenceIdIdKick
func NewPostQueuecallsReferenceIdIdKickRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queuecalls/reference_id/%s/kick", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteQueuecallsIdRequest generates requests for DeleteQueuecallsId
func NewDeleteQueuecallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queuecalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQueuecallsIdRequest generates requests for GetQueuecallsId
func NewGetQueuecallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queuecalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostQueuecallsIdKickRequest generates requests for PostQueuecallsIdKick
func NewPostQueuecallsIdKickRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queuecalls/%s/kick", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQueuesRequest generates requests for GetQueues
func NewGetQueuesRequest(server string, params *GetQueuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostQueuesRequest calls the generic PostQueues builder with application/json body
func NewPostQueuesRequest(server string, body PostQueuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostQueuesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostQueuesRequestWithBody generates requests for PostQueues with any type of body
func NewPostQueuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteQueuesIdRequest generates requests for DeleteQueuesId
func NewDeleteQueuesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQueuesIdRequest generates requests for GetQueuesId
func NewGetQueuesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutQueuesIdRequest calls the generic PutQueuesId builder with application/json body
func NewPutQueuesIdRequest(server string, id string, body PutQueuesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutQueuesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutQueuesIdRequestWithBody generates requests for PutQueuesId with any type of body
func NewPutQueuesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutQueuesIdActionsRequest calls the generic PutQueuesIdActions builder with application/json body
func NewPutQueuesIdActionsRequest(server string, id string, body PutQueuesIdActionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutQueuesIdActionsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutQueuesIdActionsRequestWithBody generates requests for PutQueuesIdActions with any type of body
func NewPutQueuesIdActionsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutQueuesIdRoutingMethodRequest calls the generic PutQueuesIdRoutingMethod builder with application/json body
func NewPutQueuesIdRoutingMethodRequest(server string, id string, body PutQueuesIdRoutingMethodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutQueuesIdRoutingMethodRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutQueuesIdRoutingMethodRequestWithBody generates requests for PutQueuesIdRoutingMethod with any type of body
func NewPutQueuesIdRoutingMethodRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues/%s/routing_method", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutQueuesIdTagIdsRequest calls the generic PutQueuesIdTagIds builder with application/json body
func NewPutQueuesIdTagIdsRequest(server string, id string, body PutQueuesIdTagIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutQueuesIdTagIdsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutQueuesIdTagIdsRequestWithBody generates requests for PutQueuesIdTagIds with any type of body
func NewPutQueuesIdTagIdsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queues/%s/tag_ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecordingfilesIdRequest generates requests for GetRecordingfilesId
func NewGetRecordingfilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recordingfiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecordingsRequest generates requests for GetRecordings
func NewGetRecordingsRequest(server string, params *GetRecordingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recordings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordingsIdRequest generates requests for DeleteRecordingsId
func NewDeleteRecordingsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recordings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecordingsIdRequest generates requests for GetRecordingsId
func NewGetRecordingsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recordings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoutesRequest generates requests for GetRoutes
func NewGetRoutesRequest(server string, params *GetRoutesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customer_id", runtime.ParamLocationQuery, *params.CustomerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRoutesRequest calls the generic PostRoutes builder with application/json body
func NewPostRoutesRequest(server string, body PostRoutesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRoutesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRoutesRequestWithBody generates requests for PostRoutes with any type of body
func NewPostRoutesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoutesIdRequest generates requests for DeleteRoutesId
func NewDeleteRoutesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoutesIdRequest generates requests for GetRoutesId
func NewGetRoutesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRoutesIdRequest calls the generic PutRoutesId builder with application/json body
func NewPutRoutesIdRequest(server string, id string, body PutRoutesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRoutesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRoutesIdRequestWithBody generates requests for PutRoutesId with any type of body
func NewPutRoutesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceAgentsAgentsRequest generates requests for GetServiceAgentsAgents
func NewGetServiceAgentsAgentsRequest(server string, params *GetServiceAgentsAgentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsAgentsIdRequest generates requests for GetServiceAgentsAgentsId
func NewGetServiceAgentsAgentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsCallsRequest generates requests for GetServiceAgentsCalls
func NewGetServiceAgentsCallsRequest(server string, params *GetServiceAgentsCallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/calls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsCallsIdRequest generates requests for GetServiceAgentsCallsId
func NewGetServiceAgentsCallsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/calls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsChatroommessagesRequest generates requests for GetServiceAgentsChatroommessages
func NewGetServiceAgentsChatroommessagesRequest(server string, params *GetServiceAgentsChatroommessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatroommessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chatroom_id", runtime.ParamLocationQuery, params.ChatroomId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceAgentsChatroommessagesRequest calls the generic PostServiceAgentsChatroommessages builder with application/json body
func NewPostServiceAgentsChatroommessagesRequest(server string, body PostServiceAgentsChatroommessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceAgentsChatroommessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceAgentsChatroommessagesRequestWithBody generates requests for PostServiceAgentsChatroommessages with any type of body
func NewPostServiceAgentsChatroommessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatroommessages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceAgentsChatroommessagesIdRequest generates requests for DeleteServiceAgentsChatroommessagesId
func NewDeleteServiceAgentsChatroommessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatroommessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsChatroommessagesIdRequest generates requests for GetServiceAgentsChatroommessagesId
func NewGetServiceAgentsChatroommessagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatroommessages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsChatroomsRequest generates requests for GetServiceAgentsChatrooms
func NewGetServiceAgentsChatroomsRequest(server string, params *GetServiceAgentsChatroomsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatrooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceAgentsChatroomsRequest calls the generic PostServiceAgentsChatrooms builder with application/json body
func NewPostServiceAgentsChatroomsRequest(server string, body PostServiceAgentsChatroomsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceAgentsChatroomsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceAgentsChatroomsRequestWithBody generates requests for PostServiceAgentsChatrooms with any type of body
func NewPostServiceAgentsChatroomsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatrooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceAgentsChatroomsIdRequest generates requests for DeleteServiceAgentsChatroomsId
func NewDeleteServiceAgentsChatroomsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsChatroomsIdRequest generates requests for GetServiceAgentsChatroomsId
func NewGetServiceAgentsChatroomsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServiceAgentsChatroomsIdRequest calls the generic PutServiceAgentsChatroomsId builder with application/json body
func NewPutServiceAgentsChatroomsIdRequest(server string, id string, body PutServiceAgentsChatroomsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceAgentsChatroomsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutServiceAgentsChatroomsIdRequestWithBody generates requests for PutServiceAgentsChatroomsId with any type of body
func NewPutServiceAgentsChatroomsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/chatrooms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceAgentsConversationsRequest generates requests for GetServiceAgentsConversations
func NewGetServiceAgentsConversationsRequest(server string, params *GetServiceAgentsConversationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/conversations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsConversationsIdRequest generates requests for GetServiceAgentsConversationsId
func NewGetServiceAgentsConversationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/conversations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsConversationsIdMessagesRequest generates requests for GetServiceAgentsConversationsIdMessages
func NewGetServiceAgentsConversationsIdMessagesRequest(server string, id string, params *GetServiceAgentsConversationsIdMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/conversations/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceAgentsConversationsIdMessagesRequest calls the generic PostServiceAgentsConversationsIdMessages builder with application/json body
func NewPostServiceAgentsConversationsIdMessagesRequest(server string, id string, body PostServiceAgentsConversationsIdMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceAgentsConversationsIdMessagesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostServiceAgentsConversationsIdMessagesRequestWithBody generates requests for PostServiceAgentsConversationsIdMessages with any type of body
func NewPostServiceAgentsConversationsIdMessagesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/conversations/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceAgentsCustomerRequest generates requests for GetServiceAgentsCustomer
func NewGetServiceAgentsCustomerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/customer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsExtensionsRequest generates requests for GetServiceAgentsExtensions
func NewGetServiceAgentsExtensionsRequest(server string, params *GetServiceAgentsExtensionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/extensions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsExtensionsIdRequest generates requests for GetServiceAgentsExtensionsId
func NewGetServiceAgentsExtensionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/extensions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsFilesRequest generates requests for GetServiceAgentsFiles
func NewGetServiceAgentsFilesRequest(server string, params *GetServiceAgentsFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceAgentsFilesRequestWithBody generates requests for PostServiceAgentsFiles with any type of body
func NewPostServiceAgentsFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceAgentsFilesIdRequest generates requests for DeleteServiceAgentsFilesId
func NewDeleteServiceAgentsFilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsFilesIdRequest generates requests for GetServiceAgentsFilesId
func NewGetServiceAgentsFilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAgentsMeRequest generates requests for GetServiceAgentsMe
func NewGetServiceAgentsMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServiceAgentsMeRequest calls the generic PutServiceAgentsMe builder with application/json body
func NewPutServiceAgentsMeRequest(server string, body PutServiceAgentsMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceAgentsMeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutServiceAgentsMeRequestWithBody generates requests for PutServiceAgentsMe with any type of body
func NewPutServiceAgentsMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceAgentsMeAddressesRequest calls the generic PutServiceAgentsMeAddresses builder with application/json body
func NewPutServiceAgentsMeAddressesRequest(server string, body PutServiceAgentsMeAddressesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceAgentsMeAddressesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutServiceAgentsMeAddressesRequestWithBody generates requests for PutServiceAgentsMeAddresses with any type of body
func NewPutServiceAgentsMeAddressesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/me/addresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceAgentsMePasswordRequest calls the generic PutServiceAgentsMePassword builder with application/json body
func NewPutServiceAgentsMePasswordRequest(server string, body PutServiceAgentsMePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceAgentsMePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPutServiceAgentsMePasswordRequestWithBody generates requests for PutServiceAgentsMePassword with any type of body
func NewPutServiceAgentsMePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/me/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceAgentsMeStatusRequest calls the generic PutServiceAgentsMeStatus builder with application/json body
func NewPutServiceAgentsMeStatusRequest(server string, body PutServiceAgentsMeStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceAgentsMeStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPutServiceAgentsMeStatusRequestWithBody generates requests for PutServiceAgentsMeStatus with any type of body
func NewPutServiceAgentsMeStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/me/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceAgentsWsRequest generates requests for GetServiceAgentsWs
func NewGetServiceAgentsWsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service_agents/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageAccountRequest generates requests for GetStorageAccount
func NewGetStorageAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageAccountsRequest generates requests for GetStorageAccounts
func NewGetStorageAccountsRequest(server string, params *GetStorageAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStorageAccountsRequest calls the generic PostStorageAccounts builder with application/json body
func NewPostStorageAccountsRequest(server string, body PostStorageAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStorageAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStorageAccountsRequestWithBody generates requests for PostStorageAccounts with any type of body
func NewPostStorageAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageAccountsIdRequest generates requests for DeleteStorageAccountsId
func NewDeleteStorageAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageAccountsIdRequest generates requests for GetStorageAccountsId
func NewGetStorageAccountsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageFilesRequest generates requests for GetStorageFiles
func NewGetStorageFilesRequest(server string, params *GetStorageFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStorageFilesRequestWithBody generates requests for PostStorageFiles with any type of body
func NewPostStorageFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStorageFilesIdRequest generates requests for DeleteStorageFilesId
func NewDeleteStorageFilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageFilesIdRequest generates requests for GetStorageFilesId
func NewGetStorageFilesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/storage_files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string, params *GetTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTagsRequest calls the generic PostTags builder with application/json body
func NewPostTagsRequest(server string, body PostTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTagsRequestWithBody generates requests for PostTags with any type of body
func NewPostTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagsIdRequest generates requests for DeleteTagsId
func NewDeleteTagsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsIdRequest generates requests for GetTagsId
func NewGetTagsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTagsIdRequest calls the generic PutTagsId builder with application/json body
func NewPutTagsIdRequest(server string, id string, body PutTagsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTagsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTagsIdRequestWithBody generates requests for PutTagsId with any type of body
func NewPutTagsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTranscribesRequest generates requests for GetTranscribes
func NewGetTranscribesRequest(server string, params *GetTranscribesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcribes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTranscribesRequest calls the generic PostTranscribes builder with application/json body
func NewPostTranscribesRequest(server string, body PostTranscribesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTranscribesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTranscribesRequestWithBody generates requests for PostTranscribes with any type of body
func NewPostTranscribesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcribes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTranscribesIdRequest generates requests for DeleteTranscribesId
func NewDeleteTranscribesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcribes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTranscribesIdRequest generates requests for GetTranscribesId
func NewGetTranscribesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcribes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTranscribesIdStopRequest generates requests for PostTranscribesIdStop
func NewPostTranscribesIdStopRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcribes/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTranscriptsRequest generates requests for GetTranscripts
func NewGetTranscriptsRequest(server string, params *GetTranscriptsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcripts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transcribe_id", runtime.ParamLocationQuery, params.TranscribeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTransfersRequest calls the generic PostTransfers builder with application/json body
func NewPostTransfersRequest(server string, body PostTransfersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransfersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTransfersRequestWithBody generates requests for PostTransfers with any type of body
func NewPostTransfersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTrunksRequest generates requests for GetTrunks
func NewGetTrunksRequest(server string, params *GetTrunksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trunks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTrunksRequest calls the generic PostTrunks builder with application/json body
func NewPostTrunksRequest(server string, body PostTrunksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTrunksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTrunksRequestWithBody generates requests for PostTrunks with any type of body
func NewPostTrunksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trunks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTrunksIdRequest generates requests for DeleteTrunksId
func NewDeleteTrunksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trunks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrunksIdRequest generates requests for GetTrunksId
func NewGetTrunksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trunks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTrunksIdRequest calls the generic PutTrunksId builder with application/json body
func NewPutTrunksIdRequest(server string, id string, body PutTrunksIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTrunksIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutTrunksIdRequestWithBody generates requests for PutTrunksId with any type of body
func NewPutTrunksIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trunks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWsRequest generates requests for GetWs
func NewGetWsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccesskeysWithResponse request
	GetAccesskeysWithResponse(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*GetAccesskeysResponse, error)

	// PostAccesskeysWithBodyWithResponse request with any body
	PostAccesskeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error)

	PostAccesskeysWithResponse(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error)

	// DeleteAccesskeysIdWithResponse request
	DeleteAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAccesskeysIdResponse, error)

	// GetAccesskeysIdWithResponse request
	GetAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAccesskeysIdResponse, error)

	// PutAccesskeysIdWithBodyWithResponse request with any body
	PutAccesskeysIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error)

	PutAccesskeysIdWithResponse(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error)

	// GetActiveflowsWithResponse request
	GetActiveflowsWithResponse(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*GetActiveflowsResponse, error)

	// PostActiveflowsWithBodyWithResponse request with any body
	PostActiveflowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error)

	PostActiveflowsWithResponse(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error)

	// DeleteActiveflowsIdWithResponse request
	DeleteActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteActiveflowsIdResponse, error)

	// GetActiveflowsIdWithResponse request
	GetActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetActiveflowsIdResponse, error)

	// PostActiveflowsIdStopWithResponse request
	PostActiveflowsIdStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostActiveflowsIdStopResponse, error)

	// GetAgentsWithResponse request
	GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error)

	// PostAgentsWithBodyWithResponse request with any body
	PostAgentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error)

	PostAgentsWithResponse(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error)

	// DeleteAgentsIdWithResponse request
	DeleteAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAgentsIdResponse, error)

	// GetAgentsIdWithResponse request
	GetAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAgentsIdResponse, error)

	// PutAgentsIdWithBodyWithResponse request with any body
	PutAgentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error)

	PutAgentsIdWithResponse(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error)

	// PutAgentsIdAddressesWithBodyWithResponse request with any body
	PutAgentsIdAddressesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error)

	PutAgentsIdAddressesWithResponse(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error)

	// PutAgentsIdPasswordWithBodyWithResponse request with any body
	PutAgentsIdPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error)

	PutAgentsIdPasswordWithResponse(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error)

	// PutAgentsIdPermissionWithBodyWithResponse request with any body
	PutAgentsIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error)

	PutAgentsIdPermissionWithResponse(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error)

	// PutAgentsIdStatusWithBodyWithResponse request with any body
	PutAgentsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error)

	PutAgentsIdStatusWithResponse(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error)

	// PutAgentsIdTagIdsWithBodyWithResponse request with any body
	PutAgentsIdTagIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error)

	PutAgentsIdTagIdsWithResponse(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error)

	// GetAvailableNumbersWithResponse request
	GetAvailableNumbersWithResponse(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*GetAvailableNumbersResponse, error)

	// GetBillingAccountsWithResponse request
	GetBillingAccountsWithResponse(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*GetBillingAccountsResponse, error)

	// PostBillingAccountsWithBodyWithResponse request with any body
	PostBillingAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error)

	PostBillingAccountsWithResponse(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error)

	// DeleteBillingAccountsIdWithResponse request
	DeleteBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBillingAccountsIdResponse, error)

	// GetBillingAccountsIdWithResponse request
	GetBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBillingAccountsIdResponse, error)

	// PutBillingAccountsIdWithBodyWithResponse request with any body
	PutBillingAccountsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error)

	PutBillingAccountsIdWithResponse(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error)

	// PostBillingAccountsIdBalanceAddForceWithBodyWithResponse request with any body
	PostBillingAccountsIdBalanceAddForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error)

	PostBillingAccountsIdBalanceAddForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error)

	// PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse request with any body
	PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error)

	PostBillingAccountsIdBalanceSubtractForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error)

	// PutBillingAccountsIdPaymentInfoWithBodyWithResponse request with any body
	PutBillingAccountsIdPaymentInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error)

	PutBillingAccountsIdPaymentInfoWithResponse(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error)

	// GetBillingsWithResponse request
	GetBillingsWithResponse(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*GetBillingsResponse, error)

	// GetCallsWithResponse request
	GetCallsWithResponse(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*GetCallsResponse, error)

	// PostCallsWithBodyWithResponse request with any body
	PostCallsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsResponse, error)

	PostCallsWithResponse(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsResponse, error)

	// DeleteCallsIdWithResponse request
	DeleteCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdResponse, error)

	// GetCallsIdWithResponse request
	GetCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCallsIdResponse, error)

	// PostCallsIdHangupWithResponse request
	PostCallsIdHangupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHangupResponse, error)

	// DeleteCallsIdHoldWithResponse request
	DeleteCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdHoldResponse, error)

	// PostCallsIdHoldWithResponse request
	PostCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHoldResponse, error)

	// GetCallsIdMediaStreamWithResponse request
	GetCallsIdMediaStreamWithResponse(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetCallsIdMediaStreamResponse, error)

	// DeleteCallsIdMohWithResponse request
	DeleteCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdMohResponse, error)

	// PostCallsIdMohWithResponse request
	PostCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdMohResponse, error)

	// DeleteCallsIdMuteWithBodyWithResponse request with any body
	DeleteCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error)

	DeleteCallsIdMuteWithResponse(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error)

	// PostCallsIdMuteWithBodyWithResponse request with any body
	PostCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error)

	PostCallsIdMuteWithResponse(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error)

	// DeleteCallsIdSilenceWithResponse request
	DeleteCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdSilenceResponse, error)

	// PostCallsIdSilenceWithResponse request
	PostCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdSilenceResponse, error)

	// PostCallsIdTalkWithBodyWithResponse request with any body
	PostCallsIdTalkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error)

	PostCallsIdTalkWithResponse(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error)

	// GetCampaigncallsWithResponse request
	GetCampaigncallsWithResponse(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaigncallsResponse, error)

	// DeleteCampaigncallsIdWithResponse request
	DeleteCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaigncallsIdResponse, error)

	// GetCampaigncallsIdWithResponse request
	GetCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaigncallsIdResponse, error)

	// GetCampaignsWithResponse request
	GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error)

	// PostCampaignsWithBodyWithResponse request with any body
	PostCampaignsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error)

	PostCampaignsWithResponse(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error)

	// DeleteCampaignsIdWithResponse request
	DeleteCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error)

	// GetCampaignsIdWithResponse request
	GetCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error)

	// PutCampaignsIdWithBodyWithResponse request with any body
	PutCampaignsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error)

	PutCampaignsIdWithResponse(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error)

	// PutCampaignsIdActionsWithBodyWithResponse request with any body
	PutCampaignsIdActionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error)

	PutCampaignsIdActionsWithResponse(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error)

	// GetCampaignsIdCampaigncallsWithResponse request
	GetCampaignsIdCampaigncallsWithResponse(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaignsIdCampaigncallsResponse, error)

	// PutCampaignsIdNextCampaignIdWithBodyWithResponse request with any body
	PutCampaignsIdNextCampaignIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error)

	PutCampaignsIdNextCampaignIdWithResponse(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error)

	// PutCampaignsIdResourceInfoWithBodyWithResponse request with any body
	PutCampaignsIdResourceInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error)

	PutCampaignsIdResourceInfoWithResponse(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error)

	// PutCampaignsIdServiceLevelWithBodyWithResponse request with any body
	PutCampaignsIdServiceLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error)

	PutCampaignsIdServiceLevelWithResponse(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error)

	// PutCampaignsIdStatusWithBodyWithResponse request with any body
	PutCampaignsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error)

	PutCampaignsIdStatusWithResponse(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error)

	// GetChatbotcallsWithResponse request
	GetChatbotcallsWithResponse(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*GetChatbotcallsResponse, error)

	// DeleteChatbotcallsIdWithResponse request
	DeleteChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotcallsIdResponse, error)

	// GetChatbotcallsIdWithResponse request
	GetChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotcallsIdResponse, error)

	// GetChatbotsWithResponse request
	GetChatbotsWithResponse(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*GetChatbotsResponse, error)

	// PostChatbotsWithBodyWithResponse request with any body
	PostChatbotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error)

	PostChatbotsWithResponse(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error)

	// DeleteChatbotsIdWithResponse request
	DeleteChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotsIdResponse, error)

	// GetChatbotsIdWithResponse request
	GetChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotsIdResponse, error)

	// PutChatbotsIdWithBodyWithResponse request with any body
	PutChatbotsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error)

	PutChatbotsIdWithResponse(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error)

	// GetChatmessagesWithResponse request
	GetChatmessagesWithResponse(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*GetChatmessagesResponse, error)

	// PostChatmessagesWithBodyWithResponse request with any body
	PostChatmessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error)

	PostChatmessagesWithResponse(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error)

	// DeleteChatmessagesIdWithResponse request
	DeleteChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatmessagesIdResponse, error)

	// GetChatmessagesIdWithResponse request
	GetChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatmessagesIdResponse, error)

	// GetChatroommessagesWithResponse request
	GetChatroommessagesWithResponse(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*GetChatroommessagesResponse, error)

	// PostChatroommessagesWithBodyWithResponse request with any body
	PostChatroommessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error)

	PostChatroommessagesWithResponse(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error)

	// DeleteChatroommessagesIdWithResponse request
	DeleteChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroommessagesIdResponse, error)

	// GetChatroommessagesIdWithResponse request
	GetChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroommessagesIdResponse, error)

	// GetChatroomsWithResponse request
	GetChatroomsWithResponse(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*GetChatroomsResponse, error)

	// PostChatroomsWithBodyWithResponse request with any body
	PostChatroomsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error)

	PostChatroomsWithResponse(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error)

	// DeleteChatroomsIdWithResponse request
	DeleteChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroomsIdResponse, error)

	// GetChatroomsIdWithResponse request
	GetChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroomsIdResponse, error)

	// PutChatroomsIdWithBodyWithResponse request with any body
	PutChatroomsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error)

	PutChatroomsIdWithResponse(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error)

	// GetChatsWithResponse request
	GetChatsWithResponse(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*GetChatsResponse, error)

	// PostChatsWithBodyWithResponse request with any body
	PostChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsResponse, error)

	PostChatsWithResponse(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsResponse, error)

	// DeleteChatsIdWithResponse request
	DeleteChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatsIdResponse, error)

	// GetChatsIdWithResponse request
	GetChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatsIdResponse, error)

	// PutChatsIdWithBodyWithResponse request with any body
	PutChatsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error)

	PutChatsIdWithResponse(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error)

	// PostChatsIdParticipantIdsWithBodyWithResponse request with any body
	PostChatsIdParticipantIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error)

	PostChatsIdParticipantIdsWithResponse(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error)

	// DeleteChatsIdParticipantIdsParticipantIdWithResponse request
	DeleteChatsIdParticipantIdsParticipantIdWithResponse(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*DeleteChatsIdParticipantIdsParticipantIdResponse, error)

	// PutChatsIdRoomOwnerIdWithBodyWithResponse request with any body
	PutChatsIdRoomOwnerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error)

	PutChatsIdRoomOwnerIdWithResponse(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error)

	// GetConferencecallsWithResponse request
	GetConferencecallsWithResponse(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*GetConferencecallsResponse, error)

	// DeleteConferencecallsIdWithResponse request
	DeleteConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencecallsIdResponse, error)

	// GetConferencecallsIdWithResponse request
	GetConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencecallsIdResponse, error)

	// GetConferencesWithResponse request
	GetConferencesWithResponse(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*GetConferencesResponse, error)

	// PostConferencesWithBodyWithResponse request with any body
	PostConferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error)

	PostConferencesWithResponse(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error)

	// DeleteConferencesIdWithResponse request
	DeleteConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencesIdResponse, error)

	// GetConferencesIdWithResponse request
	GetConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencesIdResponse, error)

	// PutConferencesIdWithBodyWithResponse request with any body
	PutConferencesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error)

	PutConferencesIdWithResponse(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error)

	// GetConferencesIdMediaStreamWithResponse request
	GetConferencesIdMediaStreamWithResponse(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetConferencesIdMediaStreamResponse, error)

	// PostConferencesIdRecordingStartWithResponse request
	PostConferencesIdRecordingStartWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStartResponse, error)

	// PostConferencesIdRecordingStopWithResponse request
	PostConferencesIdRecordingStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStopResponse, error)

	// PostConferencesIdTranscribeStartWithBodyWithResponse request with any body
	PostConferencesIdTranscribeStartWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error)

	PostConferencesIdTranscribeStartWithResponse(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error)

	// PostConferencesIdTranscribeStopWithResponse request
	PostConferencesIdTranscribeStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStopResponse, error)

	// GetConversationAccountsWithResponse request
	GetConversationAccountsWithResponse(ctx context.Context, params *GetConversationAccountsParams, reqEditors ...RequestEditorFn) (*GetConversationAccountsResponse, error)

	// PostConversationAccountsWithBodyWithResponse request with any body
	PostConversationAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationAccountsResponse, error)

	PostConversationAccountsWithResponse(ctx context.Context, body PostConversationAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationAccountsResponse, error)

	// DeleteConversationAccountsIdWithResponse request
	DeleteConversationAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConversationAccountsIdResponse, error)

	// GetConversationAccountsIdWithResponse request
	GetConversationAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConversationAccountsIdResponse, error)

	// PutConversationAccountsIdWithBodyWithResponse request with any body
	PutConversationAccountsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConversationAccountsIdResponse, error)

	PutConversationAccountsIdWithResponse(ctx context.Context, id string, body PutConversationAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConversationAccountsIdResponse, error)

	// GetConversationsWithResponse request
	GetConversationsWithResponse(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*GetConversationsResponse, error)

	// GetConversationsIdWithResponse request
	GetConversationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConversationsIdResponse, error)

	// PutConversationsIdWithBodyWithResponse request with any body
	PutConversationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConversationsIdResponse, error)

	PutConversationsIdWithResponse(ctx context.Context, id string, body PutConversationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConversationsIdResponse, error)

	// GetConversationsIdMessagesWithResponse request
	GetConversationsIdMessagesWithResponse(ctx context.Context, id string, params *GetConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*GetConversationsIdMessagesResponse, error)

	// PostConversationsIdMessagesWithBodyWithResponse request with any body
	PostConversationsIdMessagesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsIdMessagesResponse, error)

	PostConversationsIdMessagesWithResponse(ctx context.Context, id string, body PostConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsIdMessagesResponse, error)

	// GetCustomerWithResponse request
	GetCustomerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error)

	// PutCustomerWithBodyWithResponse request with any body
	PutCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error)

	PutCustomerWithResponse(ctx context.Context, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error)

	// PutCustomerBillingAccountIdWithBodyWithResponse request with any body
	PutCustomerBillingAccountIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerBillingAccountIdResponse, error)

	PutCustomerBillingAccountIdWithResponse(ctx context.Context, body PutCustomerBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerBillingAccountIdResponse, error)

	// GetCustomersWithResponse request
	GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error)

	// PostCustomersWithBodyWithResponse request with any body
	PostCustomersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error)

	PostCustomersWithResponse(ctx context.Context, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error)

	// DeleteCustomersIdWithResponse request
	DeleteCustomersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error)

	// GetCustomersIdWithResponse request
	GetCustomersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error)

	// PutCustomersIdWithBodyWithResponse request with any body
	PutCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersIdResponse, error)

	PutCustomersIdWithResponse(ctx context.Context, id string, body PutCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersIdResponse, error)

	// PutCustomersIdBillingAccountIdWithBodyWithResponse request with any body
	PutCustomersIdBillingAccountIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersIdBillingAccountIdResponse, error)

	PutCustomersIdBillingAccountIdWithResponse(ctx context.Context, id string, body PutCustomersIdBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersIdBillingAccountIdResponse, error)

	// GetExtensionsWithResponse request
	GetExtensionsWithResponse(ctx context.Context, params *GetExtensionsParams, reqEditors ...RequestEditorFn) (*GetExtensionsResponse, error)

	// PostExtensionsWithBodyWithResponse request with any body
	PostExtensionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExtensionsResponse, error)

	PostExtensionsWithResponse(ctx context.Context, body PostExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExtensionsResponse, error)

	// DeleteExtensionsIdWithResponse request
	DeleteExtensionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteExtensionsIdResponse, error)

	// GetExtensionsIdWithResponse request
	GetExtensionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetExtensionsIdResponse, error)

	// PutExtensionsIdWithBodyWithResponse request with any body
	PutExtensionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExtensionsIdResponse, error)

	PutExtensionsIdWithResponse(ctx context.Context, id string, body PutExtensionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExtensionsIdResponse, error)

	// GetFilesWithResponse request
	GetFilesWithResponse(ctx context.Context, params *GetFilesParams, reqEditors ...RequestEditorFn) (*GetFilesResponse, error)

	// PostFilesWithBodyWithResponse request with any body
	PostFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesResponse, error)

	// DeleteFilesIdWithResponse request
	DeleteFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFilesIdResponse, error)

	// GetFilesIdWithResponse request
	GetFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFilesIdResponse, error)

	// GetFlowsWithResponse request
	GetFlowsWithResponse(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*GetFlowsResponse, error)

	// PostFlowsWithBodyWithResponse request with any body
	PostFlowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error)

	PostFlowsWithResponse(ctx context.Context, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error)

	// DeleteFlowsIdWithResponse request
	DeleteFlowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFlowsIdResponse, error)

	// GetFlowsIdWithResponse request
	GetFlowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFlowsIdResponse, error)

	// PutFlowsIdWithBodyWithResponse request with any body
	PutFlowsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlowsIdResponse, error)

	PutFlowsIdWithResponse(ctx context.Context, id string, body PutFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlowsIdResponse, error)

	// GetGroupcallsWithResponse request
	GetGroupcallsWithResponse(ctx context.Context, params *GetGroupcallsParams, reqEditors ...RequestEditorFn) (*GetGroupcallsResponse, error)

	// PostGroupcallsWithBodyWithResponse request with any body
	PostGroupcallsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupcallsResponse, error)

	PostGroupcallsWithResponse(ctx context.Context, body PostGroupcallsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupcallsResponse, error)

	// DeleteGroupcallsIdWithResponse request
	DeleteGroupcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGroupcallsIdResponse, error)

	// GetGroupcallsIdWithResponse request
	GetGroupcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGroupcallsIdResponse, error)

	// PostGroupcallsIdHangupWithResponse request
	PostGroupcallsIdHangupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostGroupcallsIdHangupResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetMessagesWithResponse request
	GetMessagesWithResponse(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error)

	// PostMessagesWithBodyWithResponse request with any body
	PostMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error)

	PostMessagesWithResponse(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error)

	// DeleteMessagesIdWithResponse request
	DeleteMessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMessagesIdResponse, error)

	// GetMessagesIdWithResponse request
	GetMessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMessagesIdResponse, error)

	// GetNumbersWithResponse request
	GetNumbersWithResponse(ctx context.Context, params *GetNumbersParams, reqEditors ...RequestEditorFn) (*GetNumbersResponse, error)

	// PostNumbersWithBodyWithResponse request with any body
	PostNumbersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNumbersResponse, error)

	PostNumbersWithResponse(ctx context.Context, body PostNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNumbersResponse, error)

	// PostNumbersRenewWithBodyWithResponse request with any body
	PostNumbersRenewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNumbersRenewResponse, error)

	PostNumbersRenewWithResponse(ctx context.Context, body PostNumbersRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNumbersRenewResponse, error)

	// DeleteNumbersIdWithResponse request
	DeleteNumbersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNumbersIdResponse, error)

	// GetNumbersIdWithResponse request
	GetNumbersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNumbersIdResponse, error)

	// PutNumbersIdWithBodyWithResponse request with any body
	PutNumbersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNumbersIdResponse, error)

	PutNumbersIdWithResponse(ctx context.Context, id string, body PutNumbersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNumbersIdResponse, error)

	// PutNumbersIdFlowIdsWithBodyWithResponse request with any body
	PutNumbersIdFlowIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNumbersIdFlowIdsResponse, error)

	PutNumbersIdFlowIdsWithResponse(ctx context.Context, id string, body PutNumbersIdFlowIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNumbersIdFlowIdsResponse, error)

	// GetOutdialsWithResponse request
	GetOutdialsWithResponse(ctx context.Context, params *GetOutdialsParams, reqEditors ...RequestEditorFn) (*GetOutdialsResponse, error)

	// PostOutdialsWithBodyWithResponse request with any body
	PostOutdialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutdialsResponse, error)

	PostOutdialsWithResponse(ctx context.Context, body PostOutdialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutdialsResponse, error)

	// DeleteOutdialsIdWithResponse request
	DeleteOutdialsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOutdialsIdResponse, error)

	// GetOutdialsIdWithResponse request
	GetOutdialsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOutdialsIdResponse, error)

	// PutOutdialsIdWithBodyWithResponse request with any body
	PutOutdialsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutdialsIdResponse, error)

	PutOutdialsIdWithResponse(ctx context.Context, id string, body PutOutdialsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutdialsIdResponse, error)

	// PutOutdialsIdCampaignIdWithBodyWithResponse request with any body
	PutOutdialsIdCampaignIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutdialsIdCampaignIdResponse, error)

	PutOutdialsIdCampaignIdWithResponse(ctx context.Context, id string, body PutOutdialsIdCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutdialsIdCampaignIdResponse, error)

	// PutOutdialsIdDataWithBodyWithResponse request with any body
	PutOutdialsIdDataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutdialsIdDataResponse, error)

	PutOutdialsIdDataWithResponse(ctx context.Context, id string, body PutOutdialsIdDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutdialsIdDataResponse, error)

	// GetOutdialsIdTargetsWithResponse request
	GetOutdialsIdTargetsWithResponse(ctx context.Context, id string, params *GetOutdialsIdTargetsParams, reqEditors ...RequestEditorFn) (*GetOutdialsIdTargetsResponse, error)

	// PostOutdialsIdTargetsWithBodyWithResponse request with any body
	PostOutdialsIdTargetsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutdialsIdTargetsResponse, error)

	PostOutdialsIdTargetsWithResponse(ctx context.Context, id string, body PostOutdialsIdTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutdialsIdTargetsResponse, error)

	// DeleteOutdialsIdTargetsTargetIdWithResponse request
	DeleteOutdialsIdTargetsTargetIdWithResponse(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*DeleteOutdialsIdTargetsTargetIdResponse, error)

	// GetOutdialsIdTargetsTargetIdWithResponse request
	GetOutdialsIdTargetsTargetIdWithResponse(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*GetOutdialsIdTargetsTargetIdResponse, error)

	// GetOutplansWithResponse request
	GetOutplansWithResponse(ctx context.Context, params *GetOutplansParams, reqEditors ...RequestEditorFn) (*GetOutplansResponse, error)

	// PostOutplansWithBodyWithResponse request with any body
	PostOutplansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutplansResponse, error)

	PostOutplansWithResponse(ctx context.Context, body PostOutplansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutplansResponse, error)

	// DeleteOutplansIdWithResponse request
	DeleteOutplansIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOutplansIdResponse, error)

	// GetOutplansIdWithResponse request
	GetOutplansIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOutplansIdResponse, error)

	// PutOutplansIdWithBodyWithResponse request with any body
	PutOutplansIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutplansIdResponse, error)

	PutOutplansIdWithResponse(ctx context.Context, id string, body PutOutplansIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutplansIdResponse, error)

	// PutOutplansIdDialInfoWithBodyWithResponse request with any body
	PutOutplansIdDialInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutplansIdDialInfoResponse, error)

	PutOutplansIdDialInfoWithResponse(ctx context.Context, id string, body PutOutplansIdDialInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutplansIdDialInfoResponse, error)

	// GetProvidersWithResponse request
	GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error)

	// PostProvidersWithBodyWithResponse request with any body
	PostProvidersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error)

	PostProvidersWithResponse(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error)

	// DeleteProvidersIdWithResponse request
	DeleteProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteProvidersIdResponse, error)

	// GetProvidersIdWithResponse request
	GetProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProvidersIdResponse, error)

	// PutProvidersIdWithBodyWithResponse request with any body
	PutProvidersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProvidersIdResponse, error)

	PutProvidersIdWithResponse(ctx context.Context, id string, body PutProvidersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProvidersIdResponse, error)

	// GetQueuecallsWithResponse request
	GetQueuecallsWithResponse(ctx context.Context, params *GetQueuecallsParams, reqEditors ...RequestEditorFn) (*GetQueuecallsResponse, error)

	// PostQueuecallsReferenceIdIdKickWithResponse request
	PostQueuecallsReferenceIdIdKickWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostQueuecallsReferenceIdIdKickResponse, error)

	// DeleteQueuecallsIdWithResponse request
	DeleteQueuecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteQueuecallsIdResponse, error)

	// GetQueuecallsIdWithResponse request
	GetQueuecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetQueuecallsIdResponse, error)

	// PostQueuecallsIdKickWithResponse request
	PostQueuecallsIdKickWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostQueuecallsIdKickResponse, error)

	// GetQueuesWithResponse request
	GetQueuesWithResponse(ctx context.Context, params *GetQueuesParams, reqEditors ...RequestEditorFn) (*GetQueuesResponse, error)

	// PostQueuesWithBodyWithResponse request with any body
	PostQueuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueuesResponse, error)

	PostQueuesWithResponse(ctx context.Context, body PostQueuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueuesResponse, error)

	// DeleteQueuesIdWithResponse request
	DeleteQueuesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteQueuesIdResponse, error)

	// GetQueuesIdWithResponse request
	GetQueuesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetQueuesIdResponse, error)

	// PutQueuesIdWithBodyWithResponse request with any body
	PutQueuesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdResponse, error)

	PutQueuesIdWithResponse(ctx context.Context, id string, body PutQueuesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdResponse, error)

	// PutQueuesIdActionsWithBodyWithResponse request with any body
	PutQueuesIdActionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdActionsResponse, error)

	PutQueuesIdActionsWithResponse(ctx context.Context, id string, body PutQueuesIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdActionsResponse, error)

	// PutQueuesIdRoutingMethodWithBodyWithResponse request with any body
	PutQueuesIdRoutingMethodWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdRoutingMethodResponse, error)

	PutQueuesIdRoutingMethodWithResponse(ctx context.Context, id string, body PutQueuesIdRoutingMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdRoutingMethodResponse, error)

	// PutQueuesIdTagIdsWithBodyWithResponse request with any body
	PutQueuesIdTagIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdTagIdsResponse, error)

	PutQueuesIdTagIdsWithResponse(ctx context.Context, id string, body PutQueuesIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdTagIdsResponse, error)

	// GetRecordingfilesIdWithResponse request
	GetRecordingfilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRecordingfilesIdResponse, error)

	// GetRecordingsWithResponse request
	GetRecordingsWithResponse(ctx context.Context, params *GetRecordingsParams, reqEditors ...RequestEditorFn) (*GetRecordingsResponse, error)

	// DeleteRecordingsIdWithResponse request
	DeleteRecordingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRecordingsIdResponse, error)

	// GetRecordingsIdWithResponse request
	GetRecordingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRecordingsIdResponse, error)

	// GetRoutesWithResponse request
	GetRoutesWithResponse(ctx context.Context, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*GetRoutesResponse, error)

	// PostRoutesWithBodyWithResponse request with any body
	PostRoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRoutesResponse, error)

	PostRoutesWithResponse(ctx context.Context, body PostRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRoutesResponse, error)

	// DeleteRoutesIdWithResponse request
	DeleteRoutesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRoutesIdResponse, error)

	// GetRoutesIdWithResponse request
	GetRoutesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRoutesIdResponse, error)

	// PutRoutesIdWithBodyWithResponse request with any body
	PutRoutesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRoutesIdResponse, error)

	PutRoutesIdWithResponse(ctx context.Context, id string, body PutRoutesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRoutesIdResponse, error)

	// GetServiceAgentsAgentsWithResponse request
	GetServiceAgentsAgentsWithResponse(ctx context.Context, params *GetServiceAgentsAgentsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsAgentsResponse, error)

	// GetServiceAgentsAgentsIdWithResponse request
	GetServiceAgentsAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsAgentsIdResponse, error)

	// GetServiceAgentsCallsWithResponse request
	GetServiceAgentsCallsWithResponse(ctx context.Context, params *GetServiceAgentsCallsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsCallsResponse, error)

	// GetServiceAgentsCallsIdWithResponse request
	GetServiceAgentsCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsCallsIdResponse, error)

	// GetServiceAgentsChatroommessagesWithResponse request
	GetServiceAgentsChatroommessagesWithResponse(ctx context.Context, params *GetServiceAgentsChatroommessagesParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroommessagesResponse, error)

	// PostServiceAgentsChatroommessagesWithBodyWithResponse request with any body
	PostServiceAgentsChatroommessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroommessagesResponse, error)

	PostServiceAgentsChatroommessagesWithResponse(ctx context.Context, body PostServiceAgentsChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroommessagesResponse, error)

	// DeleteServiceAgentsChatroommessagesIdWithResponse request
	DeleteServiceAgentsChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceAgentsChatroommessagesIdResponse, error)

	// GetServiceAgentsChatroommessagesIdWithResponse request
	GetServiceAgentsChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroommessagesIdResponse, error)

	// GetServiceAgentsChatroomsWithResponse request
	GetServiceAgentsChatroomsWithResponse(ctx context.Context, params *GetServiceAgentsChatroomsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroomsResponse, error)

	// PostServiceAgentsChatroomsWithBodyWithResponse request with any body
	PostServiceAgentsChatroomsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroomsResponse, error)

	PostServiceAgentsChatroomsWithResponse(ctx context.Context, body PostServiceAgentsChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroomsResponse, error)

	// DeleteServiceAgentsChatroomsIdWithResponse request
	DeleteServiceAgentsChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceAgentsChatroomsIdResponse, error)

	// GetServiceAgentsChatroomsIdWithResponse request
	GetServiceAgentsChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroomsIdResponse, error)

	// PutServiceAgentsChatroomsIdWithBodyWithResponse request with any body
	PutServiceAgentsChatroomsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsChatroomsIdResponse, error)

	PutServiceAgentsChatroomsIdWithResponse(ctx context.Context, id string, body PutServiceAgentsChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsChatroomsIdResponse, error)

	// GetServiceAgentsConversationsWithResponse request
	GetServiceAgentsConversationsWithResponse(ctx context.Context, params *GetServiceAgentsConversationsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsConversationsResponse, error)

	// GetServiceAgentsConversationsIdWithResponse request
	GetServiceAgentsConversationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsConversationsIdResponse, error)

	// GetServiceAgentsConversationsIdMessagesWithResponse request
	GetServiceAgentsConversationsIdMessagesWithResponse(ctx context.Context, id string, params *GetServiceAgentsConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsConversationsIdMessagesResponse, error)

	// PostServiceAgentsConversationsIdMessagesWithBodyWithResponse request with any body
	PostServiceAgentsConversationsIdMessagesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsConversationsIdMessagesResponse, error)

	PostServiceAgentsConversationsIdMessagesWithResponse(ctx context.Context, id string, body PostServiceAgentsConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceAgentsConversationsIdMessagesResponse, error)

	// GetServiceAgentsCustomerWithResponse request
	GetServiceAgentsCustomerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceAgentsCustomerResponse, error)

	// GetServiceAgentsExtensionsWithResponse request
	GetServiceAgentsExtensionsWithResponse(ctx context.Context, params *GetServiceAgentsExtensionsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsExtensionsResponse, error)

	// GetServiceAgentsExtensionsIdWithResponse request
	GetServiceAgentsExtensionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsExtensionsIdResponse, error)

	// GetServiceAgentsFilesWithResponse request
	GetServiceAgentsFilesWithResponse(ctx context.Context, params *GetServiceAgentsFilesParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsFilesResponse, error)

	// PostServiceAgentsFilesWithBodyWithResponse request with any body
	PostServiceAgentsFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsFilesResponse, error)

	// DeleteServiceAgentsFilesIdWithResponse request
	DeleteServiceAgentsFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceAgentsFilesIdResponse, error)

	// GetServiceAgentsFilesIdWithResponse request
	GetServiceAgentsFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsFilesIdResponse, error)

	// GetServiceAgentsMeWithResponse request
	GetServiceAgentsMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceAgentsMeResponse, error)

	// PutServiceAgentsMeWithBodyWithResponse request with any body
	PutServiceAgentsMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeResponse, error)

	PutServiceAgentsMeWithResponse(ctx context.Context, body PutServiceAgentsMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeResponse, error)

	// PutServiceAgentsMeAddressesWithBodyWithResponse request with any body
	PutServiceAgentsMeAddressesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeAddressesResponse, error)

	PutServiceAgentsMeAddressesWithResponse(ctx context.Context, body PutServiceAgentsMeAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeAddressesResponse, error)

	// PutServiceAgentsMePasswordWithBodyWithResponse request with any body
	PutServiceAgentsMePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMePasswordResponse, error)

	PutServiceAgentsMePasswordWithResponse(ctx context.Context, body PutServiceAgentsMePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMePasswordResponse, error)

	// PutServiceAgentsMeStatusWithBodyWithResponse request with any body
	PutServiceAgentsMeStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeStatusResponse, error)

	PutServiceAgentsMeStatusWithResponse(ctx context.Context, body PutServiceAgentsMeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeStatusResponse, error)

	// GetServiceAgentsWsWithResponse request
	GetServiceAgentsWsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceAgentsWsResponse, error)

	// GetStorageAccountWithResponse request
	GetStorageAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageAccountResponse, error)

	// GetStorageAccountsWithResponse request
	GetStorageAccountsWithResponse(ctx context.Context, params *GetStorageAccountsParams, reqEditors ...RequestEditorFn) (*GetStorageAccountsResponse, error)

	// PostStorageAccountsWithBodyWithResponse request with any body
	PostStorageAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStorageAccountsResponse, error)

	PostStorageAccountsWithResponse(ctx context.Context, body PostStorageAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStorageAccountsResponse, error)

	// DeleteStorageAccountsIdWithResponse request
	DeleteStorageAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStorageAccountsIdResponse, error)

	// GetStorageAccountsIdWithResponse request
	GetStorageAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStorageAccountsIdResponse, error)

	// GetStorageFilesWithResponse request
	GetStorageFilesWithResponse(ctx context.Context, params *GetStorageFilesParams, reqEditors ...RequestEditorFn) (*GetStorageFilesResponse, error)

	// PostStorageFilesWithBodyWithResponse request with any body
	PostStorageFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStorageFilesResponse, error)

	// DeleteStorageFilesIdWithResponse request
	DeleteStorageFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStorageFilesIdResponse, error)

	// GetStorageFilesIdWithResponse request
	GetStorageFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStorageFilesIdResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// PostTagsWithBodyWithResponse request with any body
	PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	// DeleteTagsIdWithResponse request
	DeleteTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTagsIdResponse, error)

	// GetTagsIdWithResponse request
	GetTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTagsIdResponse, error)

	// PutTagsIdWithBodyWithResponse request with any body
	PutTagsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTagsIdResponse, error)

	PutTagsIdWithResponse(ctx context.Context, id string, body PutTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTagsIdResponse, error)

	// GetTranscribesWithResponse request
	GetTranscribesWithResponse(ctx context.Context, params *GetTranscribesParams, reqEditors ...RequestEditorFn) (*GetTranscribesResponse, error)

	// PostTranscribesWithBodyWithResponse request with any body
	PostTranscribesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranscribesResponse, error)

	PostTranscribesWithResponse(ctx context.Context, body PostTranscribesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTranscribesResponse, error)

	// DeleteTranscribesIdWithResponse request
	DeleteTranscribesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTranscribesIdResponse, error)

	// GetTranscribesIdWithResponse request
	GetTranscribesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTranscribesIdResponse, error)

	// PostTranscribesIdStopWithResponse request
	PostTranscribesIdStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostTranscribesIdStopResponse, error)

	// GetTranscriptsWithResponse request
	GetTranscriptsWithResponse(ctx context.Context, params *GetTranscriptsParams, reqEditors ...RequestEditorFn) (*GetTranscriptsResponse, error)

	// PostTransfersWithBodyWithResponse request with any body
	PostTransfersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransfersResponse, error)

	PostTransfersWithResponse(ctx context.Context, body PostTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransfersResponse, error)

	// GetTrunksWithResponse request
	GetTrunksWithResponse(ctx context.Context, params *GetTrunksParams, reqEditors ...RequestEditorFn) (*GetTrunksResponse, error)

	// PostTrunksWithBodyWithResponse request with any body
	PostTrunksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTrunksResponse, error)

	PostTrunksWithResponse(ctx context.Context, body PostTrunksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTrunksResponse, error)

	// DeleteTrunksIdWithResponse request
	DeleteTrunksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTrunksIdResponse, error)

	// GetTrunksIdWithResponse request
	GetTrunksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTrunksIdResponse, error)

	// PutTrunksIdWithBodyWithResponse request with any body
	PutTrunksIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrunksIdResponse, error)

	PutTrunksIdWithResponse(ctx context.Context, id string, body PutTrunksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrunksIdResponse, error)

	// GetWsWithResponse request
	GetWsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsResponse, error)
}

type GetAccesskeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                     `json:"next_page_token,omitempty"`
		Result        *[]CustomerManagerAccesskey `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccesskeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccesskeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccesskeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerAccesskey
}

// Status returns HTTPResponse.Status
func (r PostAccesskeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccesskeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccesskeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccesskeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccesskeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccesskeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerAccesskey
}

// Status returns HTTPResponse.Status
func (r GetAccesskeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccesskeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccesskeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerAccesskey
}

// Status returns HTTPResponse.Status
func (r PutAccesskeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccesskeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]FlowManagerActiveflow `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetActiveflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActiveflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlowManagerActiveflow
}

// Status returns HTTPResponse.Status
func (r PostActiveflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActiveflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActiveflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteActiveflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActiveflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveflowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerActiveflow
}

// Status returns HTTPResponse.Status
func (r GetActiveflowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveflowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActiveflowsIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerActiveflow
}

// Status returns HTTPResponse.Status
func (r PostActiveflowsIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActiveflowsIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string              `json:"next_page_token,omitempty"`
		Result        *[]AgentManagerAgent `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PostAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r DeleteAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r GetAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAgentsIdTagIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutAgentsIdTagIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAgentsIdTagIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailableNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *[]NumberManagerAvailableNumber `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAvailableNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailableNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]BillingManagerAccount `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBillingAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostBillingAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBillingAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r DeleteBillingAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBillingAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r GetBillingAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBillingAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PutBillingAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBillingAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingAccountsIdBalanceAddForceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostBillingAccountsIdBalanceAddForceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingAccountsIdBalanceAddForceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingAccountsIdBalanceSubtractForceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostBillingAccountsIdBalanceSubtractForceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingAccountsIdBalanceSubtractForceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBillingAccountsIdPaymentInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingManagerAccount
}

// Status returns HTTPResponse.Status
func (r PutBillingAccountsIdPaymentInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBillingAccountsIdPaymentInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]BillingManagerBilling `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBillingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string            `json:"next_page_token,omitempty"`
		Result        *[]CallManagerCall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Calls      *[]CallManagerCall      `json:"calls,omitempty"`
		Groupcalls *[]CallManagerGroupcall `json:"groupcalls,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostCallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r GetCallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdHangupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r PostCallsIdHangupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdHangupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdHoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdHoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdHoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdHoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdHoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdHoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallsIdMediaStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCallsIdMediaStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallsIdMediaStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdMohResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdMohResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdMohResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdMohResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdMohResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdMohResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallsIdSilenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallsIdSilenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallsIdSilenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdSilenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdSilenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdSilenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallsIdTalkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallsIdTalkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallsIdTalkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaigncallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCampaigncallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaigncallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaigncallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaigncall
}

// Status returns HTTPResponse.Status
func (r DeleteCampaigncallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaigncallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaigncallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaigncall
}

// Status returns HTTPResponse.Status
func (r GetCampaigncallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaigncallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                    `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerCampaign `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PostCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r DeleteCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r GetCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCampaignsIdCampaigncallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCampaignsIdCampaigncallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignsIdCampaigncallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdNextCampaignIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdNextCampaignIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdNextCampaignIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdResourceInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdResourceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdResourceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdServiceLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdServiceLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdServiceLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCampaignsIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerCampaign
}

// Status returns HTTPResponse.Status
func (r PutCampaignsIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCampaignsIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotcallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                      `json:"next_page_token,omitempty"`
		Result        *[]ChatbotManagerChatbotcall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatbotcallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotcallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatbotcallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbotcall
}

// Status returns HTTPResponse.Status
func (r DeleteChatbotcallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatbotcallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotcallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbotcall
}

// Status returns HTTPResponse.Status
func (r GetChatbotcallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotcallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]ChatbotManagerChatbot `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatbotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatbotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r PostChatbotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatbotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatbotsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r DeleteChatbotsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatbotsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatbotsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r GetChatbotsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatbotsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatbotsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatbotManagerChatbot
}

// Status returns HTTPResponse.Status
func (r PutChatbotsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatbotsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatmessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                   `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerMessagechat `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatmessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatmessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatmessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechat
}

// Status returns HTTPResponse.Status
func (r PostChatmessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatmessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatmessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechat
}

// Status returns HTTPResponse.Status
func (r DeleteChatmessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatmessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatmessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechat
}

// Status returns HTTPResponse.Status
func (r GetChatmessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatmessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroommessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                       `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatroommessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroommessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatroommessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r PostChatroommessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatroommessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatroommessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r DeleteChatroommessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatroommessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroommessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r GetChatroommessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroommessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerChatroom `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatroomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatroomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r PostChatroomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatroomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r DeleteChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r GetChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r PutChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string            `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerChat `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PostChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r DeleteChatsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChatsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r GetChatsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChatsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PutChatsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChatsIdParticipantIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PostChatsIdParticipantIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChatsIdParticipantIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChatsIdParticipantIdsParticipantIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r DeleteChatsIdParticipantIdsParticipantIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChatsIdParticipantIdsParticipantIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChatsIdRoomOwnerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChat
}

// Status returns HTTPResponse.Status
func (r PutChatsIdRoomOwnerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChatsIdRoomOwnerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencecallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                            `json:"next_page_token,omitempty"`
		Result        *[]ConferenceManagerConferencecall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConferencecallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencecallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConferencecallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConferencecall
}

// Status returns HTTPResponse.Status
func (r DeleteConferencecallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConferencecallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencecallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConferencecall
}

// Status returns HTTPResponse.Status
func (r GetConferencecallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencecallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]ConferenceManagerConference `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r PostConferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConferencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r DeleteConferencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConferencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r GetConferencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConferencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConferenceManagerConference
}

// Status returns HTTPResponse.Status
func (r PutConferencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConferencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConferencesIdMediaStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConferencesIdMediaStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConferencesIdMediaStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdRecordingStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdRecordingStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdRecordingStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdRecordingStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdRecordingStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdRecordingStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdTranscribeStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdTranscribeStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdTranscribeStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConferencesIdTranscribeStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConferencesIdTranscribeStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConferencesIdTranscribeStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                       `json:"next_page_token,omitempty"`
		Result        *[]ConversationManagerAccount `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostConversationAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConversationAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerAccount
}

// Status returns HTTPResponse.Status
func (r DeleteConversationAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConversationAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerAccount
}

// Status returns HTTPResponse.Status
func (r GetConversationAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConversationAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerAccount
}

// Status returns HTTPResponse.Status
func (r PutConversationAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConversationAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                            `json:"next_page_token,omitempty"`
		Result        *[]ConversationManagerConversation `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerConversation
}

// Status returns HTTPResponse.Status
func (r GetConversationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConversationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerConversation
}

// Status returns HTTPResponse.Status
func (r PutConversationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConversationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationsIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                       `json:"next_page_token,omitempty"`
		Result        *[]ConversationManagerMessage `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConversationsIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationsIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConversationsIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerMessage
}

// Status returns HTTPResponse.Status
func (r PostConversationsIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConversationsIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r GetCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r PutCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomerBillingAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r PutCustomerBillingAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomerBillingAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                    `json:"next_page_token,omitempty"`
		Result        *[]CustomerManagerCustomer `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r PostCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r DeleteCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r PutCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomersIdBillingAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r PutCustomersIdBillingAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomersIdBillingAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                      `json:"next_page_token,omitempty"`
		Result        *[]RegistrarManagerExtension `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerExtension
}

// Status returns HTTPResponse.Status
func (r PostExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExtensionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerExtension
}

// Status returns HTTPResponse.Status
func (r DeleteExtensionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExtensionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExtensionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerExtension
}

// Status returns HTTPResponse.Status
func (r GetExtensionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExtensionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutExtensionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerExtension
}

// Status returns HTTPResponse.Status
func (r PutExtensionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutExtensionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string               `json:"next_page_token,omitempty"`
		Result        *[]StorageManagerFile `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r PostFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r DeleteFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r GetFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string            `json:"next_page_token,omitempty"`
		Result        *[]FlowManagerFlow `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerFlow
}

// Status returns HTTPResponse.Status
func (r PostFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerFlow
}

// Status returns HTTPResponse.Status
func (r DeleteFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerFlow
}

// Status returns HTTPResponse.Status
func (r GetFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowManagerFlow
}

// Status returns HTTPResponse.Status
func (r PutFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupcallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                 `json:"next_page_token,omitempty"`
		Result        *[]CallManagerGroupcall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGroupcallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupcallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupcallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerGroupcall
}

// Status returns HTTPResponse.Status
func (r PostGroupcallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupcallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupcallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerGroupcall
}

// Status returns HTTPResponse.Status
func (r DeleteGroupcallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupcallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupcallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerGroupcall
}

// Status returns HTTPResponse.Status
func (r GetGroupcallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupcallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupcallsIdHangupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerGroupcall
}

// Status returns HTTPResponse.Status
func (r PostGroupcallsIdHangupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupcallsIdHangupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]MessageManagerMessage `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageManagerMessage
}

// Status returns HTTPResponse.Status
func (r PostMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageManagerMessage
}

// Status returns HTTPResponse.Status
func (r DeleteMessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageManagerMessage
}

// Status returns HTTPResponse.Status
func (r GetMessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                `json:"next_page_token,omitempty"`
		Result        *[]NumberManagerNumber `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberManagerNumber
}

// Status returns HTTPResponse.Status
func (r PostNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNumbersRenewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NumberManagerNumber
}

// Status returns HTTPResponse.Status
func (r PostNumbersRenewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNumbersRenewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNumbersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberManagerNumber
}

// Status returns HTTPResponse.Status
func (r DeleteNumbersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNumbersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNumbersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberManagerNumber
}

// Status returns HTTPResponse.Status
func (r GetNumbersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNumbersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNumbersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberManagerNumber
}

// Status returns HTTPResponse.Status
func (r PutNumbersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNumbersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNumbersIdFlowIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NumberManagerNumber
}

// Status returns HTTPResponse.Status
func (r PutNumbersIdFlowIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNumbersIdFlowIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutdialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]OutdialManagerOutdial `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOutdialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutdialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOutdialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdial
}

// Status returns HTTPResponse.Status
func (r PostOutdialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOutdialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOutdialsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdial
}

// Status returns HTTPResponse.Status
func (r DeleteOutdialsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOutdialsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutdialsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdial
}

// Status returns HTTPResponse.Status
func (r GetOutdialsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutdialsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOutdialsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdial
}

// Status returns HTTPResponse.Status
func (r PutOutdialsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOutdialsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOutdialsIdCampaignIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdial
}

// Status returns HTTPResponse.Status
func (r PutOutdialsIdCampaignIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOutdialsIdCampaignIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOutdialsIdDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdial
}

// Status returns HTTPResponse.Status
func (r PutOutdialsIdDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOutdialsIdDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutdialsIdTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]OutdialManagerOutdialtarget `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOutdialsIdTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutdialsIdTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOutdialsIdTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdialtarget
}

// Status returns HTTPResponse.Status
func (r PostOutdialsIdTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOutdialsIdTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOutdialsIdTargetsTargetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdialtarget
}

// Status returns HTTPResponse.Status
func (r DeleteOutdialsIdTargetsTargetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOutdialsIdTargetsTargetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutdialsIdTargetsTargetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutdialManagerOutdialtarget
}

// Status returns HTTPResponse.Status
func (r GetOutdialsIdTargetsTargetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutdialsIdTargetsTargetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutplansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                   `json:"next_page_token,omitempty"`
		Result        *[]CampaignManagerOutplan `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOutplansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutplansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOutplansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerOutplan
}

// Status returns HTTPResponse.Status
func (r PostOutplansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOutplansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOutplansIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerOutplan
}

// Status returns HTTPResponse.Status
func (r DeleteOutplansIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOutplansIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutplansIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerOutplan
}

// Status returns HTTPResponse.Status
func (r GetOutplansIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutplansIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOutplansIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerOutplan
}

// Status returns HTTPResponse.Status
func (r PutOutplansIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOutplansIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOutplansIdDialInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CampaignManagerOutplan
}

// Status returns HTTPResponse.Status
func (r PutOutplansIdDialInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOutplansIdDialInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                 `json:"next_page_token,omitempty"`
		Result        *[]RouteManagerProvider `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerProvider
}

// Status returns HTTPResponse.Status
func (r PostProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProvidersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerProvider
}

// Status returns HTTPResponse.Status
func (r DeleteProvidersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProvidersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerProvider
}

// Status returns HTTPResponse.Status
func (r GetProvidersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProvidersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerProvider
}

// Status returns HTTPResponse.Status
func (r PutProvidersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProvidersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueuecallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]QueueManagerQueuecall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetQueuecallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueuecallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueuecallsReferenceIdIdKickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueuecall
}

// Status returns HTTPResponse.Status
func (r PostQueuecallsReferenceIdIdKickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueuecallsReferenceIdIdKickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteQueuecallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueuecall
}

// Status returns HTTPResponse.Status
func (r DeleteQueuecallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteQueuecallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueuecallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueuecall
}

// Status returns HTTPResponse.Status
func (r GetQueuecallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueuecallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueuecallsIdKickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueuecall
}

// Status returns HTTPResponse.Status
func (r PostQueuecallsIdKickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueuecallsIdKickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string              `json:"next_page_token,omitempty"`
		Result        *[]QueueManagerQueue `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetQueuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostQueuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r PostQueuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostQueuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteQueuesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r DeleteQueuesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteQueuesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueuesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r GetQueuesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueuesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutQueuesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r PutQueuesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutQueuesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutQueuesIdActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r PutQueuesIdActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutQueuesIdActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutQueuesIdRoutingMethodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r PutQueuesIdRoutingMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutQueuesIdRoutingMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutQueuesIdTagIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueueManagerQueue
}

// Status returns HTTPResponse.Status
func (r PutQueuesIdTagIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutQueuesIdTagIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecordingfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON307      *string
	JSON400      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRecordingfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecordingfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecordingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                 `json:"next_page_token,omitempty"`
		Result        *[]CallManagerRecording `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRecordingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecordingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerRecording
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecordingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerRecording
}

// Status returns HTTPResponse.Status
func (r GetRecordingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecordingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string              `json:"next_page_token,omitempty"`
		Result        *[]RouteManagerRoute `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerRoute
}

// Status returns HTTPResponse.Status
func (r PostRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoutesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerRoute
}

// Status returns HTTPResponse.Status
func (r DeleteRoutesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoutesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoutesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerRoute
}

// Status returns HTTPResponse.Status
func (r GetRoutesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoutesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRoutesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RouteManagerRoute
}

// Status returns HTTPResponse.Status
func (r PutRoutesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRoutesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string              `json:"next_page_token,omitempty"`
		Result        *[]AgentManagerAgent `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsAgentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsAgentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsAgentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsCallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string            `json:"next_page_token,omitempty"`
		Result        *[]CallManagerCall `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsCallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsCallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsCallsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallManagerCall
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsCallsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsCallsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsChatroommessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                       `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsChatroommessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsChatroommessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceAgentsChatroommessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r PostServiceAgentsChatroommessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceAgentsChatroommessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceAgentsChatroommessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r DeleteServiceAgentsChatroommessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceAgentsChatroommessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsChatroommessagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerMessagechatroom
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsChatroommessagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsChatroommessagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsChatroomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                `json:"next_page_token,omitempty"`
		Result        *[]ChatManagerChatroom `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsChatroomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsChatroomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceAgentsChatroomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r PostServiceAgentsChatroomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceAgentsChatroomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceAgentsChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r DeleteServiceAgentsChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceAgentsChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceAgentsChatroomsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatManagerChatroom
}

// Status returns HTTPResponse.Status
func (r PutServiceAgentsChatroomsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceAgentsChatroomsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                            `json:"next_page_token,omitempty"`
		Result        *[]ConversationManagerConversation `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsConversationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerConversation
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsConversationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsConversationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsConversationsIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                       `json:"next_page_token,omitempty"`
		Result        *[]ConversationManagerMessage `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsConversationsIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsConversationsIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceAgentsConversationsIdMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationManagerMessage
}

// Status returns HTTPResponse.Status
func (r PostServiceAgentsConversationsIdMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceAgentsConversationsIdMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerManagerCustomer
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                      `json:"next_page_token,omitempty"`
		Result        *[]RegistrarManagerExtension `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsExtensionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerExtension
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsExtensionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsExtensionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string               `json:"next_page_token,omitempty"`
		Result        *[]StorageManagerFile `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceAgentsFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r PostServiceAgentsFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceAgentsFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceAgentsFilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r DeleteServiceAgentsFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceAgentsFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsFilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceAgentsMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutServiceAgentsMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceAgentsMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceAgentsMeAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutServiceAgentsMeAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceAgentsMeAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceAgentsMePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutServiceAgentsMePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceAgentsMePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceAgentsMeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentManagerAgent
}

// Status returns HTTPResponse.Status
func (r PutServiceAgentsMeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceAgentsMeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAgentsWsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceAgentsWsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAgentsWsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerAccount
}

// Status returns HTTPResponse.Status
func (r GetStorageAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]StorageManagerAccount `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStorageAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStorageAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerAccount
}

// Status returns HTTPResponse.Status
func (r PostStorageAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStorageAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerAccount
}

// Status returns HTTPResponse.Status
func (r DeleteStorageAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerAccount
}

// Status returns HTTPResponse.Status
func (r GetStorageAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string               `json:"next_page_token,omitempty"`
		Result        *[]StorageManagerFile `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStorageFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStorageFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r PostStorageFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStorageFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStorageFilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r DeleteStorageFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStorageFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageFilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageManagerFile
}

// Status returns HTTPResponse.Status
func (r GetStorageFilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageFilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string          `json:"next_page_token,omitempty"`
		Result        *[]TagManagerTag `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagManagerTag
}

// Status returns HTTPResponse.Status
func (r PostTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagManagerTag
}

// Status returns HTTPResponse.Status
func (r DeleteTagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagManagerTag
}

// Status returns HTTPResponse.Status
func (r GetTagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagManagerTag
}

// Status returns HTTPResponse.Status
func (r PutTagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTranscribesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]TranscribeManagerTranscribe `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTranscribesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTranscribesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTranscribesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TranscribeManagerTranscribe
}

// Status returns HTTPResponse.Status
func (r PostTranscribesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTranscribesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTranscribesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TranscribeManagerTranscribe
}

// Status returns HTTPResponse.Status
func (r DeleteTranscribesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTranscribesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTranscribesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TranscribeManagerTranscribe
}

// Status returns HTTPResponse.Status
func (r GetTranscribesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTranscribesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTranscribesIdStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TranscribeManagerTranscribe
}

// Status returns HTTPResponse.Status
func (r PostTranscribesIdStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTranscribesIdStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTranscriptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                        `json:"next_page_token,omitempty"`
		Result        *[]TranscribeManagerTranscript `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTranscriptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTranscriptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransfersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransferManagerTransfer
}

// Status returns HTTPResponse.Status
func (r PostTransfersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransfersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrunksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// NextPageToken The token for next pagination.
		NextPageToken *string                  `json:"next_page_token,omitempty"`
		Result        *[]RegistrarManagerTrunk `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTrunksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrunksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTrunksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerTrunk
}

// Status returns HTTPResponse.Status
func (r PostTrunksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTrunksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTrunksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerTrunk
}

// Status returns HTTPResponse.Status
func (r DeleteTrunksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTrunksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrunksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerTrunk
}

// Status returns HTTPResponse.Status
func (r GetTrunksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrunksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTrunksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrarManagerTrunk
}

// Status returns HTTPResponse.Status
func (r PutTrunksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTrunksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccesskeysWithResponse request returning *GetAccesskeysResponse
func (c *ClientWithResponses) GetAccesskeysWithResponse(ctx context.Context, params *GetAccesskeysParams, reqEditors ...RequestEditorFn) (*GetAccesskeysResponse, error) {
	rsp, err := c.GetAccesskeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccesskeysResponse(rsp)
}

// PostAccesskeysWithBodyWithResponse request with arbitrary body returning *PostAccesskeysResponse
func (c *ClientWithResponses) PostAccesskeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error) {
	rsp, err := c.PostAccesskeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccesskeysResponse(rsp)
}

func (c *ClientWithResponses) PostAccesskeysWithResponse(ctx context.Context, body PostAccesskeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccesskeysResponse, error) {
	rsp, err := c.PostAccesskeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccesskeysResponse(rsp)
}

// DeleteAccesskeysIdWithResponse request returning *DeleteAccesskeysIdResponse
func (c *ClientWithResponses) DeleteAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAccesskeysIdResponse, error) {
	rsp, err := c.DeleteAccesskeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccesskeysIdResponse(rsp)
}

// GetAccesskeysIdWithResponse request returning *GetAccesskeysIdResponse
func (c *ClientWithResponses) GetAccesskeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAccesskeysIdResponse, error) {
	rsp, err := c.GetAccesskeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccesskeysIdResponse(rsp)
}

// PutAccesskeysIdWithBodyWithResponse request with arbitrary body returning *PutAccesskeysIdResponse
func (c *ClientWithResponses) PutAccesskeysIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error) {
	rsp, err := c.PutAccesskeysIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccesskeysIdResponse(rsp)
}

func (c *ClientWithResponses) PutAccesskeysIdWithResponse(ctx context.Context, id string, body PutAccesskeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccesskeysIdResponse, error) {
	rsp, err := c.PutAccesskeysId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccesskeysIdResponse(rsp)
}

// GetActiveflowsWithResponse request returning *GetActiveflowsResponse
func (c *ClientWithResponses) GetActiveflowsWithResponse(ctx context.Context, params *GetActiveflowsParams, reqEditors ...RequestEditorFn) (*GetActiveflowsResponse, error) {
	rsp, err := c.GetActiveflows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveflowsResponse(rsp)
}

// PostActiveflowsWithBodyWithResponse request with arbitrary body returning *PostActiveflowsResponse
func (c *ClientWithResponses) PostActiveflowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error) {
	rsp, err := c.PostActiveflowsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveflowsResponse(rsp)
}

func (c *ClientWithResponses) PostActiveflowsWithResponse(ctx context.Context, body PostActiveflowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActiveflowsResponse, error) {
	rsp, err := c.PostActiveflows(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveflowsResponse(rsp)
}

// DeleteActiveflowsIdWithResponse request returning *DeleteActiveflowsIdResponse
func (c *ClientWithResponses) DeleteActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteActiveflowsIdResponse, error) {
	rsp, err := c.DeleteActiveflowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActiveflowsIdResponse(rsp)
}

// GetActiveflowsIdWithResponse request returning *GetActiveflowsIdResponse
func (c *ClientWithResponses) GetActiveflowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetActiveflowsIdResponse, error) {
	rsp, err := c.GetActiveflowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveflowsIdResponse(rsp)
}

// PostActiveflowsIdStopWithResponse request returning *PostActiveflowsIdStopResponse
func (c *ClientWithResponses) PostActiveflowsIdStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostActiveflowsIdStopResponse, error) {
	rsp, err := c.PostActiveflowsIdStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveflowsIdStopResponse(rsp)
}

// GetAgentsWithResponse request returning *GetAgentsResponse
func (c *ClientWithResponses) GetAgentsWithResponse(ctx context.Context, params *GetAgentsParams, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error) {
	rsp, err := c.GetAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsResponse(rsp)
}

// PostAgentsWithBodyWithResponse request with arbitrary body returning *PostAgentsResponse
func (c *ClientWithResponses) PostAgentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error) {
	rsp, err := c.PostAgentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAgentsResponse(rsp)
}

func (c *ClientWithResponses) PostAgentsWithResponse(ctx context.Context, body PostAgentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAgentsResponse, error) {
	rsp, err := c.PostAgents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAgentsResponse(rsp)
}

// DeleteAgentsIdWithResponse request returning *DeleteAgentsIdResponse
func (c *ClientWithResponses) DeleteAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAgentsIdResponse, error) {
	rsp, err := c.DeleteAgentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentsIdResponse(rsp)
}

// GetAgentsIdWithResponse request returning *GetAgentsIdResponse
func (c *ClientWithResponses) GetAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAgentsIdResponse, error) {
	rsp, err := c.GetAgentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsIdResponse(rsp)
}

// PutAgentsIdWithBodyWithResponse request with arbitrary body returning *PutAgentsIdResponse
func (c *ClientWithResponses) PutAgentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error) {
	rsp, err := c.PutAgentsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdWithResponse(ctx context.Context, id string, body PutAgentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdResponse, error) {
	rsp, err := c.PutAgentsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdResponse(rsp)
}

// PutAgentsIdAddressesWithBodyWithResponse request with arbitrary body returning *PutAgentsIdAddressesResponse
func (c *ClientWithResponses) PutAgentsIdAddressesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error) {
	rsp, err := c.PutAgentsIdAddressesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdAddressesResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdAddressesWithResponse(ctx context.Context, id string, body PutAgentsIdAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdAddressesResponse, error) {
	rsp, err := c.PutAgentsIdAddresses(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdAddressesResponse(rsp)
}

// PutAgentsIdPasswordWithBodyWithResponse request with arbitrary body returning *PutAgentsIdPasswordResponse
func (c *ClientWithResponses) PutAgentsIdPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error) {
	rsp, err := c.PutAgentsIdPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdPasswordWithResponse(ctx context.Context, id string, body PutAgentsIdPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPasswordResponse, error) {
	rsp, err := c.PutAgentsIdPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPasswordResponse(rsp)
}

// PutAgentsIdPermissionWithBodyWithResponse request with arbitrary body returning *PutAgentsIdPermissionResponse
func (c *ClientWithResponses) PutAgentsIdPermissionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error) {
	rsp, err := c.PutAgentsIdPermissionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPermissionResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdPermissionWithResponse(ctx context.Context, id string, body PutAgentsIdPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdPermissionResponse, error) {
	rsp, err := c.PutAgentsIdPermission(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdPermissionResponse(rsp)
}

// PutAgentsIdStatusWithBodyWithResponse request with arbitrary body returning *PutAgentsIdStatusResponse
func (c *ClientWithResponses) PutAgentsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error) {
	rsp, err := c.PutAgentsIdStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdStatusWithResponse(ctx context.Context, id string, body PutAgentsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdStatusResponse, error) {
	rsp, err := c.PutAgentsIdStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdStatusResponse(rsp)
}

// PutAgentsIdTagIdsWithBodyWithResponse request with arbitrary body returning *PutAgentsIdTagIdsResponse
func (c *ClientWithResponses) PutAgentsIdTagIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error) {
	rsp, err := c.PutAgentsIdTagIdsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdTagIdsResponse(rsp)
}

func (c *ClientWithResponses) PutAgentsIdTagIdsWithResponse(ctx context.Context, id string, body PutAgentsIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAgentsIdTagIdsResponse, error) {
	rsp, err := c.PutAgentsIdTagIds(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAgentsIdTagIdsResponse(rsp)
}

// GetAvailableNumbersWithResponse request returning *GetAvailableNumbersResponse
func (c *ClientWithResponses) GetAvailableNumbersWithResponse(ctx context.Context, params *GetAvailableNumbersParams, reqEditors ...RequestEditorFn) (*GetAvailableNumbersResponse, error) {
	rsp, err := c.GetAvailableNumbers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailableNumbersResponse(rsp)
}

// GetBillingAccountsWithResponse request returning *GetBillingAccountsResponse
func (c *ClientWithResponses) GetBillingAccountsWithResponse(ctx context.Context, params *GetBillingAccountsParams, reqEditors ...RequestEditorFn) (*GetBillingAccountsResponse, error) {
	rsp, err := c.GetBillingAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingAccountsResponse(rsp)
}

// PostBillingAccountsWithBodyWithResponse request with arbitrary body returning *PostBillingAccountsResponse
func (c *ClientWithResponses) PostBillingAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error) {
	rsp, err := c.PostBillingAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostBillingAccountsWithResponse(ctx context.Context, body PostBillingAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsResponse, error) {
	rsp, err := c.PostBillingAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsResponse(rsp)
}

// DeleteBillingAccountsIdWithResponse request returning *DeleteBillingAccountsIdResponse
func (c *ClientWithResponses) DeleteBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBillingAccountsIdResponse, error) {
	rsp, err := c.DeleteBillingAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBillingAccountsIdResponse(rsp)
}

// GetBillingAccountsIdWithResponse request returning *GetBillingAccountsIdResponse
func (c *ClientWithResponses) GetBillingAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBillingAccountsIdResponse, error) {
	rsp, err := c.GetBillingAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingAccountsIdResponse(rsp)
}

// PutBillingAccountsIdWithBodyWithResponse request with arbitrary body returning *PutBillingAccountsIdResponse
func (c *ClientWithResponses) PutBillingAccountsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error) {
	rsp, err := c.PutBillingAccountsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdResponse(rsp)
}

func (c *ClientWithResponses) PutBillingAccountsIdWithResponse(ctx context.Context, id string, body PutBillingAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdResponse, error) {
	rsp, err := c.PutBillingAccountsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdResponse(rsp)
}

// PostBillingAccountsIdBalanceAddForceWithBodyWithResponse request with arbitrary body returning *PostBillingAccountsIdBalanceAddForceResponse
func (c *ClientWithResponses) PostBillingAccountsIdBalanceAddForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceAddForceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceAddForceResponse(rsp)
}

func (c *ClientWithResponses) PostBillingAccountsIdBalanceAddForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceAddForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceAddForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceAddForce(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceAddForceResponse(rsp)
}

// PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse request with arbitrary body returning *PostBillingAccountsIdBalanceSubtractForceResponse
func (c *ClientWithResponses) PostBillingAccountsIdBalanceSubtractForceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceSubtractForceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceSubtractForceResponse(rsp)
}

func (c *ClientWithResponses) PostBillingAccountsIdBalanceSubtractForceWithResponse(ctx context.Context, id string, body PostBillingAccountsIdBalanceSubtractForceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingAccountsIdBalanceSubtractForceResponse, error) {
	rsp, err := c.PostBillingAccountsIdBalanceSubtractForce(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingAccountsIdBalanceSubtractForceResponse(rsp)
}

// PutBillingAccountsIdPaymentInfoWithBodyWithResponse request with arbitrary body returning *PutBillingAccountsIdPaymentInfoResponse
func (c *ClientWithResponses) PutBillingAccountsIdPaymentInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error) {
	rsp, err := c.PutBillingAccountsIdPaymentInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdPaymentInfoResponse(rsp)
}

func (c *ClientWithResponses) PutBillingAccountsIdPaymentInfoWithResponse(ctx context.Context, id string, body PutBillingAccountsIdPaymentInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingAccountsIdPaymentInfoResponse, error) {
	rsp, err := c.PutBillingAccountsIdPaymentInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingAccountsIdPaymentInfoResponse(rsp)
}

// GetBillingsWithResponse request returning *GetBillingsResponse
func (c *ClientWithResponses) GetBillingsWithResponse(ctx context.Context, params *GetBillingsParams, reqEditors ...RequestEditorFn) (*GetBillingsResponse, error) {
	rsp, err := c.GetBillings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingsResponse(rsp)
}

// GetCallsWithResponse request returning *GetCallsResponse
func (c *ClientWithResponses) GetCallsWithResponse(ctx context.Context, params *GetCallsParams, reqEditors ...RequestEditorFn) (*GetCallsResponse, error) {
	rsp, err := c.GetCalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallsResponse(rsp)
}

// PostCallsWithBodyWithResponse request with arbitrary body returning *PostCallsResponse
func (c *ClientWithResponses) PostCallsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsResponse, error) {
	rsp, err := c.PostCallsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsResponse(rsp)
}

func (c *ClientWithResponses) PostCallsWithResponse(ctx context.Context, body PostCallsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsResponse, error) {
	rsp, err := c.PostCalls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsResponse(rsp)
}

// DeleteCallsIdWithResponse request returning *DeleteCallsIdResponse
func (c *ClientWithResponses) DeleteCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdResponse, error) {
	rsp, err := c.DeleteCallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdResponse(rsp)
}

// GetCallsIdWithResponse request returning *GetCallsIdResponse
func (c *ClientWithResponses) GetCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCallsIdResponse, error) {
	rsp, err := c.GetCallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallsIdResponse(rsp)
}

// PostCallsIdHangupWithResponse request returning *PostCallsIdHangupResponse
func (c *ClientWithResponses) PostCallsIdHangupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHangupResponse, error) {
	rsp, err := c.PostCallsIdHangup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdHangupResponse(rsp)
}

// DeleteCallsIdHoldWithResponse request returning *DeleteCallsIdHoldResponse
func (c *ClientWithResponses) DeleteCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdHoldResponse, error) {
	rsp, err := c.DeleteCallsIdHold(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdHoldResponse(rsp)
}

// PostCallsIdHoldWithResponse request returning *PostCallsIdHoldResponse
func (c *ClientWithResponses) PostCallsIdHoldWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdHoldResponse, error) {
	rsp, err := c.PostCallsIdHold(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdHoldResponse(rsp)
}

// GetCallsIdMediaStreamWithResponse request returning *GetCallsIdMediaStreamResponse
func (c *ClientWithResponses) GetCallsIdMediaStreamWithResponse(ctx context.Context, id string, params *GetCallsIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetCallsIdMediaStreamResponse, error) {
	rsp, err := c.GetCallsIdMediaStream(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallsIdMediaStreamResponse(rsp)
}

// DeleteCallsIdMohWithResponse request returning *DeleteCallsIdMohResponse
func (c *ClientWithResponses) DeleteCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdMohResponse, error) {
	rsp, err := c.DeleteCallsIdMoh(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdMohResponse(rsp)
}

// PostCallsIdMohWithResponse request returning *PostCallsIdMohResponse
func (c *ClientWithResponses) PostCallsIdMohWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdMohResponse, error) {
	rsp, err := c.PostCallsIdMoh(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdMohResponse(rsp)
}

// DeleteCallsIdMuteWithBodyWithResponse request with arbitrary body returning *DeleteCallsIdMuteResponse
func (c *ClientWithResponses) DeleteCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error) {
	rsp, err := c.DeleteCallsIdMuteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdMuteResponse(rsp)
}

func (c *ClientWithResponses) DeleteCallsIdMuteWithResponse(ctx context.Context, id string, body DeleteCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCallsIdMuteResponse, error) {
	rsp, err := c.DeleteCallsIdMute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdMuteResponse(rsp)
}

// PostCallsIdMuteWithBodyWithResponse request with arbitrary body returning *PostCallsIdMuteResponse
func (c *ClientWithResponses) PostCallsIdMuteWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error) {
	rsp, err := c.PostCallsIdMuteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdMuteResponse(rsp)
}

func (c *ClientWithResponses) PostCallsIdMuteWithResponse(ctx context.Context, id string, body PostCallsIdMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdMuteResponse, error) {
	rsp, err := c.PostCallsIdMute(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdMuteResponse(rsp)
}

// DeleteCallsIdSilenceWithResponse request returning *DeleteCallsIdSilenceResponse
func (c *ClientWithResponses) DeleteCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCallsIdSilenceResponse, error) {
	rsp, err := c.DeleteCallsIdSilence(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallsIdSilenceResponse(rsp)
}

// PostCallsIdSilenceWithResponse request returning *PostCallsIdSilenceResponse
func (c *ClientWithResponses) PostCallsIdSilenceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCallsIdSilenceResponse, error) {
	rsp, err := c.PostCallsIdSilence(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdSilenceResponse(rsp)
}

// PostCallsIdTalkWithBodyWithResponse request with arbitrary body returning *PostCallsIdTalkResponse
func (c *ClientWithResponses) PostCallsIdTalkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error) {
	rsp, err := c.PostCallsIdTalkWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdTalkResponse(rsp)
}

func (c *ClientWithResponses) PostCallsIdTalkWithResponse(ctx context.Context, id string, body PostCallsIdTalkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallsIdTalkResponse, error) {
	rsp, err := c.PostCallsIdTalk(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallsIdTalkResponse(rsp)
}

// GetCampaigncallsWithResponse request returning *GetCampaigncallsResponse
func (c *ClientWithResponses) GetCampaigncallsWithResponse(ctx context.Context, params *GetCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaigncallsResponse, error) {
	rsp, err := c.GetCampaigncalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaigncallsResponse(rsp)
}

// DeleteCampaigncallsIdWithResponse request returning *DeleteCampaigncallsIdResponse
func (c *ClientWithResponses) DeleteCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaigncallsIdResponse, error) {
	rsp, err := c.DeleteCampaigncallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaigncallsIdResponse(rsp)
}

// GetCampaigncallsIdWithResponse request returning *GetCampaigncallsIdResponse
func (c *ClientWithResponses) GetCampaigncallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaigncallsIdResponse, error) {
	rsp, err := c.GetCampaigncallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaigncallsIdResponse(rsp)
}

// GetCampaignsWithResponse request returning *GetCampaignsResponse
func (c *ClientWithResponses) GetCampaignsWithResponse(ctx context.Context, params *GetCampaignsParams, reqEditors ...RequestEditorFn) (*GetCampaignsResponse, error) {
	rsp, err := c.GetCampaigns(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsResponse(rsp)
}

// PostCampaignsWithBodyWithResponse request with arbitrary body returning *PostCampaignsResponse
func (c *ClientWithResponses) PostCampaignsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error) {
	rsp, err := c.PostCampaignsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsResponse(rsp)
}

func (c *ClientWithResponses) PostCampaignsWithResponse(ctx context.Context, body PostCampaignsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCampaignsResponse, error) {
	rsp, err := c.PostCampaigns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCampaignsResponse(rsp)
}

// DeleteCampaignsIdWithResponse request returning *DeleteCampaignsIdResponse
func (c *ClientWithResponses) DeleteCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCampaignsIdResponse, error) {
	rsp, err := c.DeleteCampaignsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCampaignsIdResponse(rsp)
}

// GetCampaignsIdWithResponse request returning *GetCampaignsIdResponse
func (c *ClientWithResponses) GetCampaignsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCampaignsIdResponse, error) {
	rsp, err := c.GetCampaignsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsIdResponse(rsp)
}

// PutCampaignsIdWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdResponse
func (c *ClientWithResponses) PutCampaignsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error) {
	rsp, err := c.PutCampaignsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdWithResponse(ctx context.Context, id string, body PutCampaignsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResponse, error) {
	rsp, err := c.PutCampaignsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResponse(rsp)
}

// PutCampaignsIdActionsWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdActionsResponse
func (c *ClientWithResponses) PutCampaignsIdActionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error) {
	rsp, err := c.PutCampaignsIdActionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdActionsResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdActionsWithResponse(ctx context.Context, id string, body PutCampaignsIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdActionsResponse, error) {
	rsp, err := c.PutCampaignsIdActions(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdActionsResponse(rsp)
}

// GetCampaignsIdCampaigncallsWithResponse request returning *GetCampaignsIdCampaigncallsResponse
func (c *ClientWithResponses) GetCampaignsIdCampaigncallsWithResponse(ctx context.Context, id string, params *GetCampaignsIdCampaigncallsParams, reqEditors ...RequestEditorFn) (*GetCampaignsIdCampaigncallsResponse, error) {
	rsp, err := c.GetCampaignsIdCampaigncalls(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCampaignsIdCampaigncallsResponse(rsp)
}

// PutCampaignsIdNextCampaignIdWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdNextCampaignIdResponse
func (c *ClientWithResponses) PutCampaignsIdNextCampaignIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error) {
	rsp, err := c.PutCampaignsIdNextCampaignIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdNextCampaignIdResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdNextCampaignIdWithResponse(ctx context.Context, id string, body PutCampaignsIdNextCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdNextCampaignIdResponse, error) {
	rsp, err := c.PutCampaignsIdNextCampaignId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdNextCampaignIdResponse(rsp)
}

// PutCampaignsIdResourceInfoWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdResourceInfoResponse
func (c *ClientWithResponses) PutCampaignsIdResourceInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error) {
	rsp, err := c.PutCampaignsIdResourceInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResourceInfoResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdResourceInfoWithResponse(ctx context.Context, id string, body PutCampaignsIdResourceInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdResourceInfoResponse, error) {
	rsp, err := c.PutCampaignsIdResourceInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdResourceInfoResponse(rsp)
}

// PutCampaignsIdServiceLevelWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdServiceLevelResponse
func (c *ClientWithResponses) PutCampaignsIdServiceLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error) {
	rsp, err := c.PutCampaignsIdServiceLevelWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdServiceLevelResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdServiceLevelWithResponse(ctx context.Context, id string, body PutCampaignsIdServiceLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdServiceLevelResponse, error) {
	rsp, err := c.PutCampaignsIdServiceLevel(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdServiceLevelResponse(rsp)
}

// PutCampaignsIdStatusWithBodyWithResponse request with arbitrary body returning *PutCampaignsIdStatusResponse
func (c *ClientWithResponses) PutCampaignsIdStatusWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error) {
	rsp, err := c.PutCampaignsIdStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdStatusResponse(rsp)
}

func (c *ClientWithResponses) PutCampaignsIdStatusWithResponse(ctx context.Context, id string, body PutCampaignsIdStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCampaignsIdStatusResponse, error) {
	rsp, err := c.PutCampaignsIdStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCampaignsIdStatusResponse(rsp)
}

// GetChatbotcallsWithResponse request returning *GetChatbotcallsResponse
func (c *ClientWithResponses) GetChatbotcallsWithResponse(ctx context.Context, params *GetChatbotcallsParams, reqEditors ...RequestEditorFn) (*GetChatbotcallsResponse, error) {
	rsp, err := c.GetChatbotcalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotcallsResponse(rsp)
}

// DeleteChatbotcallsIdWithResponse request returning *DeleteChatbotcallsIdResponse
func (c *ClientWithResponses) DeleteChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotcallsIdResponse, error) {
	rsp, err := c.DeleteChatbotcallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatbotcallsIdResponse(rsp)
}

// GetChatbotcallsIdWithResponse request returning *GetChatbotcallsIdResponse
func (c *ClientWithResponses) GetChatbotcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotcallsIdResponse, error) {
	rsp, err := c.GetChatbotcallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotcallsIdResponse(rsp)
}

// GetChatbotsWithResponse request returning *GetChatbotsResponse
func (c *ClientWithResponses) GetChatbotsWithResponse(ctx context.Context, params *GetChatbotsParams, reqEditors ...RequestEditorFn) (*GetChatbotsResponse, error) {
	rsp, err := c.GetChatbots(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotsResponse(rsp)
}

// PostChatbotsWithBodyWithResponse request with arbitrary body returning *PostChatbotsResponse
func (c *ClientWithResponses) PostChatbotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error) {
	rsp, err := c.PostChatbotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatbotsResponse(rsp)
}

func (c *ClientWithResponses) PostChatbotsWithResponse(ctx context.Context, body PostChatbotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatbotsResponse, error) {
	rsp, err := c.PostChatbots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatbotsResponse(rsp)
}

// DeleteChatbotsIdWithResponse request returning *DeleteChatbotsIdResponse
func (c *ClientWithResponses) DeleteChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatbotsIdResponse, error) {
	rsp, err := c.DeleteChatbotsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatbotsIdResponse(rsp)
}

// GetChatbotsIdWithResponse request returning *GetChatbotsIdResponse
func (c *ClientWithResponses) GetChatbotsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatbotsIdResponse, error) {
	rsp, err := c.GetChatbotsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatbotsIdResponse(rsp)
}

// PutChatbotsIdWithBodyWithResponse request with arbitrary body returning *PutChatbotsIdResponse
func (c *ClientWithResponses) PutChatbotsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error) {
	rsp, err := c.PutChatbotsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatbotsIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatbotsIdWithResponse(ctx context.Context, id string, body PutChatbotsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatbotsIdResponse, error) {
	rsp, err := c.PutChatbotsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatbotsIdResponse(rsp)
}

// GetChatmessagesWithResponse request returning *GetChatmessagesResponse
func (c *ClientWithResponses) GetChatmessagesWithResponse(ctx context.Context, params *GetChatmessagesParams, reqEditors ...RequestEditorFn) (*GetChatmessagesResponse, error) {
	rsp, err := c.GetChatmessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatmessagesResponse(rsp)
}

// PostChatmessagesWithBodyWithResponse request with arbitrary body returning *PostChatmessagesResponse
func (c *ClientWithResponses) PostChatmessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error) {
	rsp, err := c.PostChatmessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatmessagesResponse(rsp)
}

func (c *ClientWithResponses) PostChatmessagesWithResponse(ctx context.Context, body PostChatmessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatmessagesResponse, error) {
	rsp, err := c.PostChatmessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatmessagesResponse(rsp)
}

// DeleteChatmessagesIdWithResponse request returning *DeleteChatmessagesIdResponse
func (c *ClientWithResponses) DeleteChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatmessagesIdResponse, error) {
	rsp, err := c.DeleteChatmessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatmessagesIdResponse(rsp)
}

// GetChatmessagesIdWithResponse request returning *GetChatmessagesIdResponse
func (c *ClientWithResponses) GetChatmessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatmessagesIdResponse, error) {
	rsp, err := c.GetChatmessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatmessagesIdResponse(rsp)
}

// GetChatroommessagesWithResponse request returning *GetChatroommessagesResponse
func (c *ClientWithResponses) GetChatroommessagesWithResponse(ctx context.Context, params *GetChatroommessagesParams, reqEditors ...RequestEditorFn) (*GetChatroommessagesResponse, error) {
	rsp, err := c.GetChatroommessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroommessagesResponse(rsp)
}

// PostChatroommessagesWithBodyWithResponse request with arbitrary body returning *PostChatroommessagesResponse
func (c *ClientWithResponses) PostChatroommessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error) {
	rsp, err := c.PostChatroommessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroommessagesResponse(rsp)
}

func (c *ClientWithResponses) PostChatroommessagesWithResponse(ctx context.Context, body PostChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroommessagesResponse, error) {
	rsp, err := c.PostChatroommessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroommessagesResponse(rsp)
}

// DeleteChatroommessagesIdWithResponse request returning *DeleteChatroommessagesIdResponse
func (c *ClientWithResponses) DeleteChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroommessagesIdResponse, error) {
	rsp, err := c.DeleteChatroommessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatroommessagesIdResponse(rsp)
}

// GetChatroommessagesIdWithResponse request returning *GetChatroommessagesIdResponse
func (c *ClientWithResponses) GetChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroommessagesIdResponse, error) {
	rsp, err := c.GetChatroommessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroommessagesIdResponse(rsp)
}

// GetChatroomsWithResponse request returning *GetChatroomsResponse
func (c *ClientWithResponses) GetChatroomsWithResponse(ctx context.Context, params *GetChatroomsParams, reqEditors ...RequestEditorFn) (*GetChatroomsResponse, error) {
	rsp, err := c.GetChatrooms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroomsResponse(rsp)
}

// PostChatroomsWithBodyWithResponse request with arbitrary body returning *PostChatroomsResponse
func (c *ClientWithResponses) PostChatroomsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error) {
	rsp, err := c.PostChatroomsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroomsResponse(rsp)
}

func (c *ClientWithResponses) PostChatroomsWithResponse(ctx context.Context, body PostChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatroomsResponse, error) {
	rsp, err := c.PostChatrooms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatroomsResponse(rsp)
}

// DeleteChatroomsIdWithResponse request returning *DeleteChatroomsIdResponse
func (c *ClientWithResponses) DeleteChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatroomsIdResponse, error) {
	rsp, err := c.DeleteChatroomsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatroomsIdResponse(rsp)
}

// GetChatroomsIdWithResponse request returning *GetChatroomsIdResponse
func (c *ClientWithResponses) GetChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatroomsIdResponse, error) {
	rsp, err := c.GetChatroomsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatroomsIdResponse(rsp)
}

// PutChatroomsIdWithBodyWithResponse request with arbitrary body returning *PutChatroomsIdResponse
func (c *ClientWithResponses) PutChatroomsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error) {
	rsp, err := c.PutChatroomsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatroomsIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatroomsIdWithResponse(ctx context.Context, id string, body PutChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatroomsIdResponse, error) {
	rsp, err := c.PutChatroomsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatroomsIdResponse(rsp)
}

// GetChatsWithResponse request returning *GetChatsResponse
func (c *ClientWithResponses) GetChatsWithResponse(ctx context.Context, params *GetChatsParams, reqEditors ...RequestEditorFn) (*GetChatsResponse, error) {
	rsp, err := c.GetChats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatsResponse(rsp)
}

// PostChatsWithBodyWithResponse request with arbitrary body returning *PostChatsResponse
func (c *ClientWithResponses) PostChatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsResponse, error) {
	rsp, err := c.PostChatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsResponse(rsp)
}

func (c *ClientWithResponses) PostChatsWithResponse(ctx context.Context, body PostChatsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsResponse, error) {
	rsp, err := c.PostChats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsResponse(rsp)
}

// DeleteChatsIdWithResponse request returning *DeleteChatsIdResponse
func (c *ClientWithResponses) DeleteChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteChatsIdResponse, error) {
	rsp, err := c.DeleteChatsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatsIdResponse(rsp)
}

// GetChatsIdWithResponse request returning *GetChatsIdResponse
func (c *ClientWithResponses) GetChatsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetChatsIdResponse, error) {
	rsp, err := c.GetChatsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChatsIdResponse(rsp)
}

// PutChatsIdWithBodyWithResponse request with arbitrary body returning *PutChatsIdResponse
func (c *ClientWithResponses) PutChatsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error) {
	rsp, err := c.PutChatsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatsIdWithResponse(ctx context.Context, id string, body PutChatsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdResponse, error) {
	rsp, err := c.PutChatsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdResponse(rsp)
}

// PostChatsIdParticipantIdsWithBodyWithResponse request with arbitrary body returning *PostChatsIdParticipantIdsResponse
func (c *ClientWithResponses) PostChatsIdParticipantIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error) {
	rsp, err := c.PostChatsIdParticipantIdsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsIdParticipantIdsResponse(rsp)
}

func (c *ClientWithResponses) PostChatsIdParticipantIdsWithResponse(ctx context.Context, id string, body PostChatsIdParticipantIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChatsIdParticipantIdsResponse, error) {
	rsp, err := c.PostChatsIdParticipantIds(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChatsIdParticipantIdsResponse(rsp)
}

// DeleteChatsIdParticipantIdsParticipantIdWithResponse request returning *DeleteChatsIdParticipantIdsParticipantIdResponse
func (c *ClientWithResponses) DeleteChatsIdParticipantIdsParticipantIdWithResponse(ctx context.Context, id string, participantId string, reqEditors ...RequestEditorFn) (*DeleteChatsIdParticipantIdsParticipantIdResponse, error) {
	rsp, err := c.DeleteChatsIdParticipantIdsParticipantId(ctx, id, participantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChatsIdParticipantIdsParticipantIdResponse(rsp)
}

// PutChatsIdRoomOwnerIdWithBodyWithResponse request with arbitrary body returning *PutChatsIdRoomOwnerIdResponse
func (c *ClientWithResponses) PutChatsIdRoomOwnerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error) {
	rsp, err := c.PutChatsIdRoomOwnerIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdRoomOwnerIdResponse(rsp)
}

func (c *ClientWithResponses) PutChatsIdRoomOwnerIdWithResponse(ctx context.Context, id string, body PutChatsIdRoomOwnerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChatsIdRoomOwnerIdResponse, error) {
	rsp, err := c.PutChatsIdRoomOwnerId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChatsIdRoomOwnerIdResponse(rsp)
}

// GetConferencecallsWithResponse request returning *GetConferencecallsResponse
func (c *ClientWithResponses) GetConferencecallsWithResponse(ctx context.Context, params *GetConferencecallsParams, reqEditors ...RequestEditorFn) (*GetConferencecallsResponse, error) {
	rsp, err := c.GetConferencecalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencecallsResponse(rsp)
}

// DeleteConferencecallsIdWithResponse request returning *DeleteConferencecallsIdResponse
func (c *ClientWithResponses) DeleteConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencecallsIdResponse, error) {
	rsp, err := c.DeleteConferencecallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConferencecallsIdResponse(rsp)
}

// GetConferencecallsIdWithResponse request returning *GetConferencecallsIdResponse
func (c *ClientWithResponses) GetConferencecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencecallsIdResponse, error) {
	rsp, err := c.GetConferencecallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencecallsIdResponse(rsp)
}

// GetConferencesWithResponse request returning *GetConferencesResponse
func (c *ClientWithResponses) GetConferencesWithResponse(ctx context.Context, params *GetConferencesParams, reqEditors ...RequestEditorFn) (*GetConferencesResponse, error) {
	rsp, err := c.GetConferences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencesResponse(rsp)
}

// PostConferencesWithBodyWithResponse request with arbitrary body returning *PostConferencesResponse
func (c *ClientWithResponses) PostConferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error) {
	rsp, err := c.PostConferencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesResponse(rsp)
}

func (c *ClientWithResponses) PostConferencesWithResponse(ctx context.Context, body PostConferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesResponse, error) {
	rsp, err := c.PostConferences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesResponse(rsp)
}

// DeleteConferencesIdWithResponse request returning *DeleteConferencesIdResponse
func (c *ClientWithResponses) DeleteConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConferencesIdResponse, error) {
	rsp, err := c.DeleteConferencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConferencesIdResponse(rsp)
}

// GetConferencesIdWithResponse request returning *GetConferencesIdResponse
func (c *ClientWithResponses) GetConferencesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConferencesIdResponse, error) {
	rsp, err := c.GetConferencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencesIdResponse(rsp)
}

// PutConferencesIdWithBodyWithResponse request with arbitrary body returning *PutConferencesIdResponse
func (c *ClientWithResponses) PutConferencesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error) {
	rsp, err := c.PutConferencesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConferencesIdResponse(rsp)
}

func (c *ClientWithResponses) PutConferencesIdWithResponse(ctx context.Context, id string, body PutConferencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConferencesIdResponse, error) {
	rsp, err := c.PutConferencesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConferencesIdResponse(rsp)
}

// GetConferencesIdMediaStreamWithResponse request returning *GetConferencesIdMediaStreamResponse
func (c *ClientWithResponses) GetConferencesIdMediaStreamWithResponse(ctx context.Context, id string, params *GetConferencesIdMediaStreamParams, reqEditors ...RequestEditorFn) (*GetConferencesIdMediaStreamResponse, error) {
	rsp, err := c.GetConferencesIdMediaStream(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConferencesIdMediaStreamResponse(rsp)
}

// PostConferencesIdRecordingStartWithResponse request returning *PostConferencesIdRecordingStartResponse
func (c *ClientWithResponses) PostConferencesIdRecordingStartWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStartResponse, error) {
	rsp, err := c.PostConferencesIdRecordingStart(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdRecordingStartResponse(rsp)
}

// PostConferencesIdRecordingStopWithResponse request returning *PostConferencesIdRecordingStopResponse
func (c *ClientWithResponses) PostConferencesIdRecordingStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdRecordingStopResponse, error) {
	rsp, err := c.PostConferencesIdRecordingStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdRecordingStopResponse(rsp)
}

// PostConferencesIdTranscribeStartWithBodyWithResponse request with arbitrary body returning *PostConferencesIdTranscribeStartResponse
func (c *ClientWithResponses) PostConferencesIdTranscribeStartWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error) {
	rsp, err := c.PostConferencesIdTranscribeStartWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdTranscribeStartResponse(rsp)
}

func (c *ClientWithResponses) PostConferencesIdTranscribeStartWithResponse(ctx context.Context, id string, body PostConferencesIdTranscribeStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStartResponse, error) {
	rsp, err := c.PostConferencesIdTranscribeStart(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdTranscribeStartResponse(rsp)
}

// PostConferencesIdTranscribeStopWithResponse request returning *PostConferencesIdTranscribeStopResponse
func (c *ClientWithResponses) PostConferencesIdTranscribeStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostConferencesIdTranscribeStopResponse, error) {
	rsp, err := c.PostConferencesIdTranscribeStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConferencesIdTranscribeStopResponse(rsp)
}

// GetConversationAccountsWithResponse request returning *GetConversationAccountsResponse
func (c *ClientWithResponses) GetConversationAccountsWithResponse(ctx context.Context, params *GetConversationAccountsParams, reqEditors ...RequestEditorFn) (*GetConversationAccountsResponse, error) {
	rsp, err := c.GetConversationAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationAccountsResponse(rsp)
}

// PostConversationAccountsWithBodyWithResponse request with arbitrary body returning *PostConversationAccountsResponse
func (c *ClientWithResponses) PostConversationAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationAccountsResponse, error) {
	rsp, err := c.PostConversationAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostConversationAccountsWithResponse(ctx context.Context, body PostConversationAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationAccountsResponse, error) {
	rsp, err := c.PostConversationAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationAccountsResponse(rsp)
}

// DeleteConversationAccountsIdWithResponse request returning *DeleteConversationAccountsIdResponse
func (c *ClientWithResponses) DeleteConversationAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteConversationAccountsIdResponse, error) {
	rsp, err := c.DeleteConversationAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConversationAccountsIdResponse(rsp)
}

// GetConversationAccountsIdWithResponse request returning *GetConversationAccountsIdResponse
func (c *ClientWithResponses) GetConversationAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConversationAccountsIdResponse, error) {
	rsp, err := c.GetConversationAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationAccountsIdResponse(rsp)
}

// PutConversationAccountsIdWithBodyWithResponse request with arbitrary body returning *PutConversationAccountsIdResponse
func (c *ClientWithResponses) PutConversationAccountsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConversationAccountsIdResponse, error) {
	rsp, err := c.PutConversationAccountsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConversationAccountsIdResponse(rsp)
}

func (c *ClientWithResponses) PutConversationAccountsIdWithResponse(ctx context.Context, id string, body PutConversationAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConversationAccountsIdResponse, error) {
	rsp, err := c.PutConversationAccountsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConversationAccountsIdResponse(rsp)
}

// GetConversationsWithResponse request returning *GetConversationsResponse
func (c *ClientWithResponses) GetConversationsWithResponse(ctx context.Context, params *GetConversationsParams, reqEditors ...RequestEditorFn) (*GetConversationsResponse, error) {
	rsp, err := c.GetConversations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsResponse(rsp)
}

// GetConversationsIdWithResponse request returning *GetConversationsIdResponse
func (c *ClientWithResponses) GetConversationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetConversationsIdResponse, error) {
	rsp, err := c.GetConversationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsIdResponse(rsp)
}

// PutConversationsIdWithBodyWithResponse request with arbitrary body returning *PutConversationsIdResponse
func (c *ClientWithResponses) PutConversationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConversationsIdResponse, error) {
	rsp, err := c.PutConversationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConversationsIdResponse(rsp)
}

func (c *ClientWithResponses) PutConversationsIdWithResponse(ctx context.Context, id string, body PutConversationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConversationsIdResponse, error) {
	rsp, err := c.PutConversationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConversationsIdResponse(rsp)
}

// GetConversationsIdMessagesWithResponse request returning *GetConversationsIdMessagesResponse
func (c *ClientWithResponses) GetConversationsIdMessagesWithResponse(ctx context.Context, id string, params *GetConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*GetConversationsIdMessagesResponse, error) {
	rsp, err := c.GetConversationsIdMessages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationsIdMessagesResponse(rsp)
}

// PostConversationsIdMessagesWithBodyWithResponse request with arbitrary body returning *PostConversationsIdMessagesResponse
func (c *ClientWithResponses) PostConversationsIdMessagesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConversationsIdMessagesResponse, error) {
	rsp, err := c.PostConversationsIdMessagesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsIdMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostConversationsIdMessagesWithResponse(ctx context.Context, id string, body PostConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConversationsIdMessagesResponse, error) {
	rsp, err := c.PostConversationsIdMessages(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConversationsIdMessagesResponse(rsp)
}

// GetCustomerWithResponse request returning *GetCustomerResponse
func (c *ClientWithResponses) GetCustomerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error) {
	rsp, err := c.GetCustomer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerResponse(rsp)
}

// PutCustomerWithBodyWithResponse request with arbitrary body returning *PutCustomerResponse
func (c *ClientWithResponses) PutCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error) {
	rsp, err := c.PutCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerResponse(rsp)
}

func (c *ClientWithResponses) PutCustomerWithResponse(ctx context.Context, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error) {
	rsp, err := c.PutCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerResponse(rsp)
}

// PutCustomerBillingAccountIdWithBodyWithResponse request with arbitrary body returning *PutCustomerBillingAccountIdResponse
func (c *ClientWithResponses) PutCustomerBillingAccountIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerBillingAccountIdResponse, error) {
	rsp, err := c.PutCustomerBillingAccountIdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerBillingAccountIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomerBillingAccountIdWithResponse(ctx context.Context, body PutCustomerBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerBillingAccountIdResponse, error) {
	rsp, err := c.PutCustomerBillingAccountId(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerBillingAccountIdResponse(rsp)
}

// GetCustomersWithResponse request returning *GetCustomersResponse
func (c *ClientWithResponses) GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

// PostCustomersWithBodyWithResponse request with arbitrary body returning *PostCustomersResponse
func (c *ClientWithResponses) PostCustomersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersWithResponse(ctx context.Context, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

// DeleteCustomersIdWithResponse request returning *DeleteCustomersIdResponse
func (c *ClientWithResponses) DeleteCustomersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error) {
	rsp, err := c.DeleteCustomersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdResponse(rsp)
}

// GetCustomersIdWithResponse request returning *GetCustomersIdResponse
func (c *ClientWithResponses) GetCustomersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error) {
	rsp, err := c.GetCustomersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdResponse(rsp)
}

// PutCustomersIdWithBodyWithResponse request with arbitrary body returning *PutCustomersIdResponse
func (c *ClientWithResponses) PutCustomersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersIdResponse, error) {
	rsp, err := c.PutCustomersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomersIdWithResponse(ctx context.Context, id string, body PutCustomersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersIdResponse, error) {
	rsp, err := c.PutCustomersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdResponse(rsp)
}

// PutCustomersIdBillingAccountIdWithBodyWithResponse request with arbitrary body returning *PutCustomersIdBillingAccountIdResponse
func (c *ClientWithResponses) PutCustomersIdBillingAccountIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersIdBillingAccountIdResponse, error) {
	rsp, err := c.PutCustomersIdBillingAccountIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdBillingAccountIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomersIdBillingAccountIdWithResponse(ctx context.Context, id string, body PutCustomersIdBillingAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersIdBillingAccountIdResponse, error) {
	rsp, err := c.PutCustomersIdBillingAccountId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersIdBillingAccountIdResponse(rsp)
}

// GetExtensionsWithResponse request returning *GetExtensionsResponse
func (c *ClientWithResponses) GetExtensionsWithResponse(ctx context.Context, params *GetExtensionsParams, reqEditors ...RequestEditorFn) (*GetExtensionsResponse, error) {
	rsp, err := c.GetExtensions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionsResponse(rsp)
}

// PostExtensionsWithBodyWithResponse request with arbitrary body returning *PostExtensionsResponse
func (c *ClientWithResponses) PostExtensionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExtensionsResponse, error) {
	rsp, err := c.PostExtensionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExtensionsResponse(rsp)
}

func (c *ClientWithResponses) PostExtensionsWithResponse(ctx context.Context, body PostExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExtensionsResponse, error) {
	rsp, err := c.PostExtensions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExtensionsResponse(rsp)
}

// DeleteExtensionsIdWithResponse request returning *DeleteExtensionsIdResponse
func (c *ClientWithResponses) DeleteExtensionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteExtensionsIdResponse, error) {
	rsp, err := c.DeleteExtensionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExtensionsIdResponse(rsp)
}

// GetExtensionsIdWithResponse request returning *GetExtensionsIdResponse
func (c *ClientWithResponses) GetExtensionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetExtensionsIdResponse, error) {
	rsp, err := c.GetExtensionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExtensionsIdResponse(rsp)
}

// PutExtensionsIdWithBodyWithResponse request with arbitrary body returning *PutExtensionsIdResponse
func (c *ClientWithResponses) PutExtensionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutExtensionsIdResponse, error) {
	rsp, err := c.PutExtensionsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExtensionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutExtensionsIdWithResponse(ctx context.Context, id string, body PutExtensionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutExtensionsIdResponse, error) {
	rsp, err := c.PutExtensionsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutExtensionsIdResponse(rsp)
}

// GetFilesWithResponse request returning *GetFilesResponse
func (c *ClientWithResponses) GetFilesWithResponse(ctx context.Context, params *GetFilesParams, reqEditors ...RequestEditorFn) (*GetFilesResponse, error) {
	rsp, err := c.GetFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesResponse(rsp)
}

// PostFilesWithBodyWithResponse request with arbitrary body returning *PostFilesResponse
func (c *ClientWithResponses) PostFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilesResponse, error) {
	rsp, err := c.PostFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilesResponse(rsp)
}

// DeleteFilesIdWithResponse request returning *DeleteFilesIdResponse
func (c *ClientWithResponses) DeleteFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFilesIdResponse, error) {
	rsp, err := c.DeleteFilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFilesIdResponse(rsp)
}

// GetFilesIdWithResponse request returning *GetFilesIdResponse
func (c *ClientWithResponses) GetFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFilesIdResponse, error) {
	rsp, err := c.GetFilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesIdResponse(rsp)
}

// GetFlowsWithResponse request returning *GetFlowsResponse
func (c *ClientWithResponses) GetFlowsWithResponse(ctx context.Context, params *GetFlowsParams, reqEditors ...RequestEditorFn) (*GetFlowsResponse, error) {
	rsp, err := c.GetFlows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowsResponse(rsp)
}

// PostFlowsWithBodyWithResponse request with arbitrary body returning *PostFlowsResponse
func (c *ClientWithResponses) PostFlowsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error) {
	rsp, err := c.PostFlowsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlowsResponse(rsp)
}

func (c *ClientWithResponses) PostFlowsWithResponse(ctx context.Context, body PostFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlowsResponse, error) {
	rsp, err := c.PostFlows(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlowsResponse(rsp)
}

// DeleteFlowsIdWithResponse request returning *DeleteFlowsIdResponse
func (c *ClientWithResponses) DeleteFlowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteFlowsIdResponse, error) {
	rsp, err := c.DeleteFlowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFlowsIdResponse(rsp)
}

// GetFlowsIdWithResponse request returning *GetFlowsIdResponse
func (c *ClientWithResponses) GetFlowsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetFlowsIdResponse, error) {
	rsp, err := c.GetFlowsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlowsIdResponse(rsp)
}

// PutFlowsIdWithBodyWithResponse request with arbitrary body returning *PutFlowsIdResponse
func (c *ClientWithResponses) PutFlowsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlowsIdResponse, error) {
	rsp, err := c.PutFlowsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlowsIdResponse(rsp)
}

func (c *ClientWithResponses) PutFlowsIdWithResponse(ctx context.Context, id string, body PutFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlowsIdResponse, error) {
	rsp, err := c.PutFlowsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlowsIdResponse(rsp)
}

// GetGroupcallsWithResponse request returning *GetGroupcallsResponse
func (c *ClientWithResponses) GetGroupcallsWithResponse(ctx context.Context, params *GetGroupcallsParams, reqEditors ...RequestEditorFn) (*GetGroupcallsResponse, error) {
	rsp, err := c.GetGroupcalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupcallsResponse(rsp)
}

// PostGroupcallsWithBodyWithResponse request with arbitrary body returning *PostGroupcallsResponse
func (c *ClientWithResponses) PostGroupcallsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupcallsResponse, error) {
	rsp, err := c.PostGroupcallsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupcallsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupcallsWithResponse(ctx context.Context, body PostGroupcallsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupcallsResponse, error) {
	rsp, err := c.PostGroupcalls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupcallsResponse(rsp)
}

// DeleteGroupcallsIdWithResponse request returning *DeleteGroupcallsIdResponse
func (c *ClientWithResponses) DeleteGroupcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGroupcallsIdResponse, error) {
	rsp, err := c.DeleteGroupcallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupcallsIdResponse(rsp)
}

// GetGroupcallsIdWithResponse request returning *GetGroupcallsIdResponse
func (c *ClientWithResponses) GetGroupcallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGroupcallsIdResponse, error) {
	rsp, err := c.GetGroupcallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupcallsIdResponse(rsp)
}

// PostGroupcallsIdHangupWithResponse request returning *PostGroupcallsIdHangupResponse
func (c *ClientWithResponses) PostGroupcallsIdHangupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostGroupcallsIdHangupResponse, error) {
	rsp, err := c.PostGroupcallsIdHangup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupcallsIdHangupResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetMessagesWithResponse request returning *GetMessagesResponse
func (c *ClientWithResponses) GetMessagesWithResponse(ctx context.Context, params *GetMessagesParams, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error) {
	rsp, err := c.GetMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesResponse(rsp)
}

// PostMessagesWithBodyWithResponse request with arbitrary body returning *PostMessagesResponse
func (c *ClientWithResponses) PostMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error) {
	rsp, err := c.PostMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostMessagesWithResponse(ctx context.Context, body PostMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMessagesResponse, error) {
	rsp, err := c.PostMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMessagesResponse(rsp)
}

// DeleteMessagesIdWithResponse request returning *DeleteMessagesIdResponse
func (c *ClientWithResponses) DeleteMessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMessagesIdResponse, error) {
	rsp, err := c.DeleteMessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessagesIdResponse(rsp)
}

// GetMessagesIdWithResponse request returning *GetMessagesIdResponse
func (c *ClientWithResponses) GetMessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMessagesIdResponse, error) {
	rsp, err := c.GetMessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesIdResponse(rsp)
}

// GetNumbersWithResponse request returning *GetNumbersResponse
func (c *ClientWithResponses) GetNumbersWithResponse(ctx context.Context, params *GetNumbersParams, reqEditors ...RequestEditorFn) (*GetNumbersResponse, error) {
	rsp, err := c.GetNumbers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNumbersResponse(rsp)
}

// PostNumbersWithBodyWithResponse request with arbitrary body returning *PostNumbersResponse
func (c *ClientWithResponses) PostNumbersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNumbersResponse, error) {
	rsp, err := c.PostNumbersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNumbersResponse(rsp)
}

func (c *ClientWithResponses) PostNumbersWithResponse(ctx context.Context, body PostNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNumbersResponse, error) {
	rsp, err := c.PostNumbers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNumbersResponse(rsp)
}

// PostNumbersRenewWithBodyWithResponse request with arbitrary body returning *PostNumbersRenewResponse
func (c *ClientWithResponses) PostNumbersRenewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNumbersRenewResponse, error) {
	rsp, err := c.PostNumbersRenewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNumbersRenewResponse(rsp)
}

func (c *ClientWithResponses) PostNumbersRenewWithResponse(ctx context.Context, body PostNumbersRenewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNumbersRenewResponse, error) {
	rsp, err := c.PostNumbersRenew(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNumbersRenewResponse(rsp)
}

// DeleteNumbersIdWithResponse request returning *DeleteNumbersIdResponse
func (c *ClientWithResponses) DeleteNumbersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteNumbersIdResponse, error) {
	rsp, err := c.DeleteNumbersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNumbersIdResponse(rsp)
}

// GetNumbersIdWithResponse request returning *GetNumbersIdResponse
func (c *ClientWithResponses) GetNumbersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetNumbersIdResponse, error) {
	rsp, err := c.GetNumbersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNumbersIdResponse(rsp)
}

// PutNumbersIdWithBodyWithResponse request with arbitrary body returning *PutNumbersIdResponse
func (c *ClientWithResponses) PutNumbersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNumbersIdResponse, error) {
	rsp, err := c.PutNumbersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNumbersIdResponse(rsp)
}

func (c *ClientWithResponses) PutNumbersIdWithResponse(ctx context.Context, id string, body PutNumbersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNumbersIdResponse, error) {
	rsp, err := c.PutNumbersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNumbersIdResponse(rsp)
}

// PutNumbersIdFlowIdsWithBodyWithResponse request with arbitrary body returning *PutNumbersIdFlowIdsResponse
func (c *ClientWithResponses) PutNumbersIdFlowIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNumbersIdFlowIdsResponse, error) {
	rsp, err := c.PutNumbersIdFlowIdsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNumbersIdFlowIdsResponse(rsp)
}

func (c *ClientWithResponses) PutNumbersIdFlowIdsWithResponse(ctx context.Context, id string, body PutNumbersIdFlowIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNumbersIdFlowIdsResponse, error) {
	rsp, err := c.PutNumbersIdFlowIds(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNumbersIdFlowIdsResponse(rsp)
}

// GetOutdialsWithResponse request returning *GetOutdialsResponse
func (c *ClientWithResponses) GetOutdialsWithResponse(ctx context.Context, params *GetOutdialsParams, reqEditors ...RequestEditorFn) (*GetOutdialsResponse, error) {
	rsp, err := c.GetOutdials(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutdialsResponse(rsp)
}

// PostOutdialsWithBodyWithResponse request with arbitrary body returning *PostOutdialsResponse
func (c *ClientWithResponses) PostOutdialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutdialsResponse, error) {
	rsp, err := c.PostOutdialsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutdialsResponse(rsp)
}

func (c *ClientWithResponses) PostOutdialsWithResponse(ctx context.Context, body PostOutdialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutdialsResponse, error) {
	rsp, err := c.PostOutdials(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutdialsResponse(rsp)
}

// DeleteOutdialsIdWithResponse request returning *DeleteOutdialsIdResponse
func (c *ClientWithResponses) DeleteOutdialsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOutdialsIdResponse, error) {
	rsp, err := c.DeleteOutdialsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOutdialsIdResponse(rsp)
}

// GetOutdialsIdWithResponse request returning *GetOutdialsIdResponse
func (c *ClientWithResponses) GetOutdialsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOutdialsIdResponse, error) {
	rsp, err := c.GetOutdialsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutdialsIdResponse(rsp)
}

// PutOutdialsIdWithBodyWithResponse request with arbitrary body returning *PutOutdialsIdResponse
func (c *ClientWithResponses) PutOutdialsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutdialsIdResponse, error) {
	rsp, err := c.PutOutdialsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutdialsIdResponse(rsp)
}

func (c *ClientWithResponses) PutOutdialsIdWithResponse(ctx context.Context, id string, body PutOutdialsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutdialsIdResponse, error) {
	rsp, err := c.PutOutdialsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutdialsIdResponse(rsp)
}

// PutOutdialsIdCampaignIdWithBodyWithResponse request with arbitrary body returning *PutOutdialsIdCampaignIdResponse
func (c *ClientWithResponses) PutOutdialsIdCampaignIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutdialsIdCampaignIdResponse, error) {
	rsp, err := c.PutOutdialsIdCampaignIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutdialsIdCampaignIdResponse(rsp)
}

func (c *ClientWithResponses) PutOutdialsIdCampaignIdWithResponse(ctx context.Context, id string, body PutOutdialsIdCampaignIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutdialsIdCampaignIdResponse, error) {
	rsp, err := c.PutOutdialsIdCampaignId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutdialsIdCampaignIdResponse(rsp)
}

// PutOutdialsIdDataWithBodyWithResponse request with arbitrary body returning *PutOutdialsIdDataResponse
func (c *ClientWithResponses) PutOutdialsIdDataWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutdialsIdDataResponse, error) {
	rsp, err := c.PutOutdialsIdDataWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutdialsIdDataResponse(rsp)
}

func (c *ClientWithResponses) PutOutdialsIdDataWithResponse(ctx context.Context, id string, body PutOutdialsIdDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutdialsIdDataResponse, error) {
	rsp, err := c.PutOutdialsIdData(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutdialsIdDataResponse(rsp)
}

// GetOutdialsIdTargetsWithResponse request returning *GetOutdialsIdTargetsResponse
func (c *ClientWithResponses) GetOutdialsIdTargetsWithResponse(ctx context.Context, id string, params *GetOutdialsIdTargetsParams, reqEditors ...RequestEditorFn) (*GetOutdialsIdTargetsResponse, error) {
	rsp, err := c.GetOutdialsIdTargets(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutdialsIdTargetsResponse(rsp)
}

// PostOutdialsIdTargetsWithBodyWithResponse request with arbitrary body returning *PostOutdialsIdTargetsResponse
func (c *ClientWithResponses) PostOutdialsIdTargetsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutdialsIdTargetsResponse, error) {
	rsp, err := c.PostOutdialsIdTargetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutdialsIdTargetsResponse(rsp)
}

func (c *ClientWithResponses) PostOutdialsIdTargetsWithResponse(ctx context.Context, id string, body PostOutdialsIdTargetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutdialsIdTargetsResponse, error) {
	rsp, err := c.PostOutdialsIdTargets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutdialsIdTargetsResponse(rsp)
}

// DeleteOutdialsIdTargetsTargetIdWithResponse request returning *DeleteOutdialsIdTargetsTargetIdResponse
func (c *ClientWithResponses) DeleteOutdialsIdTargetsTargetIdWithResponse(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*DeleteOutdialsIdTargetsTargetIdResponse, error) {
	rsp, err := c.DeleteOutdialsIdTargetsTargetId(ctx, id, targetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOutdialsIdTargetsTargetIdResponse(rsp)
}

// GetOutdialsIdTargetsTargetIdWithResponse request returning *GetOutdialsIdTargetsTargetIdResponse
func (c *ClientWithResponses) GetOutdialsIdTargetsTargetIdWithResponse(ctx context.Context, id string, targetId string, reqEditors ...RequestEditorFn) (*GetOutdialsIdTargetsTargetIdResponse, error) {
	rsp, err := c.GetOutdialsIdTargetsTargetId(ctx, id, targetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutdialsIdTargetsTargetIdResponse(rsp)
}

// GetOutplansWithResponse request returning *GetOutplansResponse
func (c *ClientWithResponses) GetOutplansWithResponse(ctx context.Context, params *GetOutplansParams, reqEditors ...RequestEditorFn) (*GetOutplansResponse, error) {
	rsp, err := c.GetOutplans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutplansResponse(rsp)
}

// PostOutplansWithBodyWithResponse request with arbitrary body returning *PostOutplansResponse
func (c *ClientWithResponses) PostOutplansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOutplansResponse, error) {
	rsp, err := c.PostOutplansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutplansResponse(rsp)
}

func (c *ClientWithResponses) PostOutplansWithResponse(ctx context.Context, body PostOutplansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOutplansResponse, error) {
	rsp, err := c.PostOutplans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOutplansResponse(rsp)
}

// DeleteOutplansIdWithResponse request returning *DeleteOutplansIdResponse
func (c *ClientWithResponses) DeleteOutplansIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteOutplansIdResponse, error) {
	rsp, err := c.DeleteOutplansId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOutplansIdResponse(rsp)
}

// GetOutplansIdWithResponse request returning *GetOutplansIdResponse
func (c *ClientWithResponses) GetOutplansIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetOutplansIdResponse, error) {
	rsp, err := c.GetOutplansId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutplansIdResponse(rsp)
}

// PutOutplansIdWithBodyWithResponse request with arbitrary body returning *PutOutplansIdResponse
func (c *ClientWithResponses) PutOutplansIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutplansIdResponse, error) {
	rsp, err := c.PutOutplansIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutplansIdResponse(rsp)
}

func (c *ClientWithResponses) PutOutplansIdWithResponse(ctx context.Context, id string, body PutOutplansIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutplansIdResponse, error) {
	rsp, err := c.PutOutplansId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutplansIdResponse(rsp)
}

// PutOutplansIdDialInfoWithBodyWithResponse request with arbitrary body returning *PutOutplansIdDialInfoResponse
func (c *ClientWithResponses) PutOutplansIdDialInfoWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOutplansIdDialInfoResponse, error) {
	rsp, err := c.PutOutplansIdDialInfoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutplansIdDialInfoResponse(rsp)
}

func (c *ClientWithResponses) PutOutplansIdDialInfoWithResponse(ctx context.Context, id string, body PutOutplansIdDialInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOutplansIdDialInfoResponse, error) {
	rsp, err := c.PutOutplansIdDialInfo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOutplansIdDialInfoResponse(rsp)
}

// GetProvidersWithResponse request returning *GetProvidersResponse
func (c *ClientWithResponses) GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error) {
	rsp, err := c.GetProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersResponse(rsp)
}

// PostProvidersWithBodyWithResponse request with arbitrary body returning *PostProvidersResponse
func (c *ClientWithResponses) PostProvidersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error) {
	rsp, err := c.PostProvidersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProvidersResponse(rsp)
}

func (c *ClientWithResponses) PostProvidersWithResponse(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error) {
	rsp, err := c.PostProviders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProvidersResponse(rsp)
}

// DeleteProvidersIdWithResponse request returning *DeleteProvidersIdResponse
func (c *ClientWithResponses) DeleteProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteProvidersIdResponse, error) {
	rsp, err := c.DeleteProvidersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProvidersIdResponse(rsp)
}

// GetProvidersIdWithResponse request returning *GetProvidersIdResponse
func (c *ClientWithResponses) GetProvidersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProvidersIdResponse, error) {
	rsp, err := c.GetProvidersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersIdResponse(rsp)
}

// PutProvidersIdWithBodyWithResponse request with arbitrary body returning *PutProvidersIdResponse
func (c *ClientWithResponses) PutProvidersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProvidersIdResponse, error) {
	rsp, err := c.PutProvidersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProvidersIdResponse(rsp)
}

func (c *ClientWithResponses) PutProvidersIdWithResponse(ctx context.Context, id string, body PutProvidersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProvidersIdResponse, error) {
	rsp, err := c.PutProvidersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProvidersIdResponse(rsp)
}

// GetQueuecallsWithResponse request returning *GetQueuecallsResponse
func (c *ClientWithResponses) GetQueuecallsWithResponse(ctx context.Context, params *GetQueuecallsParams, reqEditors ...RequestEditorFn) (*GetQueuecallsResponse, error) {
	rsp, err := c.GetQueuecalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueuecallsResponse(rsp)
}

// PostQueuecallsReferenceIdIdKickWithResponse request returning *PostQueuecallsReferenceIdIdKickResponse
func (c *ClientWithResponses) PostQueuecallsReferenceIdIdKickWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostQueuecallsReferenceIdIdKickResponse, error) {
	rsp, err := c.PostQueuecallsReferenceIdIdKick(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueuecallsReferenceIdIdKickResponse(rsp)
}

// DeleteQueuecallsIdWithResponse request returning *DeleteQueuecallsIdResponse
func (c *ClientWithResponses) DeleteQueuecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteQueuecallsIdResponse, error) {
	rsp, err := c.DeleteQueuecallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteQueuecallsIdResponse(rsp)
}

// GetQueuecallsIdWithResponse request returning *GetQueuecallsIdResponse
func (c *ClientWithResponses) GetQueuecallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetQueuecallsIdResponse, error) {
	rsp, err := c.GetQueuecallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueuecallsIdResponse(rsp)
}

// PostQueuecallsIdKickWithResponse request returning *PostQueuecallsIdKickResponse
func (c *ClientWithResponses) PostQueuecallsIdKickWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostQueuecallsIdKickResponse, error) {
	rsp, err := c.PostQueuecallsIdKick(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueuecallsIdKickResponse(rsp)
}

// GetQueuesWithResponse request returning *GetQueuesResponse
func (c *ClientWithResponses) GetQueuesWithResponse(ctx context.Context, params *GetQueuesParams, reqEditors ...RequestEditorFn) (*GetQueuesResponse, error) {
	rsp, err := c.GetQueues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueuesResponse(rsp)
}

// PostQueuesWithBodyWithResponse request with arbitrary body returning *PostQueuesResponse
func (c *ClientWithResponses) PostQueuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostQueuesResponse, error) {
	rsp, err := c.PostQueuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueuesResponse(rsp)
}

func (c *ClientWithResponses) PostQueuesWithResponse(ctx context.Context, body PostQueuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostQueuesResponse, error) {
	rsp, err := c.PostQueues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostQueuesResponse(rsp)
}

// DeleteQueuesIdWithResponse request returning *DeleteQueuesIdResponse
func (c *ClientWithResponses) DeleteQueuesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteQueuesIdResponse, error) {
	rsp, err := c.DeleteQueuesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteQueuesIdResponse(rsp)
}

// GetQueuesIdWithResponse request returning *GetQueuesIdResponse
func (c *ClientWithResponses) GetQueuesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetQueuesIdResponse, error) {
	rsp, err := c.GetQueuesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueuesIdResponse(rsp)
}

// PutQueuesIdWithBodyWithResponse request with arbitrary body returning *PutQueuesIdResponse
func (c *ClientWithResponses) PutQueuesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdResponse, error) {
	rsp, err := c.PutQueuesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdResponse(rsp)
}

func (c *ClientWithResponses) PutQueuesIdWithResponse(ctx context.Context, id string, body PutQueuesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdResponse, error) {
	rsp, err := c.PutQueuesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdResponse(rsp)
}

// PutQueuesIdActionsWithBodyWithResponse request with arbitrary body returning *PutQueuesIdActionsResponse
func (c *ClientWithResponses) PutQueuesIdActionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdActionsResponse, error) {
	rsp, err := c.PutQueuesIdActionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdActionsResponse(rsp)
}

func (c *ClientWithResponses) PutQueuesIdActionsWithResponse(ctx context.Context, id string, body PutQueuesIdActionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdActionsResponse, error) {
	rsp, err := c.PutQueuesIdActions(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdActionsResponse(rsp)
}

// PutQueuesIdRoutingMethodWithBodyWithResponse request with arbitrary body returning *PutQueuesIdRoutingMethodResponse
func (c *ClientWithResponses) PutQueuesIdRoutingMethodWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdRoutingMethodResponse, error) {
	rsp, err := c.PutQueuesIdRoutingMethodWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdRoutingMethodResponse(rsp)
}

func (c *ClientWithResponses) PutQueuesIdRoutingMethodWithResponse(ctx context.Context, id string, body PutQueuesIdRoutingMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdRoutingMethodResponse, error) {
	rsp, err := c.PutQueuesIdRoutingMethod(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdRoutingMethodResponse(rsp)
}

// PutQueuesIdTagIdsWithBodyWithResponse request with arbitrary body returning *PutQueuesIdTagIdsResponse
func (c *ClientWithResponses) PutQueuesIdTagIdsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutQueuesIdTagIdsResponse, error) {
	rsp, err := c.PutQueuesIdTagIdsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdTagIdsResponse(rsp)
}

func (c *ClientWithResponses) PutQueuesIdTagIdsWithResponse(ctx context.Context, id string, body PutQueuesIdTagIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutQueuesIdTagIdsResponse, error) {
	rsp, err := c.PutQueuesIdTagIds(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutQueuesIdTagIdsResponse(rsp)
}

// GetRecordingfilesIdWithResponse request returning *GetRecordingfilesIdResponse
func (c *ClientWithResponses) GetRecordingfilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRecordingfilesIdResponse, error) {
	rsp, err := c.GetRecordingfilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordingfilesIdResponse(rsp)
}

// GetRecordingsWithResponse request returning *GetRecordingsResponse
func (c *ClientWithResponses) GetRecordingsWithResponse(ctx context.Context, params *GetRecordingsParams, reqEditors ...RequestEditorFn) (*GetRecordingsResponse, error) {
	rsp, err := c.GetRecordings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordingsResponse(rsp)
}

// DeleteRecordingsIdWithResponse request returning *DeleteRecordingsIdResponse
func (c *ClientWithResponses) DeleteRecordingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRecordingsIdResponse, error) {
	rsp, err := c.DeleteRecordingsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingsIdResponse(rsp)
}

// GetRecordingsIdWithResponse request returning *GetRecordingsIdResponse
func (c *ClientWithResponses) GetRecordingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRecordingsIdResponse, error) {
	rsp, err := c.GetRecordingsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordingsIdResponse(rsp)
}

// GetRoutesWithResponse request returning *GetRoutesResponse
func (c *ClientWithResponses) GetRoutesWithResponse(ctx context.Context, params *GetRoutesParams, reqEditors ...RequestEditorFn) (*GetRoutesResponse, error) {
	rsp, err := c.GetRoutes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoutesResponse(rsp)
}

// PostRoutesWithBodyWithResponse request with arbitrary body returning *PostRoutesResponse
func (c *ClientWithResponses) PostRoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRoutesResponse, error) {
	rsp, err := c.PostRoutesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRoutesResponse(rsp)
}

func (c *ClientWithResponses) PostRoutesWithResponse(ctx context.Context, body PostRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRoutesResponse, error) {
	rsp, err := c.PostRoutes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRoutesResponse(rsp)
}

// DeleteRoutesIdWithResponse request returning *DeleteRoutesIdResponse
func (c *ClientWithResponses) DeleteRoutesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRoutesIdResponse, error) {
	rsp, err := c.DeleteRoutesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoutesIdResponse(rsp)
}

// GetRoutesIdWithResponse request returning *GetRoutesIdResponse
func (c *ClientWithResponses) GetRoutesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRoutesIdResponse, error) {
	rsp, err := c.GetRoutesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoutesIdResponse(rsp)
}

// PutRoutesIdWithBodyWithResponse request with arbitrary body returning *PutRoutesIdResponse
func (c *ClientWithResponses) PutRoutesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRoutesIdResponse, error) {
	rsp, err := c.PutRoutesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRoutesIdResponse(rsp)
}

func (c *ClientWithResponses) PutRoutesIdWithResponse(ctx context.Context, id string, body PutRoutesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRoutesIdResponse, error) {
	rsp, err := c.PutRoutesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRoutesIdResponse(rsp)
}

// GetServiceAgentsAgentsWithResponse request returning *GetServiceAgentsAgentsResponse
func (c *ClientWithResponses) GetServiceAgentsAgentsWithResponse(ctx context.Context, params *GetServiceAgentsAgentsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsAgentsResponse, error) {
	rsp, err := c.GetServiceAgentsAgents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsAgentsResponse(rsp)
}

// GetServiceAgentsAgentsIdWithResponse request returning *GetServiceAgentsAgentsIdResponse
func (c *ClientWithResponses) GetServiceAgentsAgentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsAgentsIdResponse, error) {
	rsp, err := c.GetServiceAgentsAgentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsAgentsIdResponse(rsp)
}

// GetServiceAgentsCallsWithResponse request returning *GetServiceAgentsCallsResponse
func (c *ClientWithResponses) GetServiceAgentsCallsWithResponse(ctx context.Context, params *GetServiceAgentsCallsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsCallsResponse, error) {
	rsp, err := c.GetServiceAgentsCalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsCallsResponse(rsp)
}

// GetServiceAgentsCallsIdWithResponse request returning *GetServiceAgentsCallsIdResponse
func (c *ClientWithResponses) GetServiceAgentsCallsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsCallsIdResponse, error) {
	rsp, err := c.GetServiceAgentsCallsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsCallsIdResponse(rsp)
}

// GetServiceAgentsChatroommessagesWithResponse request returning *GetServiceAgentsChatroommessagesResponse
func (c *ClientWithResponses) GetServiceAgentsChatroommessagesWithResponse(ctx context.Context, params *GetServiceAgentsChatroommessagesParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroommessagesResponse, error) {
	rsp, err := c.GetServiceAgentsChatroommessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsChatroommessagesResponse(rsp)
}

// PostServiceAgentsChatroommessagesWithBodyWithResponse request with arbitrary body returning *PostServiceAgentsChatroommessagesResponse
func (c *ClientWithResponses) PostServiceAgentsChatroommessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroommessagesResponse, error) {
	rsp, err := c.PostServiceAgentsChatroommessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsChatroommessagesResponse(rsp)
}

func (c *ClientWithResponses) PostServiceAgentsChatroommessagesWithResponse(ctx context.Context, body PostServiceAgentsChatroommessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroommessagesResponse, error) {
	rsp, err := c.PostServiceAgentsChatroommessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsChatroommessagesResponse(rsp)
}

// DeleteServiceAgentsChatroommessagesIdWithResponse request returning *DeleteServiceAgentsChatroommessagesIdResponse
func (c *ClientWithResponses) DeleteServiceAgentsChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceAgentsChatroommessagesIdResponse, error) {
	rsp, err := c.DeleteServiceAgentsChatroommessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceAgentsChatroommessagesIdResponse(rsp)
}

// GetServiceAgentsChatroommessagesIdWithResponse request returning *GetServiceAgentsChatroommessagesIdResponse
func (c *ClientWithResponses) GetServiceAgentsChatroommessagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroommessagesIdResponse, error) {
	rsp, err := c.GetServiceAgentsChatroommessagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsChatroommessagesIdResponse(rsp)
}

// GetServiceAgentsChatroomsWithResponse request returning *GetServiceAgentsChatroomsResponse
func (c *ClientWithResponses) GetServiceAgentsChatroomsWithResponse(ctx context.Context, params *GetServiceAgentsChatroomsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroomsResponse, error) {
	rsp, err := c.GetServiceAgentsChatrooms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsChatroomsResponse(rsp)
}

// PostServiceAgentsChatroomsWithBodyWithResponse request with arbitrary body returning *PostServiceAgentsChatroomsResponse
func (c *ClientWithResponses) PostServiceAgentsChatroomsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroomsResponse, error) {
	rsp, err := c.PostServiceAgentsChatroomsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsChatroomsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceAgentsChatroomsWithResponse(ctx context.Context, body PostServiceAgentsChatroomsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceAgentsChatroomsResponse, error) {
	rsp, err := c.PostServiceAgentsChatrooms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsChatroomsResponse(rsp)
}

// DeleteServiceAgentsChatroomsIdWithResponse request returning *DeleteServiceAgentsChatroomsIdResponse
func (c *ClientWithResponses) DeleteServiceAgentsChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceAgentsChatroomsIdResponse, error) {
	rsp, err := c.DeleteServiceAgentsChatroomsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceAgentsChatroomsIdResponse(rsp)
}

// GetServiceAgentsChatroomsIdWithResponse request returning *GetServiceAgentsChatroomsIdResponse
func (c *ClientWithResponses) GetServiceAgentsChatroomsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsChatroomsIdResponse, error) {
	rsp, err := c.GetServiceAgentsChatroomsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsChatroomsIdResponse(rsp)
}

// PutServiceAgentsChatroomsIdWithBodyWithResponse request with arbitrary body returning *PutServiceAgentsChatroomsIdResponse
func (c *ClientWithResponses) PutServiceAgentsChatroomsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsChatroomsIdResponse, error) {
	rsp, err := c.PutServiceAgentsChatroomsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsChatroomsIdResponse(rsp)
}

func (c *ClientWithResponses) PutServiceAgentsChatroomsIdWithResponse(ctx context.Context, id string, body PutServiceAgentsChatroomsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsChatroomsIdResponse, error) {
	rsp, err := c.PutServiceAgentsChatroomsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsChatroomsIdResponse(rsp)
}

// GetServiceAgentsConversationsWithResponse request returning *GetServiceAgentsConversationsResponse
func (c *ClientWithResponses) GetServiceAgentsConversationsWithResponse(ctx context.Context, params *GetServiceAgentsConversationsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsConversationsResponse, error) {
	rsp, err := c.GetServiceAgentsConversations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsConversationsResponse(rsp)
}

// GetServiceAgentsConversationsIdWithResponse request returning *GetServiceAgentsConversationsIdResponse
func (c *ClientWithResponses) GetServiceAgentsConversationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsConversationsIdResponse, error) {
	rsp, err := c.GetServiceAgentsConversationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsConversationsIdResponse(rsp)
}

// GetServiceAgentsConversationsIdMessagesWithResponse request returning *GetServiceAgentsConversationsIdMessagesResponse
func (c *ClientWithResponses) GetServiceAgentsConversationsIdMessagesWithResponse(ctx context.Context, id string, params *GetServiceAgentsConversationsIdMessagesParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsConversationsIdMessagesResponse, error) {
	rsp, err := c.GetServiceAgentsConversationsIdMessages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsConversationsIdMessagesResponse(rsp)
}

// PostServiceAgentsConversationsIdMessagesWithBodyWithResponse request with arbitrary body returning *PostServiceAgentsConversationsIdMessagesResponse
func (c *ClientWithResponses) PostServiceAgentsConversationsIdMessagesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsConversationsIdMessagesResponse, error) {
	rsp, err := c.PostServiceAgentsConversationsIdMessagesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsConversationsIdMessagesResponse(rsp)
}

func (c *ClientWithResponses) PostServiceAgentsConversationsIdMessagesWithResponse(ctx context.Context, id string, body PostServiceAgentsConversationsIdMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceAgentsConversationsIdMessagesResponse, error) {
	rsp, err := c.PostServiceAgentsConversationsIdMessages(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsConversationsIdMessagesResponse(rsp)
}

// GetServiceAgentsCustomerWithResponse request returning *GetServiceAgentsCustomerResponse
func (c *ClientWithResponses) GetServiceAgentsCustomerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceAgentsCustomerResponse, error) {
	rsp, err := c.GetServiceAgentsCustomer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsCustomerResponse(rsp)
}

// GetServiceAgentsExtensionsWithResponse request returning *GetServiceAgentsExtensionsResponse
func (c *ClientWithResponses) GetServiceAgentsExtensionsWithResponse(ctx context.Context, params *GetServiceAgentsExtensionsParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsExtensionsResponse, error) {
	rsp, err := c.GetServiceAgentsExtensions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsExtensionsResponse(rsp)
}

// GetServiceAgentsExtensionsIdWithResponse request returning *GetServiceAgentsExtensionsIdResponse
func (c *ClientWithResponses) GetServiceAgentsExtensionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsExtensionsIdResponse, error) {
	rsp, err := c.GetServiceAgentsExtensionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsExtensionsIdResponse(rsp)
}

// GetServiceAgentsFilesWithResponse request returning *GetServiceAgentsFilesResponse
func (c *ClientWithResponses) GetServiceAgentsFilesWithResponse(ctx context.Context, params *GetServiceAgentsFilesParams, reqEditors ...RequestEditorFn) (*GetServiceAgentsFilesResponse, error) {
	rsp, err := c.GetServiceAgentsFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsFilesResponse(rsp)
}

// PostServiceAgentsFilesWithBodyWithResponse request with arbitrary body returning *PostServiceAgentsFilesResponse
func (c *ClientWithResponses) PostServiceAgentsFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceAgentsFilesResponse, error) {
	rsp, err := c.PostServiceAgentsFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceAgentsFilesResponse(rsp)
}

// DeleteServiceAgentsFilesIdWithResponse request returning *DeleteServiceAgentsFilesIdResponse
func (c *ClientWithResponses) DeleteServiceAgentsFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceAgentsFilesIdResponse, error) {
	rsp, err := c.DeleteServiceAgentsFilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceAgentsFilesIdResponse(rsp)
}

// GetServiceAgentsFilesIdWithResponse request returning *GetServiceAgentsFilesIdResponse
func (c *ClientWithResponses) GetServiceAgentsFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetServiceAgentsFilesIdResponse, error) {
	rsp, err := c.GetServiceAgentsFilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsFilesIdResponse(rsp)
}

// GetServiceAgentsMeWithResponse request returning *GetServiceAgentsMeResponse
func (c *ClientWithResponses) GetServiceAgentsMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceAgentsMeResponse, error) {
	rsp, err := c.GetServiceAgentsMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsMeResponse(rsp)
}

// PutServiceAgentsMeWithBodyWithResponse request with arbitrary body returning *PutServiceAgentsMeResponse
func (c *ClientWithResponses) PutServiceAgentsMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeResponse, error) {
	rsp, err := c.PutServiceAgentsMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMeResponse(rsp)
}

func (c *ClientWithResponses) PutServiceAgentsMeWithResponse(ctx context.Context, body PutServiceAgentsMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeResponse, error) {
	rsp, err := c.PutServiceAgentsMe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMeResponse(rsp)
}

// PutServiceAgentsMeAddressesWithBodyWithResponse request with arbitrary body returning *PutServiceAgentsMeAddressesResponse
func (c *ClientWithResponses) PutServiceAgentsMeAddressesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeAddressesResponse, error) {
	rsp, err := c.PutServiceAgentsMeAddressesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMeAddressesResponse(rsp)
}

func (c *ClientWithResponses) PutServiceAgentsMeAddressesWithResponse(ctx context.Context, body PutServiceAgentsMeAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeAddressesResponse, error) {
	rsp, err := c.PutServiceAgentsMeAddresses(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMeAddressesResponse(rsp)
}

// PutServiceAgentsMePasswordWithBodyWithResponse request with arbitrary body returning *PutServiceAgentsMePasswordResponse
func (c *ClientWithResponses) PutServiceAgentsMePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMePasswordResponse, error) {
	rsp, err := c.PutServiceAgentsMePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMePasswordResponse(rsp)
}

func (c *ClientWithResponses) PutServiceAgentsMePasswordWithResponse(ctx context.Context, body PutServiceAgentsMePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMePasswordResponse, error) {
	rsp, err := c.PutServiceAgentsMePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMePasswordResponse(rsp)
}

// PutServiceAgentsMeStatusWithBodyWithResponse request with arbitrary body returning *PutServiceAgentsMeStatusResponse
func (c *ClientWithResponses) PutServiceAgentsMeStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeStatusResponse, error) {
	rsp, err := c.PutServiceAgentsMeStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMeStatusResponse(rsp)
}

func (c *ClientWithResponses) PutServiceAgentsMeStatusWithResponse(ctx context.Context, body PutServiceAgentsMeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceAgentsMeStatusResponse, error) {
	rsp, err := c.PutServiceAgentsMeStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceAgentsMeStatusResponse(rsp)
}

// GetServiceAgentsWsWithResponse request returning *GetServiceAgentsWsResponse
func (c *ClientWithResponses) GetServiceAgentsWsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceAgentsWsResponse, error) {
	rsp, err := c.GetServiceAgentsWs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAgentsWsResponse(rsp)
}

// GetStorageAccountWithResponse request returning *GetStorageAccountResponse
func (c *ClientWithResponses) GetStorageAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStorageAccountResponse, error) {
	rsp, err := c.GetStorageAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageAccountResponse(rsp)
}

// GetStorageAccountsWithResponse request returning *GetStorageAccountsResponse
func (c *ClientWithResponses) GetStorageAccountsWithResponse(ctx context.Context, params *GetStorageAccountsParams, reqEditors ...RequestEditorFn) (*GetStorageAccountsResponse, error) {
	rsp, err := c.GetStorageAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageAccountsResponse(rsp)
}

// PostStorageAccountsWithBodyWithResponse request with arbitrary body returning *PostStorageAccountsResponse
func (c *ClientWithResponses) PostStorageAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStorageAccountsResponse, error) {
	rsp, err := c.PostStorageAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStorageAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostStorageAccountsWithResponse(ctx context.Context, body PostStorageAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStorageAccountsResponse, error) {
	rsp, err := c.PostStorageAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStorageAccountsResponse(rsp)
}

// DeleteStorageAccountsIdWithResponse request returning *DeleteStorageAccountsIdResponse
func (c *ClientWithResponses) DeleteStorageAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStorageAccountsIdResponse, error) {
	rsp, err := c.DeleteStorageAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageAccountsIdResponse(rsp)
}

// GetStorageAccountsIdWithResponse request returning *GetStorageAccountsIdResponse
func (c *ClientWithResponses) GetStorageAccountsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStorageAccountsIdResponse, error) {
	rsp, err := c.GetStorageAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageAccountsIdResponse(rsp)
}

// GetStorageFilesWithResponse request returning *GetStorageFilesResponse
func (c *ClientWithResponses) GetStorageFilesWithResponse(ctx context.Context, params *GetStorageFilesParams, reqEditors ...RequestEditorFn) (*GetStorageFilesResponse, error) {
	rsp, err := c.GetStorageFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageFilesResponse(rsp)
}

// PostStorageFilesWithBodyWithResponse request with arbitrary body returning *PostStorageFilesResponse
func (c *ClientWithResponses) PostStorageFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStorageFilesResponse, error) {
	rsp, err := c.PostStorageFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStorageFilesResponse(rsp)
}

// DeleteStorageFilesIdWithResponse request returning *DeleteStorageFilesIdResponse
func (c *ClientWithResponses) DeleteStorageFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteStorageFilesIdResponse, error) {
	rsp, err := c.DeleteStorageFilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStorageFilesIdResponse(rsp)
}

// GetStorageFilesIdWithResponse request returning *GetStorageFilesIdResponse
func (c *ClientWithResponses) GetStorageFilesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStorageFilesIdResponse, error) {
	rsp, err := c.GetStorageFilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageFilesIdResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// PostTagsWithBodyWithResponse request with arbitrary body returning *PostTagsResponse
func (c *ClientWithResponses) PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

func (c *ClientWithResponses) PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

// DeleteTagsIdWithResponse request returning *DeleteTagsIdResponse
func (c *ClientWithResponses) DeleteTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTagsIdResponse, error) {
	rsp, err := c.DeleteTagsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagsIdResponse(rsp)
}

// GetTagsIdWithResponse request returning *GetTagsIdResponse
func (c *ClientWithResponses) GetTagsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTagsIdResponse, error) {
	rsp, err := c.GetTagsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsIdResponse(rsp)
}

// PutTagsIdWithBodyWithResponse request with arbitrary body returning *PutTagsIdResponse
func (c *ClientWithResponses) PutTagsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTagsIdResponse, error) {
	rsp, err := c.PutTagsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTagsIdResponse(rsp)
}

func (c *ClientWithResponses) PutTagsIdWithResponse(ctx context.Context, id string, body PutTagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTagsIdResponse, error) {
	rsp, err := c.PutTagsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTagsIdResponse(rsp)
}

// GetTranscribesWithResponse request returning *GetTranscribesResponse
func (c *ClientWithResponses) GetTranscribesWithResponse(ctx context.Context, params *GetTranscribesParams, reqEditors ...RequestEditorFn) (*GetTranscribesResponse, error) {
	rsp, err := c.GetTranscribes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTranscribesResponse(rsp)
}

// PostTranscribesWithBodyWithResponse request with arbitrary body returning *PostTranscribesResponse
func (c *ClientWithResponses) PostTranscribesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranscribesResponse, error) {
	rsp, err := c.PostTranscribesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTranscribesResponse(rsp)
}

func (c *ClientWithResponses) PostTranscribesWithResponse(ctx context.Context, body PostTranscribesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTranscribesResponse, error) {
	rsp, err := c.PostTranscribes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTranscribesResponse(rsp)
}

// DeleteTranscribesIdWithResponse request returning *DeleteTranscribesIdResponse
func (c *ClientWithResponses) DeleteTranscribesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTranscribesIdResponse, error) {
	rsp, err := c.DeleteTranscribesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTranscribesIdResponse(rsp)
}

// GetTranscribesIdWithResponse request returning *GetTranscribesIdResponse
func (c *ClientWithResponses) GetTranscribesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTranscribesIdResponse, error) {
	rsp, err := c.GetTranscribesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTranscribesIdResponse(rsp)
}

// PostTranscribesIdStopWithResponse request returning *PostTranscribesIdStopResponse
func (c *ClientWithResponses) PostTranscribesIdStopWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostTranscribesIdStopResponse, error) {
	rsp, err := c.PostTranscribesIdStop(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTranscribesIdStopResponse(rsp)
}

// GetTranscriptsWithResponse request returning *GetTranscriptsResponse
func (c *ClientWithResponses) GetTranscriptsWithResponse(ctx context.Context, params *GetTranscriptsParams, reqEditors ...RequestEditorFn) (*GetTranscriptsResponse, error) {
	rsp, err := c.GetTranscripts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTranscriptsResponse(rsp)
}

// PostTransfersWithBodyWithResponse request with arbitrary body returning *PostTransfersResponse
func (c *ClientWithResponses) PostTransfersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransfersResponse, error) {
	rsp, err := c.PostTransfersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransfersResponse(rsp)
}

func (c *ClientWithResponses) PostTransfersWithResponse(ctx context.Context, body PostTransfersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransfersResponse, error) {
	rsp, err := c.PostTransfers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransfersResponse(rsp)
}

// GetTrunksWithResponse request returning *GetTrunksResponse
func (c *ClientWithResponses) GetTrunksWithResponse(ctx context.Context, params *GetTrunksParams, reqEditors ...RequestEditorFn) (*GetTrunksResponse, error) {
	rsp, err := c.GetTrunks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrunksResponse(rsp)
}

// PostTrunksWithBodyWithResponse request with arbitrary body returning *PostTrunksResponse
func (c *ClientWithResponses) PostTrunksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTrunksResponse, error) {
	rsp, err := c.PostTrunksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrunksResponse(rsp)
}

func (c *ClientWithResponses) PostTrunksWithResponse(ctx context.Context, body PostTrunksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTrunksResponse, error) {
	rsp, err := c.PostTrunks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrunksResponse(rsp)
}

// DeleteTrunksIdWithResponse request returning *DeleteTrunksIdResponse
func (c *ClientWithResponses) DeleteTrunksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTrunksIdResponse, error) {
	rsp, err := c.DeleteTrunksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTrunksIdResponse(rsp)
}

// GetTrunksIdWithResponse request returning *GetTrunksIdResponse
func (c *ClientWithResponses) GetTrunksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTrunksIdResponse, error) {
	rsp, err := c.GetTrunksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrunksIdResponse(rsp)
}

// PutTrunksIdWithBodyWithResponse request with arbitrary body returning *PutTrunksIdResponse
func (c *ClientWithResponses) PutTrunksIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTrunksIdResponse, error) {
	rsp, err := c.PutTrunksIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrunksIdResponse(rsp)
}

func (c *ClientWithResponses) PutTrunksIdWithResponse(ctx context.Context, id string, body PutTrunksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTrunksIdResponse, error) {
	rsp, err := c.PutTrunksId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTrunksIdResponse(rsp)
}

// GetWsWithResponse request returning *GetWsResponse
func (c *ClientWithResponses) GetWsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsResponse, error) {
	rsp, err := c.GetWs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWsResponse(rsp)
}

// ParseGetAccesskeysResponse parses an HTTP response from a GetAccesskeysWithResponse call
func ParseGetAccesskeysResponse(rsp *http.Response) (*GetAccesskeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccesskeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                     `json:"next_page_token,omitempty"`
			Result        *[]CustomerManagerAccesskey `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccesskeysResponse parses an HTTP response from a PostAccesskeysWithResponse call
func ParsePostAccesskeysResponse(rsp *http.Response) (*PostAccesskeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccesskeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerAccesskey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccesskeysIdResponse parses an HTTP response from a DeleteAccesskeysIdWithResponse call
func ParseDeleteAccesskeysIdResponse(rsp *http.Response) (*DeleteAccesskeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccesskeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccesskeysIdResponse parses an HTTP response from a GetAccesskeysIdWithResponse call
func ParseGetAccesskeysIdResponse(rsp *http.Response) (*GetAccesskeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccesskeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerAccesskey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAccesskeysIdResponse parses an HTTP response from a PutAccesskeysIdWithResponse call
func ParsePutAccesskeysIdResponse(rsp *http.Response) (*PutAccesskeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAccesskeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerAccesskey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActiveflowsResponse parses an HTTP response from a GetActiveflowsWithResponse call
func ParseGetActiveflowsResponse(rsp *http.Response) (*GetActiveflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]FlowManagerActiveflow `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActiveflowsResponse parses an HTTP response from a PostActiveflowsWithResponse call
func ParsePostActiveflowsResponse(rsp *http.Response) (*PostActiveflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActiveflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlowManagerActiveflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteActiveflowsIdResponse parses an HTTP response from a DeleteActiveflowsIdWithResponse call
func ParseDeleteActiveflowsIdResponse(rsp *http.Response) (*DeleteActiveflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActiveflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetActiveflowsIdResponse parses an HTTP response from a GetActiveflowsIdWithResponse call
func ParseGetActiveflowsIdResponse(rsp *http.Response) (*GetActiveflowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveflowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerActiveflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostActiveflowsIdStopResponse parses an HTTP response from a PostActiveflowsIdStopWithResponse call
func ParsePostActiveflowsIdStopResponse(rsp *http.Response) (*PostActiveflowsIdStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActiveflowsIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerActiveflow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsResponse parses an HTTP response from a GetAgentsWithResponse call
func ParseGetAgentsResponse(rsp *http.Response) (*GetAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string              `json:"next_page_token,omitempty"`
			Result        *[]AgentManagerAgent `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAgentsResponse parses an HTTP response from a PostAgentsWithResponse call
func ParsePostAgentsResponse(rsp *http.Response) (*PostAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAgentsIdResponse parses an HTTP response from a DeleteAgentsIdWithResponse call
func ParseDeleteAgentsIdResponse(rsp *http.Response) (*DeleteAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsIdResponse parses an HTTP response from a GetAgentsIdWithResponse call
func ParseGetAgentsIdResponse(rsp *http.Response) (*GetAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdResponse parses an HTTP response from a PutAgentsIdWithResponse call
func ParsePutAgentsIdResponse(rsp *http.Response) (*PutAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdAddressesResponse parses an HTTP response from a PutAgentsIdAddressesWithResponse call
func ParsePutAgentsIdAddressesResponse(rsp *http.Response) (*PutAgentsIdAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdPasswordResponse parses an HTTP response from a PutAgentsIdPasswordWithResponse call
func ParsePutAgentsIdPasswordResponse(rsp *http.Response) (*PutAgentsIdPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdPermissionResponse parses an HTTP response from a PutAgentsIdPermissionWithResponse call
func ParsePutAgentsIdPermissionResponse(rsp *http.Response) (*PutAgentsIdPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdStatusResponse parses an HTTP response from a PutAgentsIdStatusWithResponse call
func ParsePutAgentsIdStatusResponse(rsp *http.Response) (*PutAgentsIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAgentsIdTagIdsResponse parses an HTTP response from a PutAgentsIdTagIdsWithResponse call
func ParsePutAgentsIdTagIdsResponse(rsp *http.Response) (*PutAgentsIdTagIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAgentsIdTagIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAvailableNumbersResponse parses an HTTP response from a GetAvailableNumbersWithResponse call
func ParseGetAvailableNumbersResponse(rsp *http.Response) (*GetAvailableNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailableNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *[]NumberManagerAvailableNumber `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingAccountsResponse parses an HTTP response from a GetBillingAccountsWithResponse call
func ParseGetBillingAccountsResponse(rsp *http.Response) (*GetBillingAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]BillingManagerAccount `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingAccountsResponse parses an HTTP response from a PostBillingAccountsWithResponse call
func ParsePostBillingAccountsResponse(rsp *http.Response) (*PostBillingAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBillingAccountsIdResponse parses an HTTP response from a DeleteBillingAccountsIdWithResponse call
func ParseDeleteBillingAccountsIdResponse(rsp *http.Response) (*DeleteBillingAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBillingAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingAccountsIdResponse parses an HTTP response from a GetBillingAccountsIdWithResponse call
func ParseGetBillingAccountsIdResponse(rsp *http.Response) (*GetBillingAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBillingAccountsIdResponse parses an HTTP response from a PutBillingAccountsIdWithResponse call
func ParsePutBillingAccountsIdResponse(rsp *http.Response) (*PutBillingAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBillingAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingAccountsIdBalanceAddForceResponse parses an HTTP response from a PostBillingAccountsIdBalanceAddForceWithResponse call
func ParsePostBillingAccountsIdBalanceAddForceResponse(rsp *http.Response) (*PostBillingAccountsIdBalanceAddForceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingAccountsIdBalanceAddForceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingAccountsIdBalanceSubtractForceResponse parses an HTTP response from a PostBillingAccountsIdBalanceSubtractForceWithResponse call
func ParsePostBillingAccountsIdBalanceSubtractForceResponse(rsp *http.Response) (*PostBillingAccountsIdBalanceSubtractForceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingAccountsIdBalanceSubtractForceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBillingAccountsIdPaymentInfoResponse parses an HTTP response from a PutBillingAccountsIdPaymentInfoWithResponse call
func ParsePutBillingAccountsIdPaymentInfoResponse(rsp *http.Response) (*PutBillingAccountsIdPaymentInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBillingAccountsIdPaymentInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingsResponse parses an HTTP response from a GetBillingsWithResponse call
func ParseGetBillingsResponse(rsp *http.Response) (*GetBillingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]BillingManagerBilling `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallsResponse parses an HTTP response from a GetCallsWithResponse call
func ParseGetCallsResponse(rsp *http.Response) (*GetCallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string            `json:"next_page_token,omitempty"`
			Result        *[]CallManagerCall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCallsResponse parses an HTTP response from a PostCallsWithResponse call
func ParsePostCallsResponse(rsp *http.Response) (*PostCallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Calls      *[]CallManagerCall      `json:"calls,omitempty"`
			Groupcalls *[]CallManagerGroupcall `json:"groupcalls,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallsIdResponse parses an HTTP response from a DeleteCallsIdWithResponse call
func ParseDeleteCallsIdResponse(rsp *http.Response) (*DeleteCallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallsIdResponse parses an HTTP response from a GetCallsIdWithResponse call
func ParseGetCallsIdResponse(rsp *http.Response) (*GetCallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCallsIdHangupResponse parses an HTTP response from a PostCallsIdHangupWithResponse call
func ParsePostCallsIdHangupResponse(rsp *http.Response) (*PostCallsIdHangupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdHangupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallsIdHoldResponse parses an HTTP response from a DeleteCallsIdHoldWithResponse call
func ParseDeleteCallsIdHoldResponse(rsp *http.Response) (*DeleteCallsIdHoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdHoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdHoldResponse parses an HTTP response from a PostCallsIdHoldWithResponse call
func ParsePostCallsIdHoldResponse(rsp *http.Response) (*PostCallsIdHoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdHoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCallsIdMediaStreamResponse parses an HTTP response from a GetCallsIdMediaStreamWithResponse call
func ParseGetCallsIdMediaStreamResponse(rsp *http.Response) (*GetCallsIdMediaStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallsIdMediaStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCallsIdMohResponse parses an HTTP response from a DeleteCallsIdMohWithResponse call
func ParseDeleteCallsIdMohResponse(rsp *http.Response) (*DeleteCallsIdMohResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdMohResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdMohResponse parses an HTTP response from a PostCallsIdMohWithResponse call
func ParsePostCallsIdMohResponse(rsp *http.Response) (*PostCallsIdMohResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdMohResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCallsIdMuteResponse parses an HTTP response from a DeleteCallsIdMuteWithResponse call
func ParseDeleteCallsIdMuteResponse(rsp *http.Response) (*DeleteCallsIdMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdMuteResponse parses an HTTP response from a PostCallsIdMuteWithResponse call
func ParsePostCallsIdMuteResponse(rsp *http.Response) (*PostCallsIdMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCallsIdSilenceResponse parses an HTTP response from a DeleteCallsIdSilenceWithResponse call
func ParseDeleteCallsIdSilenceResponse(rsp *http.Response) (*DeleteCallsIdSilenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallsIdSilenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdSilenceResponse parses an HTTP response from a PostCallsIdSilenceWithResponse call
func ParsePostCallsIdSilenceResponse(rsp *http.Response) (*PostCallsIdSilenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdSilenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallsIdTalkResponse parses an HTTP response from a PostCallsIdTalkWithResponse call
func ParsePostCallsIdTalkResponse(rsp *http.Response) (*PostCallsIdTalkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallsIdTalkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCampaigncallsResponse parses an HTTP response from a GetCampaigncallsWithResponse call
func ParseGetCampaigncallsResponse(rsp *http.Response) (*GetCampaigncallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaigncallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCampaigncallsIdResponse parses an HTTP response from a DeleteCampaigncallsIdWithResponse call
func ParseDeleteCampaigncallsIdResponse(rsp *http.Response) (*DeleteCampaigncallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaigncallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaigncall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaigncallsIdResponse parses an HTTP response from a GetCampaigncallsIdWithResponse call
func ParseGetCampaigncallsIdResponse(rsp *http.Response) (*GetCampaigncallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaigncallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaigncall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaignsResponse parses an HTTP response from a GetCampaignsWithResponse call
func ParseGetCampaignsResponse(rsp *http.Response) (*GetCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                    `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerCampaign `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCampaignsResponse parses an HTTP response from a PostCampaignsWithResponse call
func ParsePostCampaignsResponse(rsp *http.Response) (*PostCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCampaignsIdResponse parses an HTTP response from a DeleteCampaignsIdWithResponse call
func ParseDeleteCampaignsIdResponse(rsp *http.Response) (*DeleteCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaignsIdResponse parses an HTTP response from a GetCampaignsIdWithResponse call
func ParseGetCampaignsIdResponse(rsp *http.Response) (*GetCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdResponse parses an HTTP response from a PutCampaignsIdWithResponse call
func ParsePutCampaignsIdResponse(rsp *http.Response) (*PutCampaignsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdActionsResponse parses an HTTP response from a PutCampaignsIdActionsWithResponse call
func ParsePutCampaignsIdActionsResponse(rsp *http.Response) (*PutCampaignsIdActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCampaignsIdCampaigncallsResponse parses an HTTP response from a GetCampaignsIdCampaigncallsWithResponse call
func ParseGetCampaignsIdCampaigncallsResponse(rsp *http.Response) (*GetCampaignsIdCampaigncallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignsIdCampaigncallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerCampaigncall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdNextCampaignIdResponse parses an HTTP response from a PutCampaignsIdNextCampaignIdWithResponse call
func ParsePutCampaignsIdNextCampaignIdResponse(rsp *http.Response) (*PutCampaignsIdNextCampaignIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdNextCampaignIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdResourceInfoResponse parses an HTTP response from a PutCampaignsIdResourceInfoWithResponse call
func ParsePutCampaignsIdResourceInfoResponse(rsp *http.Response) (*PutCampaignsIdResourceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdResourceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdServiceLevelResponse parses an HTTP response from a PutCampaignsIdServiceLevelWithResponse call
func ParsePutCampaignsIdServiceLevelResponse(rsp *http.Response) (*PutCampaignsIdServiceLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdServiceLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCampaignsIdStatusResponse parses an HTTP response from a PutCampaignsIdStatusWithResponse call
func ParsePutCampaignsIdStatusResponse(rsp *http.Response) (*PutCampaignsIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCampaignsIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerCampaign
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotcallsResponse parses an HTTP response from a GetChatbotcallsWithResponse call
func ParseGetChatbotcallsResponse(rsp *http.Response) (*GetChatbotcallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotcallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                      `json:"next_page_token,omitempty"`
			Result        *[]ChatbotManagerChatbotcall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatbotcallsIdResponse parses an HTTP response from a DeleteChatbotcallsIdWithResponse call
func ParseDeleteChatbotcallsIdResponse(rsp *http.Response) (*DeleteChatbotcallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatbotcallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbotcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotcallsIdResponse parses an HTTP response from a GetChatbotcallsIdWithResponse call
func ParseGetChatbotcallsIdResponse(rsp *http.Response) (*GetChatbotcallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotcallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbotcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotsResponse parses an HTTP response from a GetChatbotsWithResponse call
func ParseGetChatbotsResponse(rsp *http.Response) (*GetChatbotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]ChatbotManagerChatbot `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatbotsResponse parses an HTTP response from a PostChatbotsWithResponse call
func ParsePostChatbotsResponse(rsp *http.Response) (*PostChatbotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatbotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatbotsIdResponse parses an HTTP response from a DeleteChatbotsIdWithResponse call
func ParseDeleteChatbotsIdResponse(rsp *http.Response) (*DeleteChatbotsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatbotsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatbotsIdResponse parses an HTTP response from a GetChatbotsIdWithResponse call
func ParseGetChatbotsIdResponse(rsp *http.Response) (*GetChatbotsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatbotsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatbotsIdResponse parses an HTTP response from a PutChatbotsIdWithResponse call
func ParsePutChatbotsIdResponse(rsp *http.Response) (*PutChatbotsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatbotsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatbotManagerChatbot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatmessagesResponse parses an HTTP response from a GetChatmessagesWithResponse call
func ParseGetChatmessagesResponse(rsp *http.Response) (*GetChatmessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatmessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                   `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerMessagechat `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatmessagesResponse parses an HTTP response from a PostChatmessagesWithResponse call
func ParsePostChatmessagesResponse(rsp *http.Response) (*PostChatmessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatmessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatmessagesIdResponse parses an HTTP response from a DeleteChatmessagesIdWithResponse call
func ParseDeleteChatmessagesIdResponse(rsp *http.Response) (*DeleteChatmessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatmessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatmessagesIdResponse parses an HTTP response from a GetChatmessagesIdWithResponse call
func ParseGetChatmessagesIdResponse(rsp *http.Response) (*GetChatmessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatmessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroommessagesResponse parses an HTTP response from a GetChatroommessagesWithResponse call
func ParseGetChatroommessagesResponse(rsp *http.Response) (*GetChatroommessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroommessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                       `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatroommessagesResponse parses an HTTP response from a PostChatroommessagesWithResponse call
func ParsePostChatroommessagesResponse(rsp *http.Response) (*PostChatroommessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatroommessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatroommessagesIdResponse parses an HTTP response from a DeleteChatroommessagesIdWithResponse call
func ParseDeleteChatroommessagesIdResponse(rsp *http.Response) (*DeleteChatroommessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatroommessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroommessagesIdResponse parses an HTTP response from a GetChatroommessagesIdWithResponse call
func ParseGetChatroommessagesIdResponse(rsp *http.Response) (*GetChatroommessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroommessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroomsResponse parses an HTTP response from a GetChatroomsWithResponse call
func ParseGetChatroomsResponse(rsp *http.Response) (*GetChatroomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerChatroom `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatroomsResponse parses an HTTP response from a PostChatroomsWithResponse call
func ParsePostChatroomsResponse(rsp *http.Response) (*PostChatroomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatroomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatroomsIdResponse parses an HTTP response from a DeleteChatroomsIdWithResponse call
func ParseDeleteChatroomsIdResponse(rsp *http.Response) (*DeleteChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatroomsIdResponse parses an HTTP response from a GetChatroomsIdWithResponse call
func ParseGetChatroomsIdResponse(rsp *http.Response) (*GetChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatroomsIdResponse parses an HTTP response from a PutChatroomsIdWithResponse call
func ParsePutChatroomsIdResponse(rsp *http.Response) (*PutChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatsResponse parses an HTTP response from a GetChatsWithResponse call
func ParseGetChatsResponse(rsp *http.Response) (*GetChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string            `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerChat `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatsResponse parses an HTTP response from a PostChatsWithResponse call
func ParsePostChatsResponse(rsp *http.Response) (*PostChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatsIdResponse parses an HTTP response from a DeleteChatsIdWithResponse call
func ParseDeleteChatsIdResponse(rsp *http.Response) (*DeleteChatsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChatsIdResponse parses an HTTP response from a GetChatsIdWithResponse call
func ParseGetChatsIdResponse(rsp *http.Response) (*GetChatsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChatsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatsIdResponse parses an HTTP response from a PutChatsIdWithResponse call
func ParsePutChatsIdResponse(rsp *http.Response) (*PutChatsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChatsIdParticipantIdsResponse parses an HTTP response from a PostChatsIdParticipantIdsWithResponse call
func ParsePostChatsIdParticipantIdsResponse(rsp *http.Response) (*PostChatsIdParticipantIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChatsIdParticipantIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChatsIdParticipantIdsParticipantIdResponse parses an HTTP response from a DeleteChatsIdParticipantIdsParticipantIdWithResponse call
func ParseDeleteChatsIdParticipantIdsParticipantIdResponse(rsp *http.Response) (*DeleteChatsIdParticipantIdsParticipantIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChatsIdParticipantIdsParticipantIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChatsIdRoomOwnerIdResponse parses an HTTP response from a PutChatsIdRoomOwnerIdWithResponse call
func ParsePutChatsIdRoomOwnerIdResponse(rsp *http.Response) (*PutChatsIdRoomOwnerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChatsIdRoomOwnerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencecallsResponse parses an HTTP response from a GetConferencecallsWithResponse call
func ParseGetConferencecallsResponse(rsp *http.Response) (*GetConferencecallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencecallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                            `json:"next_page_token,omitempty"`
			Result        *[]ConferenceManagerConferencecall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConferencecallsIdResponse parses an HTTP response from a DeleteConferencecallsIdWithResponse call
func ParseDeleteConferencecallsIdResponse(rsp *http.Response) (*DeleteConferencecallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConferencecallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConferencecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencecallsIdResponse parses an HTTP response from a GetConferencecallsIdWithResponse call
func ParseGetConferencecallsIdResponse(rsp *http.Response) (*GetConferencecallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencecallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConferencecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencesResponse parses an HTTP response from a GetConferencesWithResponse call
func ParseGetConferencesResponse(rsp *http.Response) (*GetConferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]ConferenceManagerConference `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConferencesResponse parses an HTTP response from a PostConferencesWithResponse call
func ParsePostConferencesResponse(rsp *http.Response) (*PostConferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConferencesIdResponse parses an HTTP response from a DeleteConferencesIdWithResponse call
func ParseDeleteConferencesIdResponse(rsp *http.Response) (*DeleteConferencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConferencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencesIdResponse parses an HTTP response from a GetConferencesIdWithResponse call
func ParseGetConferencesIdResponse(rsp *http.Response) (*GetConferencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConferencesIdResponse parses an HTTP response from a PutConferencesIdWithResponse call
func ParsePutConferencesIdResponse(rsp *http.Response) (*PutConferencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConferencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConferenceManagerConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConferencesIdMediaStreamResponse parses an HTTP response from a GetConferencesIdMediaStreamWithResponse call
func ParseGetConferencesIdMediaStreamResponse(rsp *http.Response) (*GetConferencesIdMediaStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConferencesIdMediaStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdRecordingStartResponse parses an HTTP response from a PostConferencesIdRecordingStartWithResponse call
func ParsePostConferencesIdRecordingStartResponse(rsp *http.Response) (*PostConferencesIdRecordingStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdRecordingStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdRecordingStopResponse parses an HTTP response from a PostConferencesIdRecordingStopWithResponse call
func ParsePostConferencesIdRecordingStopResponse(rsp *http.Response) (*PostConferencesIdRecordingStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdRecordingStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdTranscribeStartResponse parses an HTTP response from a PostConferencesIdTranscribeStartWithResponse call
func ParsePostConferencesIdTranscribeStartResponse(rsp *http.Response) (*PostConferencesIdTranscribeStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdTranscribeStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConferencesIdTranscribeStopResponse parses an HTTP response from a PostConferencesIdTranscribeStopWithResponse call
func ParsePostConferencesIdTranscribeStopResponse(rsp *http.Response) (*PostConferencesIdTranscribeStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConferencesIdTranscribeStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConversationAccountsResponse parses an HTTP response from a GetConversationAccountsWithResponse call
func ParseGetConversationAccountsResponse(rsp *http.Response) (*GetConversationAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                       `json:"next_page_token,omitempty"`
			Result        *[]ConversationManagerAccount `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConversationAccountsResponse parses an HTTP response from a PostConversationAccountsWithResponse call
func ParsePostConversationAccountsResponse(rsp *http.Response) (*PostConversationAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConversationAccountsIdResponse parses an HTTP response from a DeleteConversationAccountsIdWithResponse call
func ParseDeleteConversationAccountsIdResponse(rsp *http.Response) (*DeleteConversationAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConversationAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationAccountsIdResponse parses an HTTP response from a GetConversationAccountsIdWithResponse call
func ParseGetConversationAccountsIdResponse(rsp *http.Response) (*GetConversationAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConversationAccountsIdResponse parses an HTTP response from a PutConversationAccountsIdWithResponse call
func ParsePutConversationAccountsIdResponse(rsp *http.Response) (*PutConversationAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConversationAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationsResponse parses an HTTP response from a GetConversationsWithResponse call
func ParseGetConversationsResponse(rsp *http.Response) (*GetConversationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                            `json:"next_page_token,omitempty"`
			Result        *[]ConversationManagerConversation `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationsIdResponse parses an HTTP response from a GetConversationsIdWithResponse call
func ParseGetConversationsIdResponse(rsp *http.Response) (*GetConversationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerConversation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConversationsIdResponse parses an HTTP response from a PutConversationsIdWithResponse call
func ParsePutConversationsIdResponse(rsp *http.Response) (*PutConversationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConversationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerConversation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConversationsIdMessagesResponse parses an HTTP response from a GetConversationsIdMessagesWithResponse call
func ParseGetConversationsIdMessagesResponse(rsp *http.Response) (*GetConversationsIdMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConversationsIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                       `json:"next_page_token,omitempty"`
			Result        *[]ConversationManagerMessage `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConversationsIdMessagesResponse parses an HTTP response from a PostConversationsIdMessagesWithResponse call
func ParsePostConversationsIdMessagesResponse(rsp *http.Response) (*PostConversationsIdMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConversationsIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerResponse parses an HTTP response from a GetCustomerWithResponse call
func ParseGetCustomerResponse(rsp *http.Response) (*GetCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomerResponse parses an HTTP response from a PutCustomerWithResponse call
func ParsePutCustomerResponse(rsp *http.Response) (*PutCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomerBillingAccountIdResponse parses an HTTP response from a PutCustomerBillingAccountIdWithResponse call
func ParsePutCustomerBillingAccountIdResponse(rsp *http.Response) (*PutCustomerBillingAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomerBillingAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersResponse parses an HTTP response from a GetCustomersWithResponse call
func ParseGetCustomersResponse(rsp *http.Response) (*GetCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                    `json:"next_page_token,omitempty"`
			Result        *[]CustomerManagerCustomer `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersResponse parses an HTTP response from a PostCustomersWithResponse call
func ParsePostCustomersResponse(rsp *http.Response) (*PostCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCustomersIdResponse parses an HTTP response from a DeleteCustomersIdWithResponse call
func ParseDeleteCustomersIdResponse(rsp *http.Response) (*DeleteCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersIdResponse parses an HTTP response from a GetCustomersIdWithResponse call
func ParseGetCustomersIdResponse(rsp *http.Response) (*GetCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomersIdResponse parses an HTTP response from a PutCustomersIdWithResponse call
func ParsePutCustomersIdResponse(rsp *http.Response) (*PutCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomersIdBillingAccountIdResponse parses an HTTP response from a PutCustomersIdBillingAccountIdWithResponse call
func ParsePutCustomersIdBillingAccountIdResponse(rsp *http.Response) (*PutCustomersIdBillingAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomersIdBillingAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExtensionsResponse parses an HTTP response from a GetExtensionsWithResponse call
func ParseGetExtensionsResponse(rsp *http.Response) (*GetExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                      `json:"next_page_token,omitempty"`
			Result        *[]RegistrarManagerExtension `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostExtensionsResponse parses an HTTP response from a PostExtensionsWithResponse call
func ParsePostExtensionsResponse(rsp *http.Response) (*PostExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteExtensionsIdResponse parses an HTTP response from a DeleteExtensionsIdWithResponse call
func ParseDeleteExtensionsIdResponse(rsp *http.Response) (*DeleteExtensionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExtensionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExtensionsIdResponse parses an HTTP response from a GetExtensionsIdWithResponse call
func ParseGetExtensionsIdResponse(rsp *http.Response) (*GetExtensionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExtensionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutExtensionsIdResponse parses an HTTP response from a PutExtensionsIdWithResponse call
func ParsePutExtensionsIdResponse(rsp *http.Response) (*PutExtensionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutExtensionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFilesResponse parses an HTTP response from a GetFilesWithResponse call
func ParseGetFilesResponse(rsp *http.Response) (*GetFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string               `json:"next_page_token,omitempty"`
			Result        *[]StorageManagerFile `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFilesResponse parses an HTTP response from a PostFilesWithResponse call
func ParsePostFilesResponse(rsp *http.Response) (*PostFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFilesIdResponse parses an HTTP response from a DeleteFilesIdWithResponse call
func ParseDeleteFilesIdResponse(rsp *http.Response) (*DeleteFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFilesIdResponse parses an HTTP response from a GetFilesIdWithResponse call
func ParseGetFilesIdResponse(rsp *http.Response) (*GetFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFlowsResponse parses an HTTP response from a GetFlowsWithResponse call
func ParseGetFlowsResponse(rsp *http.Response) (*GetFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string            `json:"next_page_token,omitempty"`
			Result        *[]FlowManagerFlow `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFlowsResponse parses an HTTP response from a PostFlowsWithResponse call
func ParsePostFlowsResponse(rsp *http.Response) (*PostFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerFlow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFlowsIdResponse parses an HTTP response from a DeleteFlowsIdWithResponse call
func ParseDeleteFlowsIdResponse(rsp *http.Response) (*DeleteFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerFlow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFlowsIdResponse parses an HTTP response from a GetFlowsIdWithResponse call
func ParseGetFlowsIdResponse(rsp *http.Response) (*GetFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerFlow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutFlowsIdResponse parses an HTTP response from a PutFlowsIdWithResponse call
func ParsePutFlowsIdResponse(rsp *http.Response) (*PutFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowManagerFlow
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupcallsResponse parses an HTTP response from a GetGroupcallsWithResponse call
func ParseGetGroupcallsResponse(rsp *http.Response) (*GetGroupcallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupcallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                 `json:"next_page_token,omitempty"`
			Result        *[]CallManagerGroupcall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGroupcallsResponse parses an HTTP response from a PostGroupcallsWithResponse call
func ParsePostGroupcallsResponse(rsp *http.Response) (*PostGroupcallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupcallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerGroupcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGroupcallsIdResponse parses an HTTP response from a DeleteGroupcallsIdWithResponse call
func ParseDeleteGroupcallsIdResponse(rsp *http.Response) (*DeleteGroupcallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupcallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerGroupcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupcallsIdResponse parses an HTTP response from a GetGroupcallsIdWithResponse call
func ParseGetGroupcallsIdResponse(rsp *http.Response) (*GetGroupcallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupcallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerGroupcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGroupcallsIdHangupResponse parses an HTTP response from a PostGroupcallsIdHangupWithResponse call
func ParsePostGroupcallsIdHangupResponse(rsp *http.Response) (*PostGroupcallsIdHangupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupcallsIdHangupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerGroupcall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessagesResponse parses an HTTP response from a GetMessagesWithResponse call
func ParseGetMessagesResponse(rsp *http.Response) (*GetMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]MessageManagerMessage `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessagesResponse parses an HTTP response from a PostMessagesWithResponse call
func ParsePostMessagesResponse(rsp *http.Response) (*PostMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageManagerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMessagesIdResponse parses an HTTP response from a DeleteMessagesIdWithResponse call
func ParseDeleteMessagesIdResponse(rsp *http.Response) (*DeleteMessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageManagerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessagesIdResponse parses an HTTP response from a GetMessagesIdWithResponse call
func ParseGetMessagesIdResponse(rsp *http.Response) (*GetMessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageManagerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNumbersResponse parses an HTTP response from a GetNumbersWithResponse call
func ParseGetNumbersResponse(rsp *http.Response) (*GetNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                `json:"next_page_token,omitempty"`
			Result        *[]NumberManagerNumber `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNumbersResponse parses an HTTP response from a PostNumbersWithResponse call
func ParsePostNumbersResponse(rsp *http.Response) (*PostNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberManagerNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNumbersRenewResponse parses an HTTP response from a PostNumbersRenewWithResponse call
func ParsePostNumbersRenewResponse(rsp *http.Response) (*PostNumbersRenewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNumbersRenewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NumberManagerNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNumbersIdResponse parses an HTTP response from a DeleteNumbersIdWithResponse call
func ParseDeleteNumbersIdResponse(rsp *http.Response) (*DeleteNumbersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNumbersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberManagerNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNumbersIdResponse parses an HTTP response from a GetNumbersIdWithResponse call
func ParseGetNumbersIdResponse(rsp *http.Response) (*GetNumbersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNumbersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberManagerNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutNumbersIdResponse parses an HTTP response from a PutNumbersIdWithResponse call
func ParsePutNumbersIdResponse(rsp *http.Response) (*PutNumbersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNumbersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberManagerNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutNumbersIdFlowIdsResponse parses an HTTP response from a PutNumbersIdFlowIdsWithResponse call
func ParsePutNumbersIdFlowIdsResponse(rsp *http.Response) (*PutNumbersIdFlowIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNumbersIdFlowIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NumberManagerNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutdialsResponse parses an HTTP response from a GetOutdialsWithResponse call
func ParseGetOutdialsResponse(rsp *http.Response) (*GetOutdialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutdialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]OutdialManagerOutdial `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOutdialsResponse parses an HTTP response from a PostOutdialsWithResponse call
func ParsePostOutdialsResponse(rsp *http.Response) (*PostOutdialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOutdialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOutdialsIdResponse parses an HTTP response from a DeleteOutdialsIdWithResponse call
func ParseDeleteOutdialsIdResponse(rsp *http.Response) (*DeleteOutdialsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOutdialsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutdialsIdResponse parses an HTTP response from a GetOutdialsIdWithResponse call
func ParseGetOutdialsIdResponse(rsp *http.Response) (*GetOutdialsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutdialsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOutdialsIdResponse parses an HTTP response from a PutOutdialsIdWithResponse call
func ParsePutOutdialsIdResponse(rsp *http.Response) (*PutOutdialsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOutdialsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOutdialsIdCampaignIdResponse parses an HTTP response from a PutOutdialsIdCampaignIdWithResponse call
func ParsePutOutdialsIdCampaignIdResponse(rsp *http.Response) (*PutOutdialsIdCampaignIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOutdialsIdCampaignIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOutdialsIdDataResponse parses an HTTP response from a PutOutdialsIdDataWithResponse call
func ParsePutOutdialsIdDataResponse(rsp *http.Response) (*PutOutdialsIdDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOutdialsIdDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdial
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutdialsIdTargetsResponse parses an HTTP response from a GetOutdialsIdTargetsWithResponse call
func ParseGetOutdialsIdTargetsResponse(rsp *http.Response) (*GetOutdialsIdTargetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutdialsIdTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]OutdialManagerOutdialtarget `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOutdialsIdTargetsResponse parses an HTTP response from a PostOutdialsIdTargetsWithResponse call
func ParsePostOutdialsIdTargetsResponse(rsp *http.Response) (*PostOutdialsIdTargetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOutdialsIdTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdialtarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOutdialsIdTargetsTargetIdResponse parses an HTTP response from a DeleteOutdialsIdTargetsTargetIdWithResponse call
func ParseDeleteOutdialsIdTargetsTargetIdResponse(rsp *http.Response) (*DeleteOutdialsIdTargetsTargetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOutdialsIdTargetsTargetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdialtarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutdialsIdTargetsTargetIdResponse parses an HTTP response from a GetOutdialsIdTargetsTargetIdWithResponse call
func ParseGetOutdialsIdTargetsTargetIdResponse(rsp *http.Response) (*GetOutdialsIdTargetsTargetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutdialsIdTargetsTargetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutdialManagerOutdialtarget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutplansResponse parses an HTTP response from a GetOutplansWithResponse call
func ParseGetOutplansResponse(rsp *http.Response) (*GetOutplansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutplansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                   `json:"next_page_token,omitempty"`
			Result        *[]CampaignManagerOutplan `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOutplansResponse parses an HTTP response from a PostOutplansWithResponse call
func ParsePostOutplansResponse(rsp *http.Response) (*PostOutplansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOutplansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerOutplan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOutplansIdResponse parses an HTTP response from a DeleteOutplansIdWithResponse call
func ParseDeleteOutplansIdResponse(rsp *http.Response) (*DeleteOutplansIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOutplansIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerOutplan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutplansIdResponse parses an HTTP response from a GetOutplansIdWithResponse call
func ParseGetOutplansIdResponse(rsp *http.Response) (*GetOutplansIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutplansIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerOutplan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOutplansIdResponse parses an HTTP response from a PutOutplansIdWithResponse call
func ParsePutOutplansIdResponse(rsp *http.Response) (*PutOutplansIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOutplansIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerOutplan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOutplansIdDialInfoResponse parses an HTTP response from a PutOutplansIdDialInfoWithResponse call
func ParsePutOutplansIdDialInfoResponse(rsp *http.Response) (*PutOutplansIdDialInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOutplansIdDialInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CampaignManagerOutplan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProvidersResponse parses an HTTP response from a GetProvidersWithResponse call
func ParseGetProvidersResponse(rsp *http.Response) (*GetProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                 `json:"next_page_token,omitempty"`
			Result        *[]RouteManagerProvider `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProvidersResponse parses an HTTP response from a PostProvidersWithResponse call
func ParsePostProvidersResponse(rsp *http.Response) (*PostProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProvidersIdResponse parses an HTTP response from a DeleteProvidersIdWithResponse call
func ParseDeleteProvidersIdResponse(rsp *http.Response) (*DeleteProvidersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProvidersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProvidersIdResponse parses an HTTP response from a GetProvidersIdWithResponse call
func ParseGetProvidersIdResponse(rsp *http.Response) (*GetProvidersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProvidersIdResponse parses an HTTP response from a PutProvidersIdWithResponse call
func ParsePutProvidersIdResponse(rsp *http.Response) (*PutProvidersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProvidersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetQueuecallsResponse parses an HTTP response from a GetQueuecallsWithResponse call
func ParseGetQueuecallsResponse(rsp *http.Response) (*GetQueuecallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueuecallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]QueueManagerQueuecall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueuecallsReferenceIdIdKickResponse parses an HTTP response from a PostQueuecallsReferenceIdIdKickWithResponse call
func ParsePostQueuecallsReferenceIdIdKickResponse(rsp *http.Response) (*PostQueuecallsReferenceIdIdKickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueuecallsReferenceIdIdKickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueuecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteQueuecallsIdResponse parses an HTTP response from a DeleteQueuecallsIdWithResponse call
func ParseDeleteQueuecallsIdResponse(rsp *http.Response) (*DeleteQueuecallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteQueuecallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueuecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetQueuecallsIdResponse parses an HTTP response from a GetQueuecallsIdWithResponse call
func ParseGetQueuecallsIdResponse(rsp *http.Response) (*GetQueuecallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueuecallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueuecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueuecallsIdKickResponse parses an HTTP response from a PostQueuecallsIdKickWithResponse call
func ParsePostQueuecallsIdKickResponse(rsp *http.Response) (*PostQueuecallsIdKickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueuecallsIdKickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueuecall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetQueuesResponse parses an HTTP response from a GetQueuesWithResponse call
func ParseGetQueuesResponse(rsp *http.Response) (*GetQueuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string              `json:"next_page_token,omitempty"`
			Result        *[]QueueManagerQueue `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostQueuesResponse parses an HTTP response from a PostQueuesWithResponse call
func ParsePostQueuesResponse(rsp *http.Response) (*PostQueuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostQueuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteQueuesIdResponse parses an HTTP response from a DeleteQueuesIdWithResponse call
func ParseDeleteQueuesIdResponse(rsp *http.Response) (*DeleteQueuesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteQueuesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetQueuesIdResponse parses an HTTP response from a GetQueuesIdWithResponse call
func ParseGetQueuesIdResponse(rsp *http.Response) (*GetQueuesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQueuesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutQueuesIdResponse parses an HTTP response from a PutQueuesIdWithResponse call
func ParsePutQueuesIdResponse(rsp *http.Response) (*PutQueuesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutQueuesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutQueuesIdActionsResponse parses an HTTP response from a PutQueuesIdActionsWithResponse call
func ParsePutQueuesIdActionsResponse(rsp *http.Response) (*PutQueuesIdActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutQueuesIdActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutQueuesIdRoutingMethodResponse parses an HTTP response from a PutQueuesIdRoutingMethodWithResponse call
func ParsePutQueuesIdRoutingMethodResponse(rsp *http.Response) (*PutQueuesIdRoutingMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutQueuesIdRoutingMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutQueuesIdTagIdsResponse parses an HTTP response from a PutQueuesIdTagIdsWithResponse call
func ParsePutQueuesIdTagIdsResponse(rsp *http.Response) (*PutQueuesIdTagIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutQueuesIdTagIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueueManagerQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecordingfilesIdResponse parses an HTTP response from a GetRecordingfilesIdWithResponse call
func ParseGetRecordingfilesIdResponse(rsp *http.Response) (*GetRecordingfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecordingfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRecordingsResponse parses an HTTP response from a GetRecordingsWithResponse call
func ParseGetRecordingsResponse(rsp *http.Response) (*GetRecordingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecordingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                 `json:"next_page_token,omitempty"`
			Result        *[]CallManagerRecording `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingsIdResponse parses an HTTP response from a DeleteRecordingsIdWithResponse call
func ParseDeleteRecordingsIdResponse(rsp *http.Response) (*DeleteRecordingsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecordingsIdResponse parses an HTTP response from a GetRecordingsIdWithResponse call
func ParseGetRecordingsIdResponse(rsp *http.Response) (*GetRecordingsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecordingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoutesResponse parses an HTTP response from a GetRoutesWithResponse call
func ParseGetRoutesResponse(rsp *http.Response) (*GetRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string              `json:"next_page_token,omitempty"`
			Result        *[]RouteManagerRoute `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRoutesResponse parses an HTTP response from a PostRoutesWithResponse call
func ParsePostRoutesResponse(rsp *http.Response) (*PostRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRoutesIdResponse parses an HTTP response from a DeleteRoutesIdWithResponse call
func ParseDeleteRoutesIdResponse(rsp *http.Response) (*DeleteRoutesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoutesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoutesIdResponse parses an HTTP response from a GetRoutesIdWithResponse call
func ParseGetRoutesIdResponse(rsp *http.Response) (*GetRoutesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoutesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRoutesIdResponse parses an HTTP response from a PutRoutesIdWithResponse call
func ParsePutRoutesIdResponse(rsp *http.Response) (*PutRoutesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRoutesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RouteManagerRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsAgentsResponse parses an HTTP response from a GetServiceAgentsAgentsWithResponse call
func ParseGetServiceAgentsAgentsResponse(rsp *http.Response) (*GetServiceAgentsAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string              `json:"next_page_token,omitempty"`
			Result        *[]AgentManagerAgent `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsAgentsIdResponse parses an HTTP response from a GetServiceAgentsAgentsIdWithResponse call
func ParseGetServiceAgentsAgentsIdResponse(rsp *http.Response) (*GetServiceAgentsAgentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsAgentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsCallsResponse parses an HTTP response from a GetServiceAgentsCallsWithResponse call
func ParseGetServiceAgentsCallsResponse(rsp *http.Response) (*GetServiceAgentsCallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsCallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string            `json:"next_page_token,omitempty"`
			Result        *[]CallManagerCall `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsCallsIdResponse parses an HTTP response from a GetServiceAgentsCallsIdWithResponse call
func ParseGetServiceAgentsCallsIdResponse(rsp *http.Response) (*GetServiceAgentsCallsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsCallsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallManagerCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsChatroommessagesResponse parses an HTTP response from a GetServiceAgentsChatroommessagesWithResponse call
func ParseGetServiceAgentsChatroommessagesResponse(rsp *http.Response) (*GetServiceAgentsChatroommessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsChatroommessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                       `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerMessagechatroom `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceAgentsChatroommessagesResponse parses an HTTP response from a PostServiceAgentsChatroommessagesWithResponse call
func ParsePostServiceAgentsChatroommessagesResponse(rsp *http.Response) (*PostServiceAgentsChatroommessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceAgentsChatroommessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServiceAgentsChatroommessagesIdResponse parses an HTTP response from a DeleteServiceAgentsChatroommessagesIdWithResponse call
func ParseDeleteServiceAgentsChatroommessagesIdResponse(rsp *http.Response) (*DeleteServiceAgentsChatroommessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceAgentsChatroommessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsChatroommessagesIdResponse parses an HTTP response from a GetServiceAgentsChatroommessagesIdWithResponse call
func ParseGetServiceAgentsChatroommessagesIdResponse(rsp *http.Response) (*GetServiceAgentsChatroommessagesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsChatroommessagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerMessagechatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsChatroomsResponse parses an HTTP response from a GetServiceAgentsChatroomsWithResponse call
func ParseGetServiceAgentsChatroomsResponse(rsp *http.Response) (*GetServiceAgentsChatroomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsChatroomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                `json:"next_page_token,omitempty"`
			Result        *[]ChatManagerChatroom `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceAgentsChatroomsResponse parses an HTTP response from a PostServiceAgentsChatroomsWithResponse call
func ParsePostServiceAgentsChatroomsResponse(rsp *http.Response) (*PostServiceAgentsChatroomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceAgentsChatroomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServiceAgentsChatroomsIdResponse parses an HTTP response from a DeleteServiceAgentsChatroomsIdWithResponse call
func ParseDeleteServiceAgentsChatroomsIdResponse(rsp *http.Response) (*DeleteServiceAgentsChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceAgentsChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsChatroomsIdResponse parses an HTTP response from a GetServiceAgentsChatroomsIdWithResponse call
func ParseGetServiceAgentsChatroomsIdResponse(rsp *http.Response) (*GetServiceAgentsChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceAgentsChatroomsIdResponse parses an HTTP response from a PutServiceAgentsChatroomsIdWithResponse call
func ParsePutServiceAgentsChatroomsIdResponse(rsp *http.Response) (*PutServiceAgentsChatroomsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceAgentsChatroomsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatManagerChatroom
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsConversationsResponse parses an HTTP response from a GetServiceAgentsConversationsWithResponse call
func ParseGetServiceAgentsConversationsResponse(rsp *http.Response) (*GetServiceAgentsConversationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                            `json:"next_page_token,omitempty"`
			Result        *[]ConversationManagerConversation `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsConversationsIdResponse parses an HTTP response from a GetServiceAgentsConversationsIdWithResponse call
func ParseGetServiceAgentsConversationsIdResponse(rsp *http.Response) (*GetServiceAgentsConversationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsConversationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerConversation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsConversationsIdMessagesResponse parses an HTTP response from a GetServiceAgentsConversationsIdMessagesWithResponse call
func ParseGetServiceAgentsConversationsIdMessagesResponse(rsp *http.Response) (*GetServiceAgentsConversationsIdMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsConversationsIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                       `json:"next_page_token,omitempty"`
			Result        *[]ConversationManagerMessage `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceAgentsConversationsIdMessagesResponse parses an HTTP response from a PostServiceAgentsConversationsIdMessagesWithResponse call
func ParsePostServiceAgentsConversationsIdMessagesResponse(rsp *http.Response) (*PostServiceAgentsConversationsIdMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceAgentsConversationsIdMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationManagerMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsCustomerResponse parses an HTTP response from a GetServiceAgentsCustomerWithResponse call
func ParseGetServiceAgentsCustomerResponse(rsp *http.Response) (*GetServiceAgentsCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerManagerCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsExtensionsResponse parses an HTTP response from a GetServiceAgentsExtensionsWithResponse call
func ParseGetServiceAgentsExtensionsResponse(rsp *http.Response) (*GetServiceAgentsExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                      `json:"next_page_token,omitempty"`
			Result        *[]RegistrarManagerExtension `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsExtensionsIdResponse parses an HTTP response from a GetServiceAgentsExtensionsIdWithResponse call
func ParseGetServiceAgentsExtensionsIdResponse(rsp *http.Response) (*GetServiceAgentsExtensionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsExtensionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsFilesResponse parses an HTTP response from a GetServiceAgentsFilesWithResponse call
func ParseGetServiceAgentsFilesResponse(rsp *http.Response) (*GetServiceAgentsFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string               `json:"next_page_token,omitempty"`
			Result        *[]StorageManagerFile `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceAgentsFilesResponse parses an HTTP response from a PostServiceAgentsFilesWithResponse call
func ParsePostServiceAgentsFilesResponse(rsp *http.Response) (*PostServiceAgentsFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceAgentsFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServiceAgentsFilesIdResponse parses an HTTP response from a DeleteServiceAgentsFilesIdWithResponse call
func ParseDeleteServiceAgentsFilesIdResponse(rsp *http.Response) (*DeleteServiceAgentsFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceAgentsFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsFilesIdResponse parses an HTTP response from a GetServiceAgentsFilesIdWithResponse call
func ParseGetServiceAgentsFilesIdResponse(rsp *http.Response) (*GetServiceAgentsFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsMeResponse parses an HTTP response from a GetServiceAgentsMeWithResponse call
func ParseGetServiceAgentsMeResponse(rsp *http.Response) (*GetServiceAgentsMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceAgentsMeResponse parses an HTTP response from a PutServiceAgentsMeWithResponse call
func ParsePutServiceAgentsMeResponse(rsp *http.Response) (*PutServiceAgentsMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceAgentsMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceAgentsMeAddressesResponse parses an HTTP response from a PutServiceAgentsMeAddressesWithResponse call
func ParsePutServiceAgentsMeAddressesResponse(rsp *http.Response) (*PutServiceAgentsMeAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceAgentsMeAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceAgentsMePasswordResponse parses an HTTP response from a PutServiceAgentsMePasswordWithResponse call
func ParsePutServiceAgentsMePasswordResponse(rsp *http.Response) (*PutServiceAgentsMePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceAgentsMePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceAgentsMeStatusResponse parses an HTTP response from a PutServiceAgentsMeStatusWithResponse call
func ParsePutServiceAgentsMeStatusResponse(rsp *http.Response) (*PutServiceAgentsMeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceAgentsMeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentManagerAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAgentsWsResponse parses an HTTP response from a GetServiceAgentsWsWithResponse call
func ParseGetServiceAgentsWsResponse(rsp *http.Response) (*GetServiceAgentsWsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAgentsWsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStorageAccountResponse parses an HTTP response from a GetStorageAccountWithResponse call
func ParseGetStorageAccountResponse(rsp *http.Response) (*GetStorageAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageAccountsResponse parses an HTTP response from a GetStorageAccountsWithResponse call
func ParseGetStorageAccountsResponse(rsp *http.Response) (*GetStorageAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]StorageManagerAccount `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStorageAccountsResponse parses an HTTP response from a PostStorageAccountsWithResponse call
func ParsePostStorageAccountsResponse(rsp *http.Response) (*PostStorageAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStorageAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStorageAccountsIdResponse parses an HTTP response from a DeleteStorageAccountsIdWithResponse call
func ParseDeleteStorageAccountsIdResponse(rsp *http.Response) (*DeleteStorageAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageAccountsIdResponse parses an HTTP response from a GetStorageAccountsIdWithResponse call
func ParseGetStorageAccountsIdResponse(rsp *http.Response) (*GetStorageAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageFilesResponse parses an HTTP response from a GetStorageFilesWithResponse call
func ParseGetStorageFilesResponse(rsp *http.Response) (*GetStorageFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string               `json:"next_page_token,omitempty"`
			Result        *[]StorageManagerFile `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStorageFilesResponse parses an HTTP response from a PostStorageFilesWithResponse call
func ParsePostStorageFilesResponse(rsp *http.Response) (*PostStorageFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStorageFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStorageFilesIdResponse parses an HTTP response from a DeleteStorageFilesIdWithResponse call
func ParseDeleteStorageFilesIdResponse(rsp *http.Response) (*DeleteStorageFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStorageFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStorageFilesIdResponse parses an HTTP response from a GetStorageFilesIdWithResponse call
func ParseGetStorageFilesIdResponse(rsp *http.Response) (*GetStorageFilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageFilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageManagerFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string          `json:"next_page_token,omitempty"`
			Result        *[]TagManagerTag `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTagsResponse parses an HTTP response from a PostTagsWithResponse call
func ParsePostTagsResponse(rsp *http.Response) (*PostTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagManagerTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTagsIdResponse parses an HTTP response from a DeleteTagsIdWithResponse call
func ParseDeleteTagsIdResponse(rsp *http.Response) (*DeleteTagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagManagerTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsIdResponse parses an HTTP response from a GetTagsIdWithResponse call
func ParseGetTagsIdResponse(rsp *http.Response) (*GetTagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagManagerTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTagsIdResponse parses an HTTP response from a PutTagsIdWithResponse call
func ParsePutTagsIdResponse(rsp *http.Response) (*PutTagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagManagerTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTranscribesResponse parses an HTTP response from a GetTranscribesWithResponse call
func ParseGetTranscribesResponse(rsp *http.Response) (*GetTranscribesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTranscribesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]TranscribeManagerTranscribe `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTranscribesResponse parses an HTTP response from a PostTranscribesWithResponse call
func ParsePostTranscribesResponse(rsp *http.Response) (*PostTranscribesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTranscribesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TranscribeManagerTranscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTranscribesIdResponse parses an HTTP response from a DeleteTranscribesIdWithResponse call
func ParseDeleteTranscribesIdResponse(rsp *http.Response) (*DeleteTranscribesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTranscribesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TranscribeManagerTranscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTranscribesIdResponse parses an HTTP response from a GetTranscribesIdWithResponse call
func ParseGetTranscribesIdResponse(rsp *http.Response) (*GetTranscribesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTranscribesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TranscribeManagerTranscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTranscribesIdStopResponse parses an HTTP response from a PostTranscribesIdStopWithResponse call
func ParsePostTranscribesIdStopResponse(rsp *http.Response) (*PostTranscribesIdStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTranscribesIdStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TranscribeManagerTranscribe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTranscriptsResponse parses an HTTP response from a GetTranscriptsWithResponse call
func ParseGetTranscriptsResponse(rsp *http.Response) (*GetTranscriptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTranscriptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                        `json:"next_page_token,omitempty"`
			Result        *[]TranscribeManagerTranscript `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTransfersResponse parses an HTTP response from a PostTransfersWithResponse call
func ParsePostTransfersResponse(rsp *http.Response) (*PostTransfersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransfersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransferManagerTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTrunksResponse parses an HTTP response from a GetTrunksWithResponse call
func ParseGetTrunksResponse(rsp *http.Response) (*GetTrunksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrunksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// NextPageToken The token for next pagination.
			NextPageToken *string                  `json:"next_page_token,omitempty"`
			Result        *[]RegistrarManagerTrunk `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTrunksResponse parses an HTTP response from a PostTrunksWithResponse call
func ParsePostTrunksResponse(rsp *http.Response) (*PostTrunksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTrunksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerTrunk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTrunksIdResponse parses an HTTP response from a DeleteTrunksIdWithResponse call
func ParseDeleteTrunksIdResponse(rsp *http.Response) (*DeleteTrunksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTrunksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerTrunk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTrunksIdResponse parses an HTTP response from a GetTrunksIdWithResponse call
func ParseGetTrunksIdResponse(rsp *http.Response) (*GetTrunksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrunksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerTrunk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTrunksIdResponse parses an HTTP response from a PutTrunksIdWithResponse call
func ParsePutTrunksIdResponse(rsp *http.Response) (*PutTrunksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTrunksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrarManagerTrunk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWsResponse parses an HTTP response from a GetWsWithResponse call
func ParseGetWsResponse(rsp *http.Response) (*GetWsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
